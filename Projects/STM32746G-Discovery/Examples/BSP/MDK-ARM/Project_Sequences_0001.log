/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : C:\Users\gonza\STM32Cube\Repository\STM32Cube_FW_F7_V1.14.0 modificado\Projects\STM32746G-Discovery\Examples\BSP\MDK-ARM\Project_Sequences_0001.log
 *  Created     : 02:59:08 (10/03/2020)
 *  Device      : STM32F746NGHx
 *  PDSC File   : C:\Users\gonza\AppData\Local\Arm\Packs\Keil\STM32F7xx_DFP\2.12.0\Keil.STM32F7xx_DFP.pdsc
 *  Config File : C:\Users\gonza\STM32Cube\Repository\STM32Cube_FW_F7_V1.14.0 modificado\Projects\STM32746G-Discovery\Examples\BSP\MDK-ARM\DebugConfig\STM32746G_DISCOVERY_STM32F746NGHx_2.0.0.dbgconf
 *
 */

[02:59:08.347]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:59:08.347]  
[02:59:08.347]  <debugvars>
[02:59:08.347]    // Pre-defined
[02:59:08.348]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:59:08.348]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:59:08.348]    __dp=0x00000000
[02:59:08.348]    __ap=0x00000000
[02:59:08.348]    __traceout=0x00000001      (SWO Trace)
[02:59:08.349]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:59:08.349]    __FlashAddr=0x00000000
[02:59:08.349]    __FlashLen=0x00000000
[02:59:08.349]    __FlashArg=0x00000000
[02:59:08.349]    __FlashOp=0x00000000
[02:59:08.349]    __Result=0x00000000
[02:59:08.350]    
[02:59:08.350]    // User-defined
[02:59:08.350]    DbgMCU_CR=0x00000007
[02:59:08.350]    DbgMCU_APB1_Fz=0x00000000
[02:59:08.350]    DbgMCU_APB2_Fz=0x00000000
[02:59:08.350]    TraceClk_Pin=0x00040002
[02:59:08.350]    TraceD0_Pin=0x00040003
[02:59:08.351]    TraceD1_Pin=0x00040004
[02:59:08.351]    TraceD2_Pin=0x00040005
[02:59:08.351]    TraceD3_Pin=0x00040006
[02:59:08.351]  </debugvars>
[02:59:08.351]  
[02:59:08.351]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:59:08.352]    <block atomic="false" info="">
[02:59:08.352]      Sequence("CheckID");
[02:59:08.352]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:59:08.352]          <block atomic="false" info="">
[02:59:08.352]            __var pidr1 = 0;
[02:59:08.353]              // -> [pidr1 <= 0x00000000]
[02:59:08.353]            __var pidr2 = 0;
[02:59:08.353]              // -> [pidr2 <= 0x00000000]
[02:59:08.353]            __var jep106id = 0;
[02:59:08.353]              // -> [jep106id <= 0x00000000]
[02:59:08.353]            __var ROMTableBase = 0;
[02:59:08.354]              // -> [ROMTableBase <= 0x00000000]
[02:59:08.354]            __ap = 0;      // AHB-AP
[02:59:08.354]              // -> [__ap <= 0x00000000]
[02:59:08.354]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:59:08.354]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:59:08.355]              // -> [ROMTableBase <= 0xE00FD000]
[02:59:08.355]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:59:08.355]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:59:08.356]              // -> [pidr1 <= 0x00000004]
[02:59:08.356]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:59:08.356]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:59:08.356]              // -> [pidr2 <= 0x0000001A]
[02:59:08.356]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:59:08.357]              // -> [jep106id <= 0x00000020]
[02:59:08.357]          </block>
[02:59:08.357]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:59:08.357]            // if-block "jep106id != 0x20"
[02:59:08.357]              // =>  FALSE
[02:59:08.357]            // skip if-block "jep106id != 0x20"
[02:59:08.358]          </control>
[02:59:08.358]        </sequence>
[02:59:08.358]    </block>
[02:59:08.358]  </sequence>
[02:59:08.359]  
[02:59:08.372]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:59:08.372]  
[02:59:08.373]  <debugvars>
[02:59:08.373]    // Pre-defined
[02:59:08.373]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:59:08.373]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:59:08.373]    __dp=0x00000000
[02:59:08.374]    __ap=0x00000000
[02:59:08.374]    __traceout=0x00000001      (SWO Trace)
[02:59:08.374]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:59:08.374]    __FlashAddr=0x00000000
[02:59:08.374]    __FlashLen=0x00000000
[02:59:08.375]    __FlashArg=0x00000000
[02:59:08.375]    __FlashOp=0x00000000
[02:59:08.375]    __Result=0x00000000
[02:59:08.375]    
[02:59:08.375]    // User-defined
[02:59:08.375]    DbgMCU_CR=0x00000007
[02:59:08.376]    DbgMCU_APB1_Fz=0x00000000
[02:59:08.376]    DbgMCU_APB2_Fz=0x00000000
[02:59:08.376]    TraceClk_Pin=0x00040002
[02:59:08.376]    TraceD0_Pin=0x00040003
[02:59:08.376]    TraceD1_Pin=0x00040004
[02:59:08.377]    TraceD2_Pin=0x00040005
[02:59:08.377]    TraceD3_Pin=0x00040006
[02:59:08.377]  </debugvars>
[02:59:08.377]  
[02:59:08.377]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:59:08.378]    <block atomic="false" info="">
[02:59:08.378]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:59:08.378]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:08.378]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:59:08.379]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:08.379]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:59:08.380]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:08.380]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:59:08.381]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:08.381]    </block>
[02:59:08.381]  </sequence>
[02:59:08.381]  
[02:59:39.534]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:59:39.534]  
[02:59:39.534]  <debugvars>
[02:59:39.534]    // Pre-defined
[02:59:39.535]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:59:39.535]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:59:39.535]    __dp=0x00000000
[02:59:39.535]    __ap=0x00000000
[02:59:39.535]    __traceout=0x00000001      (SWO Trace)
[02:59:39.535]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:59:39.535]    __FlashAddr=0x00000000
[02:59:39.535]    __FlashLen=0x00000000
[02:59:39.536]    __FlashArg=0x00000000
[02:59:39.536]    __FlashOp=0x00000000
[02:59:39.536]    __Result=0x00000000
[02:59:39.536]    
[02:59:39.536]    // User-defined
[02:59:39.536]    DbgMCU_CR=0x00000007
[02:59:39.536]    DbgMCU_APB1_Fz=0x00000000
[02:59:39.536]    DbgMCU_APB2_Fz=0x00000000
[02:59:39.536]    TraceClk_Pin=0x00040002
[02:59:39.536]    TraceD0_Pin=0x00040003
[02:59:39.537]    TraceD1_Pin=0x00040004
[02:59:39.537]    TraceD2_Pin=0x00040005
[02:59:39.537]    TraceD3_Pin=0x00040006
[02:59:39.537]  </debugvars>
[02:59:39.537]  
[02:59:39.537]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:59:39.537]    <block atomic="false" info="">
[02:59:39.537]      Sequence("CheckID");
[02:59:39.538]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:59:39.538]          <block atomic="false" info="">
[02:59:39.538]            __var pidr1 = 0;
[02:59:39.538]              // -> [pidr1 <= 0x00000000]
[02:59:39.538]            __var pidr2 = 0;
[02:59:39.538]              // -> [pidr2 <= 0x00000000]
[02:59:39.538]            __var jep106id = 0;
[02:59:39.538]              // -> [jep106id <= 0x00000000]
[02:59:39.539]            __var ROMTableBase = 0;
[02:59:39.539]              // -> [ROMTableBase <= 0x00000000]
[02:59:39.539]            __ap = 0;      // AHB-AP
[02:59:39.539]              // -> [__ap <= 0x00000000]
[02:59:39.539]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:59:39.539]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.539]              // -> [ROMTableBase <= 0xE00FD000]
[02:59:39.540]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:59:39.540]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.540]              // -> [pidr1 <= 0x00000004]
[02:59:39.540]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:59:39.541]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.541]              // -> [pidr2 <= 0x0000001A]
[02:59:39.541]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:59:39.541]              // -> [jep106id <= 0x00000020]
[02:59:39.541]          </block>
[02:59:39.541]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:59:39.541]            // if-block "jep106id != 0x20"
[02:59:39.541]              // =>  FALSE
[02:59:39.542]            // skip if-block "jep106id != 0x20"
[02:59:39.542]          </control>
[02:59:39.542]        </sequence>
[02:59:39.542]    </block>
[02:59:39.542]  </sequence>
[02:59:39.542]  
[02:59:39.556]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:59:39.556]  
[02:59:39.556]  <debugvars>
[02:59:39.556]    // Pre-defined
[02:59:39.557]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:59:39.557]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:59:39.557]    __dp=0x00000000
[02:59:39.557]    __ap=0x00000000
[02:59:39.557]    __traceout=0x00000001      (SWO Trace)
[02:59:39.557]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:59:39.557]    __FlashAddr=0x00000000
[02:59:39.558]    __FlashLen=0x00000000
[02:59:39.558]    __FlashArg=0x00000000
[02:59:39.558]    __FlashOp=0x00000000
[02:59:39.558]    __Result=0x00000000
[02:59:39.558]    
[02:59:39.558]    // User-defined
[02:59:39.558]    DbgMCU_CR=0x00000007
[02:59:39.558]    DbgMCU_APB1_Fz=0x00000000
[02:59:39.558]    DbgMCU_APB2_Fz=0x00000000
[02:59:39.559]    TraceClk_Pin=0x00040002
[02:59:39.559]    TraceD0_Pin=0x00040003
[02:59:39.559]    TraceD1_Pin=0x00040004
[02:59:39.559]    TraceD2_Pin=0x00040005
[02:59:39.559]    TraceD3_Pin=0x00040006
[02:59:39.559]  </debugvars>
[02:59:39.559]  
[02:59:39.559]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:59:39.560]    <block atomic="false" info="">
[02:59:39.560]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:59:39.560]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.560]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:59:39.561]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.561]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:59:39.561]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.561]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:59:39.562]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.562]    </block>
[02:59:39.562]  </sequence>
[02:59:39.562]  
[02:59:39.577]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[02:59:39.577]  
[02:59:39.578]  <debugvars>
[02:59:39.578]    // Pre-defined
[02:59:39.578]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:59:39.578]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:59:39.578]    __dp=0x00000000
[02:59:39.578]    __ap=0x00000000
[02:59:39.578]    __traceout=0x00000001      (SWO Trace)
[02:59:39.578]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:59:39.578]    __FlashAddr=0x00000000
[02:59:39.579]    __FlashLen=0x00000000
[02:59:39.579]    __FlashArg=0x00000000
[02:59:39.579]    __FlashOp=0x00000000
[02:59:39.579]    __Result=0x00000000
[02:59:39.579]    
[02:59:39.579]    // User-defined
[02:59:39.579]    DbgMCU_CR=0x00000007
[02:59:39.579]    DbgMCU_APB1_Fz=0x00000000
[02:59:39.580]    DbgMCU_APB2_Fz=0x00000000
[02:59:39.580]    TraceClk_Pin=0x00040002
[02:59:39.580]    TraceD0_Pin=0x00040003
[02:59:39.580]    TraceD1_Pin=0x00040004
[02:59:39.580]    TraceD2_Pin=0x00040005
[02:59:39.580]    TraceD3_Pin=0x00040006
[02:59:39.580]  </debugvars>
[02:59:39.580]  
[02:59:39.580]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:59:39.581]    <block atomic="false" info="">
[02:59:39.581]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:59:39.581]        // -> [traceSWO <= 0x00000001]
[02:59:39.581]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:59:39.581]        // -> [traceTPIU <= 0x00000000]
[02:59:39.581]    </block>
[02:59:39.581]    <control if="traceSWO" while="" timeout="0" info="">
[02:59:39.581]      // if-block "traceSWO"
[02:59:39.582]        // =>  TRUE
[02:59:39.582]      <block atomic="false" info="">
[02:59:39.582]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:59:39.582]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:59:39.582]            <block atomic="false" info="">
[02:59:39.582]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:59:39.582]                // -> [dbgmcu_val <= 0x00000000]
[02:59:39.582]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:59:39.582]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:59:39.583]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:59:39.583]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.583]                // -> [dbgmcu_val <= 0x00000007]
[02:59:39.583]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:59:39.583]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:59:39.584]              Sequence("ConfigureTraceSWOPin");
[02:59:39.584]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:59:39.584]                  <block atomic="false" info="">
[02:59:39.584]                    __var pin     = 0;
[02:59:39.584]                      // -> [pin <= 0x00000000]
[02:59:39.584]                    __var port    = 0;
[02:59:39.584]                      // -> [port <= 0x00000000]
[02:59:39.584]                    __var portAdr = 0;
[02:59:39.585]                      // -> [portAdr <= 0x00000000]
[02:59:39.585]                    __var pos     = 0;
[02:59:39.585]                      // -> [pos <= 0x00000000]
[02:59:39.585]                    __var SWO_Pin = 0x00010003;          // PB3
[02:59:39.585]                      // -> [SWO_Pin <= 0x00010003]
[02:59:39.585]                  </block>
[02:59:39.585]                  <block atomic="false" info="configure SWO">
[02:59:39.585]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:59:39.586]                      // -> [pin <= 0x00000003]
[02:59:39.586]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:59:39.586]                      // -> [port <= 0x00000001]
[02:59:39.586]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:59:39.586]                      // -> [portAdr <= 0x40020400]
[02:59:39.586]                    pos = pin * 2;
[02:59:39.586]                      // -> [pos <= 0x00000006]
[02:59:39.586]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:59:39.587]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.587]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.588]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:59:39.588]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.588]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.589]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:59:39.589]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.590]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.590]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:59:39.590]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.591]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.591]                  </block>
[02:59:39.591]                  <control if="pin <  8" while="" timeout="0" info="">
[02:59:39.591]                    // if-block "pin <  8"
[02:59:39.591]                      // =>  TRUE
[02:59:39.591]                    <block atomic="false" info="">
[02:59:39.591]                      pos = ((pin    ) & 7) * 4;
[02:59:39.591]                        // -> [pos <= 0x0000000C]
[02:59:39.591]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:59:39.592]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.592]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.592]                    </block>
[02:59:39.593]                    // end if-block "pin <  8"
[02:59:39.593]                  </control>
[02:59:39.593]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:59:39.593]                    // if-block "pin >= 8"
[02:59:39.593]                      // =>  FALSE
[02:59:39.593]                    // skip if-block "pin >= 8"
[02:59:39.593]                  </control>
[02:59:39.593]                </sequence>
[02:59:39.594]            </block>
[02:59:39.594]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:59:39.594]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:59:39.594]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.594]            </block>
[02:59:39.594]          </sequence>
[02:59:39.595]      </block>
[02:59:39.595]      // end if-block "traceSWO"
[02:59:39.595]    </control>
[02:59:39.595]    <control if="traceTPIU" while="" timeout="0" info="">
[02:59:39.595]      // if-block "traceTPIU"
[02:59:39.595]        // =>  FALSE
[02:59:39.595]      // skip if-block "traceTPIU"
[02:59:39.596]    </control>
[02:59:39.596]  </sequence>
[02:59:39.596]  
[02:59:39.599]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:59:39.599]  
[02:59:39.600]  <debugvars>
[02:59:39.600]    // Pre-defined
[02:59:39.600]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:59:39.600]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:59:39.600]    __dp=0x00000000
[02:59:39.600]    __ap=0x00000000
[02:59:39.600]    __traceout=0x00000001      (SWO Trace)
[02:59:39.600]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:59:39.601]    __FlashAddr=0x00000000
[02:59:39.601]    __FlashLen=0x00000000
[02:59:39.601]    __FlashArg=0x00000000
[02:59:39.601]    __FlashOp=0x00000000
[02:59:39.601]    __Result=0x00000000
[02:59:39.601]    
[02:59:39.601]    // User-defined
[02:59:39.601]    DbgMCU_CR=0x00000007
[02:59:39.601]    DbgMCU_APB1_Fz=0x00000000
[02:59:39.602]    DbgMCU_APB2_Fz=0x00000000
[02:59:39.602]    TraceClk_Pin=0x00040002
[02:59:39.602]    TraceD0_Pin=0x00040003
[02:59:39.602]    TraceD1_Pin=0x00040004
[02:59:39.602]    TraceD2_Pin=0x00040005
[02:59:39.602]    TraceD3_Pin=0x00040006
[02:59:39.602]  </debugvars>
[02:59:39.602]  
[02:59:39.602]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:59:39.603]    <block atomic="false" info="">
[02:59:39.603]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:59:39.603]        // -> [traceSWO <= 0x00000001]
[02:59:39.603]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:59:39.603]        // -> [traceTPIU <= 0x00000000]
[02:59:39.603]    </block>
[02:59:39.603]    <control if="traceSWO" while="" timeout="0" info="">
[02:59:39.603]      // if-block "traceSWO"
[02:59:39.604]        // =>  TRUE
[02:59:39.604]      <block atomic="false" info="">
[02:59:39.604]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:59:39.604]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:59:39.604]            <block atomic="false" info="">
[02:59:39.604]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:59:39.604]                // -> [dbgmcu_val <= 0x00000000]
[02:59:39.605]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:59:39.605]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:59:39.605]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:59:39.605]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.605]                // -> [dbgmcu_val <= 0x00000007]
[02:59:39.606]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:59:39.606]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:59:39.606]              Sequence("ConfigureTraceSWOPin");
[02:59:39.606]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:59:39.606]                  <block atomic="false" info="">
[02:59:39.606]                    __var pin     = 0;
[02:59:39.606]                      // -> [pin <= 0x00000000]
[02:59:39.606]                    __var port    = 0;
[02:59:39.606]                      // -> [port <= 0x00000000]
[02:59:39.607]                    __var portAdr = 0;
[02:59:39.607]                      // -> [portAdr <= 0x00000000]
[02:59:39.607]                    __var pos     = 0;
[02:59:39.607]                      // -> [pos <= 0x00000000]
[02:59:39.607]                    __var SWO_Pin = 0x00010003;          // PB3
[02:59:39.607]                      // -> [SWO_Pin <= 0x00010003]
[02:59:39.607]                  </block>
[02:59:39.607]                  <block atomic="false" info="configure SWO">
[02:59:39.608]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:59:39.608]                      // -> [pin <= 0x00000003]
[02:59:39.608]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:59:39.608]                      // -> [port <= 0x00000001]
[02:59:39.608]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:59:39.608]                      // -> [portAdr <= 0x40020400]
[02:59:39.608]                    pos = pin * 2;
[02:59:39.608]                      // -> [pos <= 0x00000006]
[02:59:39.608]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:59:39.609]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.609]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.610]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:59:39.610]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.610]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.611]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:59:39.611]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.611]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.612]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:59:39.612]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.612]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.613]                  </block>
[02:59:39.613]                  <control if="pin <  8" while="" timeout="0" info="">
[02:59:39.613]                    // if-block "pin <  8"
[02:59:39.613]                      // =>  TRUE
[02:59:39.613]                    <block atomic="false" info="">
[02:59:39.613]                      pos = ((pin    ) & 7) * 4;
[02:59:39.613]                        // -> [pos <= 0x0000000C]
[02:59:39.613]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:59:39.614]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.614]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.614]                    </block>
[02:59:39.615]                    // end if-block "pin <  8"
[02:59:39.615]                  </control>
[02:59:39.615]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:59:39.615]                    // if-block "pin >= 8"
[02:59:39.615]                      // =>  FALSE
[02:59:39.615]                    // skip if-block "pin >= 8"
[02:59:39.615]                  </control>
[02:59:39.615]                </sequence>
[02:59:39.615]            </block>
[02:59:39.616]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:59:39.616]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:59:39.616]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.616]            </block>
[02:59:39.616]          </sequence>
[02:59:39.616]      </block>
[02:59:39.617]      // end if-block "traceSWO"
[02:59:39.617]    </control>
[02:59:39.617]    <control if="traceTPIU" while="" timeout="0" info="">
[02:59:39.617]      // if-block "traceTPIU"
[02:59:39.617]        // =>  FALSE
[02:59:39.617]      // skip if-block "traceTPIU"
[02:59:39.617]    </control>
[02:59:39.617]  </sequence>
[02:59:39.618]  
[02:59:39.838]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:59:39.838]  
[02:59:39.838]  <debugvars>
[02:59:39.838]    // Pre-defined
[02:59:39.838]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:59:39.838]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:59:39.839]    __dp=0x00000000
[02:59:39.839]    __ap=0x00000000
[02:59:39.839]    __traceout=0x00000001      (SWO Trace)
[02:59:39.839]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:59:39.839]    __FlashAddr=0x00000000
[02:59:39.840]    __FlashLen=0x00000000
[02:59:39.840]    __FlashArg=0x00000000
[02:59:39.840]    __FlashOp=0x00000000
[02:59:39.840]    __Result=0x00000000
[02:59:39.840]    
[02:59:39.840]    // User-defined
[02:59:39.840]    DbgMCU_CR=0x00000007
[02:59:39.841]    DbgMCU_APB1_Fz=0x00000000
[02:59:39.841]    DbgMCU_APB2_Fz=0x00000000
[02:59:39.841]    TraceClk_Pin=0x00040002
[02:59:39.841]    TraceD0_Pin=0x00040003
[02:59:39.841]    TraceD1_Pin=0x00040004
[02:59:39.841]    TraceD2_Pin=0x00040005
[02:59:39.842]    TraceD3_Pin=0x00040006
[02:59:39.842]  </debugvars>
[02:59:39.842]  
[02:59:39.842]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:59:39.842]    <block atomic="false" info="">
[02:59:39.842]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:59:39.842]        // -> [traceSWO <= 0x00000001]
[02:59:39.842]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:59:39.843]        // -> [traceTPIU <= 0x00000000]
[02:59:39.843]    </block>
[02:59:39.843]    <control if="traceSWO" while="" timeout="0" info="">
[02:59:39.843]      // if-block "traceSWO"
[02:59:39.843]        // =>  TRUE
[02:59:39.843]      <block atomic="false" info="">
[02:59:39.843]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:59:39.844]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:59:39.844]            <block atomic="false" info="">
[02:59:39.844]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:59:39.844]                // -> [dbgmcu_val <= 0x00000000]
[02:59:39.844]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:59:39.844]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:59:39.844]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:59:39.845]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.845]                // -> [dbgmcu_val <= 0x00000007]
[02:59:39.845]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:59:39.845]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:59:39.845]              Sequence("ConfigureTraceSWOPin");
[02:59:39.845]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:59:39.845]                  <block atomic="false" info="">
[02:59:39.845]                    __var pin     = 0;
[02:59:39.846]                      // -> [pin <= 0x00000000]
[02:59:39.846]                    __var port    = 0;
[02:59:39.846]                      // -> [port <= 0x00000000]
[02:59:39.846]                    __var portAdr = 0;
[02:59:39.846]                      // -> [portAdr <= 0x00000000]
[02:59:39.846]                    __var pos     = 0;
[02:59:39.846]                      // -> [pos <= 0x00000000]
[02:59:39.846]                    __var SWO_Pin = 0x00010003;          // PB3
[02:59:39.846]                      // -> [SWO_Pin <= 0x00010003]
[02:59:39.847]                  </block>
[02:59:39.847]                  <block atomic="false" info="configure SWO">
[02:59:39.847]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:59:39.847]                      // -> [pin <= 0x00000003]
[02:59:39.847]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:59:39.847]                      // -> [port <= 0x00000001]
[02:59:39.847]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:59:39.847]                      // -> [portAdr <= 0x40020400]
[02:59:39.848]                    pos = pin * 2;
[02:59:39.848]                      // -> [pos <= 0x00000006]
[02:59:39.848]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:59:39.848]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.849]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.849]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:59:39.849]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.850]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.850]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:59:39.850]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.851]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.851]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:59:39.851]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.852]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.852]                  </block>
[02:59:39.852]                  <control if="pin <  8" while="" timeout="0" info="">
[02:59:39.852]                    // if-block "pin <  8"
[02:59:39.852]                      // =>  TRUE
[02:59:39.852]                    <block atomic="false" info="">
[02:59:39.852]                      pos = ((pin    ) & 7) * 4;
[02:59:39.852]                        // -> [pos <= 0x0000000C]
[02:59:39.853]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:59:39.853]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.853]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.853]                    </block>
[02:59:39.854]                    // end if-block "pin <  8"
[02:59:39.854]                  </control>
[02:59:39.854]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:59:39.854]                    // if-block "pin >= 8"
[02:59:39.854]                      // =>  FALSE
[02:59:39.854]                    // skip if-block "pin >= 8"
[02:59:39.854]                  </control>
[02:59:39.855]                </sequence>
[02:59:39.855]            </block>
[02:59:39.855]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:59:39.855]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:59:39.855]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:59:39.855]            </block>
[02:59:39.856]          </sequence>
[02:59:39.856]      </block>
[02:59:39.856]      // end if-block "traceSWO"
[02:59:39.856]    </control>
[02:59:39.856]    <control if="traceTPIU" while="" timeout="0" info="">
[02:59:39.856]      // if-block "traceTPIU"
[02:59:39.856]        // =>  FALSE
[02:59:39.856]      // skip if-block "traceTPIU"
[02:59:39.856]    </control>
[02:59:39.857]  </sequence>
[02:59:39.857]  
[03:00:00.837]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:00:00.837]  
[03:00:00.837]  <debugvars>
[03:00:00.837]    // Pre-defined
[03:00:00.838]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:00:00.838]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:00:00.838]    __dp=0x00000000
[03:00:00.838]    __ap=0x00000000
[03:00:00.839]    __traceout=0x00000001      (SWO Trace)
[03:00:00.839]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:00:00.839]    __FlashAddr=0x00000000
[03:00:00.839]    __FlashLen=0x00000000
[03:00:00.839]    __FlashArg=0x00000000
[03:00:00.840]    __FlashOp=0x00000000
[03:00:00.840]    __Result=0x00000000
[03:00:00.840]    
[03:00:00.840]    // User-defined
[03:00:00.840]    DbgMCU_CR=0x00000007
[03:00:00.840]    DbgMCU_APB1_Fz=0x00000000
[03:00:00.841]    DbgMCU_APB2_Fz=0x00000000
[03:00:00.841]    TraceClk_Pin=0x00040002
[03:00:00.841]    TraceD0_Pin=0x00040003
[03:00:00.841]    TraceD1_Pin=0x00040004
[03:00:00.841]    TraceD2_Pin=0x00040005
[03:00:00.842]    TraceD3_Pin=0x00040006
[03:00:00.842]  </debugvars>
[03:00:00.842]  
[03:00:00.842]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:00:00.842]    <block atomic="false" info="">
[03:00:00.843]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:00:00.843]        // -> [traceSWO <= 0x00000001]
[03:00:00.843]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:00:00.843]        // -> [traceTPIU <= 0x00000000]
[03:00:00.843]    </block>
[03:00:00.843]    <control if="traceSWO" while="" timeout="0" info="">
[03:00:00.844]      // if-block "traceSWO"
[03:00:00.844]        // =>  TRUE
[03:00:00.844]      <block atomic="false" info="">
[03:00:00.844]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:00:00.844]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:00:00.844]            <block atomic="false" info="">
[03:00:00.845]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:00:00.845]                // -> [dbgmcu_val <= 0x00000000]
[03:00:00.845]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:00:00.845]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:00:00.845]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:00:00.846]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:00:00.846]                // -> [dbgmcu_val <= 0x00000007]
[03:00:00.846]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:00:00.846]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:00:00.846]              Sequence("ConfigureTraceSWOPin");
[03:00:00.847]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:00:00.847]                  <block atomic="false" info="">
[03:00:00.847]                    __var pin     = 0;
[03:00:00.847]                      // -> [pin <= 0x00000000]
[03:00:00.847]                    __var port    = 0;
[03:00:00.847]                      // -> [port <= 0x00000000]
[03:00:00.848]                    __var portAdr = 0;
[03:00:00.848]                      // -> [portAdr <= 0x00000000]
[03:00:00.848]                    __var pos     = 0;
[03:00:00.848]                      // -> [pos <= 0x00000000]
[03:00:00.848]                    __var SWO_Pin = 0x00010003;          // PB3
[03:00:00.848]                      // -> [SWO_Pin <= 0x00010003]
[03:00:00.848]                  </block>
[03:00:00.849]                  <block atomic="false" info="configure SWO">
[03:00:00.849]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:00:00.849]                      // -> [pin <= 0x00000003]
[03:00:00.849]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:00:00.849]                      // -> [port <= 0x00000001]
[03:00:00.849]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:00:00.850]                      // -> [portAdr <= 0x40020400]
[03:00:00.850]                    pos = pin * 2;
[03:00:00.850]                      // -> [pos <= 0x00000006]
[03:00:00.850]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:00:00.851]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:00:00.851]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:00:00.851]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:00:00.852]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:00:00.852]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:00:00.852]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:00:00.853]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:00:00.854]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:00:00.854]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:00:00.854]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:00:00.855]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:00:00.855]                  </block>
[03:00:00.855]                  <control if="pin <  8" while="" timeout="0" info="">
[03:00:00.855]                    // if-block "pin <  8"
[03:00:00.856]                      // =>  TRUE
[03:00:00.856]                    <block atomic="false" info="">
[03:00:00.856]                      pos = ((pin    ) & 7) * 4;
[03:00:00.856]                        // -> [pos <= 0x0000000C]
[03:00:00.856]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:00:00.857]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:00:00.857]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:00:00.857]                    </block>
[03:00:00.858]                    // end if-block "pin <  8"
[03:00:00.858]                  </control>
[03:00:00.858]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:00:00.858]                    // if-block "pin >= 8"
[03:00:00.858]                      // =>  FALSE
[03:00:00.858]                    // skip if-block "pin >= 8"
[03:00:00.859]                  </control>
[03:00:00.859]                </sequence>
[03:00:00.859]            </block>
[03:00:00.859]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:00:00.859]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:00:00.860]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:00:00.860]            </block>
[03:00:00.860]          </sequence>
[03:00:00.860]      </block>
[03:00:00.860]      // end if-block "traceSWO"
[03:00:00.861]    </control>
[03:00:00.861]    <control if="traceTPIU" while="" timeout="0" info="">
[03:00:00.861]      // if-block "traceTPIU"
[03:00:00.861]        // =>  FALSE
[03:00:00.861]      // skip if-block "traceTPIU"
[03:00:00.861]    </control>
[03:00:00.862]  </sequence>
[03:00:00.862]  
[03:00:25.062]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:00:25.062]  
[03:00:25.062]  <debugvars>
[03:00:25.062]    // Pre-defined
[03:00:25.063]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:00:25.063]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:00:25.063]    __dp=0x00000000
[03:00:25.063]    __ap=0x00000000
[03:00:25.063]    __traceout=0x00000001      (SWO Trace)
[03:00:25.063]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:00:25.064]    __FlashAddr=0x00000000
[03:00:25.064]    __FlashLen=0x00000000
[03:00:25.064]    __FlashArg=0x00000000
[03:00:25.064]    __FlashOp=0x00000000
[03:00:25.064]    __Result=0x00000000
[03:00:25.064]    
[03:00:25.064]    // User-defined
[03:00:25.065]    DbgMCU_CR=0x00000007
[03:00:25.065]    DbgMCU_APB1_Fz=0x00000000
[03:00:25.065]    DbgMCU_APB2_Fz=0x00000000
[03:00:25.065]    TraceClk_Pin=0x00040002
[03:00:25.065]    TraceD0_Pin=0x00040003
[03:00:25.065]    TraceD1_Pin=0x00040004
[03:00:25.065]    TraceD2_Pin=0x00040005
[03:00:25.066]    TraceD3_Pin=0x00040006
[03:00:25.066]  </debugvars>
[03:00:25.066]  
[03:00:25.066]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:00:25.066]    <block atomic="false" info="">
[03:00:25.066]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:00:25.066]        // -> [traceSWO <= 0x00000001]
[03:00:25.067]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:00:25.067]        // -> [traceTPIU <= 0x00000000]
[03:00:25.067]    </block>
[03:00:25.067]    <control if="traceSWO" while="" timeout="0" info="">
[03:00:25.067]      // if-block "traceSWO"
[03:00:25.067]        // =>  TRUE
[03:00:25.067]      <block atomic="false" info="">
[03:00:25.067]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:00:25.067]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:00:25.068]            <block atomic="false" info="">
[03:00:25.068]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:00:25.068]                // -> [dbgmcu_val <= 0x00000000]
[03:00:25.068]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:00:25.068]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:00:25.068]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:00:25.069]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:00:25.069]                // -> [dbgmcu_val <= 0x00000007]
[03:00:25.069]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:00:25.069]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:00:25.069]              Sequence("ConfigureTraceSWOPin");
[03:00:25.069]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:00:25.069]                  <block atomic="false" info="">
[03:00:25.069]                    __var pin     = 0;
[03:00:25.069]                      // -> [pin <= 0x00000000]
[03:00:25.070]                    __var port    = 0;
[03:00:25.070]                      // -> [port <= 0x00000000]
[03:00:25.070]                    __var portAdr = 0;
[03:00:25.070]                      // -> [portAdr <= 0x00000000]
[03:00:25.070]                    __var pos     = 0;
[03:00:25.070]                      // -> [pos <= 0x00000000]
[03:00:25.070]                    __var SWO_Pin = 0x00010003;          // PB3
[03:00:25.070]                      // -> [SWO_Pin <= 0x00010003]
[03:00:25.070]                  </block>
[03:00:25.071]                  <block atomic="false" info="configure SWO">
[03:00:25.071]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:00:25.071]                      // -> [pin <= 0x00000003]
[03:00:25.071]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:00:25.071]                      // -> [port <= 0x00000001]
[03:00:25.071]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:00:25.071]                      // -> [portAdr <= 0x40020400]
[03:00:25.071]                    pos = pin * 2;
[03:00:25.072]                      // -> [pos <= 0x00000006]
[03:00:25.072]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:00:25.072]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:00:25.072]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:00:25.073]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:00:25.073]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:00:25.074]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:00:25.074]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:00:25.074]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:00:25.074]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:00:25.075]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:00:25.075]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:00:25.075]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:00:25.076]                  </block>
[03:00:25.076]                  <control if="pin <  8" while="" timeout="0" info="">
[03:00:25.076]                    // if-block "pin <  8"
[03:00:25.076]                      // =>  TRUE
[03:00:25.076]                    <block atomic="false" info="">
[03:00:25.076]                      pos = ((pin    ) & 7) * 4;
[03:00:25.076]                        // -> [pos <= 0x0000000C]
[03:00:25.076]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:00:25.077]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:00:25.077]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:00:25.077]                    </block>
[03:00:25.077]                    // end if-block "pin <  8"
[03:00:25.077]                  </control>
[03:00:25.078]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:00:25.078]                    // if-block "pin >= 8"
[03:00:25.078]                      // =>  FALSE
[03:00:25.078]                    // skip if-block "pin >= 8"
[03:00:25.078]                  </control>
[03:00:25.078]                </sequence>
[03:00:25.078]            </block>
[03:00:25.078]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:00:25.078]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:00:25.079]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:00:25.079]            </block>
[03:00:25.079]          </sequence>
[03:00:25.079]      </block>
[03:00:25.079]      // end if-block "traceSWO"
[03:00:25.079]    </control>
[03:00:25.080]    <control if="traceTPIU" while="" timeout="0" info="">
[03:00:25.080]      // if-block "traceTPIU"
[03:00:25.080]        // =>  FALSE
[03:00:25.080]      // skip if-block "traceTPIU"
[03:00:25.080]    </control>
[03:00:25.080]  </sequence>
[03:00:25.080]  
[03:00:38.527]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:00:38.527]  
[03:00:38.527]  <debugvars>
[03:00:38.527]    // Pre-defined
[03:00:38.527]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:00:38.528]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:00:38.528]    __dp=0x00000000
[03:00:38.528]    __ap=0x00000000
[03:00:38.528]    __traceout=0x00000001      (SWO Trace)
[03:00:38.528]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:00:38.529]    __FlashAddr=0x00000000
[03:00:38.529]    __FlashLen=0x00000000
[03:00:38.529]    __FlashArg=0x00000000
[03:00:38.529]    __FlashOp=0x00000000
[03:00:38.529]    __Result=0x00000000
[03:00:38.530]    
[03:00:38.530]    // User-defined
[03:00:38.530]    DbgMCU_CR=0x00000007
[03:00:38.530]    DbgMCU_APB1_Fz=0x00000000
[03:00:38.530]    DbgMCU_APB2_Fz=0x00000000
[03:00:38.530]    TraceClk_Pin=0x00040002
[03:00:38.530]    TraceD0_Pin=0x00040003
[03:00:38.531]    TraceD1_Pin=0x00040004
[03:00:38.531]    TraceD2_Pin=0x00040005
[03:00:38.531]    TraceD3_Pin=0x00040006
[03:00:38.531]  </debugvars>
[03:00:38.531]  
[03:00:38.532]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:00:38.532]    <block atomic="false" info="">
[03:00:38.532]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:00:38.532]        // -> [traceSWO <= 0x00000001]
[03:00:38.532]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:00:38.532]        // -> [traceTPIU <= 0x00000000]
[03:00:38.533]    </block>
[03:00:38.533]    <control if="traceSWO" while="" timeout="0" info="">
[03:00:38.533]      // if-block "traceSWO"
[03:00:38.533]        // =>  TRUE
[03:00:38.534]      <block atomic="false" info="">
[03:00:38.534]        Sequence("DisableTraceSWO");
[03:00:38.534]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:00:38.534]            <block atomic="false" info="">
[03:00:38.534]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:00:38.534]                // -> [dbgmcu_val <= 0x00000000]
[03:00:38.535]            </block>
[03:00:38.535]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:00:38.535]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:00:38.535]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:00:38.536]                // -> [dbgmcu_val <= 0x00000007]
[03:00:38.536]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:00:38.536]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:00:38.536]            </block>
[03:00:38.537]          </sequence>
[03:00:38.537]      </block>
[03:00:38.537]      // end if-block "traceSWO"
[03:00:38.537]    </control>
[03:00:38.537]    <control if="traceTPIU" while="" timeout="0" info="">
[03:00:38.538]      // if-block "traceTPIU"
[03:00:38.538]        // =>  FALSE
[03:00:38.538]      // skip if-block "traceTPIU"
[03:00:38.538]    </control>
[03:00:38.538]  </sequence>
[03:00:38.538]  
[03:01:19.358]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:01:19.358]  
[03:01:19.358]  <debugvars>
[03:01:19.358]    // Pre-defined
[03:01:19.358]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:01:19.359]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:01:19.359]    __dp=0x00000000
[03:01:19.359]    __ap=0x00000000
[03:01:19.359]    __traceout=0x00000001      (SWO Trace)
[03:01:19.359]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:01:19.359]    __FlashAddr=0x00000000
[03:01:19.359]    __FlashLen=0x00000000
[03:01:19.360]    __FlashArg=0x00000000
[03:01:19.360]    __FlashOp=0x00000000
[03:01:19.360]    __Result=0x00000000
[03:01:19.360]    
[03:01:19.360]    // User-defined
[03:01:19.360]    DbgMCU_CR=0x00000007
[03:01:19.360]    DbgMCU_APB1_Fz=0x00000000
[03:01:19.360]    DbgMCU_APB2_Fz=0x00000000
[03:01:19.361]    TraceClk_Pin=0x00040002
[03:01:19.361]    TraceD0_Pin=0x00040003
[03:01:19.361]    TraceD1_Pin=0x00040004
[03:01:19.361]    TraceD2_Pin=0x00040005
[03:01:19.361]    TraceD3_Pin=0x00040006
[03:01:19.361]  </debugvars>
[03:01:19.361]  
[03:01:19.361]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:01:19.362]    <block atomic="false" info="">
[03:01:19.362]      Sequence("CheckID");
[03:01:19.362]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:01:19.362]          <block atomic="false" info="">
[03:01:19.362]            __var pidr1 = 0;
[03:01:19.362]              // -> [pidr1 <= 0x00000000]
[03:01:19.362]            __var pidr2 = 0;
[03:01:19.362]              // -> [pidr2 <= 0x00000000]
[03:01:19.363]            __var jep106id = 0;
[03:01:19.363]              // -> [jep106id <= 0x00000000]
[03:01:19.363]            __var ROMTableBase = 0;
[03:01:19.363]              // -> [ROMTableBase <= 0x00000000]
[03:01:19.363]            __ap = 0;      // AHB-AP
[03:01:19.363]              // -> [__ap <= 0x00000000]
[03:01:19.363]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:01:19.364]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:01:19.364]              // -> [ROMTableBase <= 0xE00FD000]
[03:01:19.364]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:01:19.364]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:01:19.365]              // -> [pidr1 <= 0x00000004]
[03:01:19.365]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:01:19.365]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:01:19.365]              // -> [pidr2 <= 0x0000001A]
[03:01:19.365]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:01:19.365]              // -> [jep106id <= 0x00000020]
[03:01:19.366]          </block>
[03:01:19.366]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:01:19.366]            // if-block "jep106id != 0x20"
[03:01:19.366]              // =>  FALSE
[03:01:19.366]            // skip if-block "jep106id != 0x20"
[03:01:19.366]          </control>
[03:01:19.366]        </sequence>
[03:01:19.366]    </block>
[03:01:19.367]  </sequence>
[03:01:19.367]  
[03:01:19.381]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:01:19.381]  
[03:01:19.381]  <debugvars>
[03:01:19.382]    // Pre-defined
[03:01:19.382]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:01:19.382]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:01:19.382]    __dp=0x00000000
[03:01:19.382]    __ap=0x00000000
[03:01:19.382]    __traceout=0x00000001      (SWO Trace)
[03:01:19.382]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:01:19.382]    __FlashAddr=0x00000000
[03:01:19.383]    __FlashLen=0x00000000
[03:01:19.383]    __FlashArg=0x00000000
[03:01:19.383]    __FlashOp=0x00000000
[03:01:19.383]    __Result=0x00000000
[03:01:19.383]    
[03:01:19.383]    // User-defined
[03:01:19.383]    DbgMCU_CR=0x00000007
[03:01:19.383]    DbgMCU_APB1_Fz=0x00000000
[03:01:19.383]    DbgMCU_APB2_Fz=0x00000000
[03:01:19.384]    TraceClk_Pin=0x00040002
[03:01:19.384]    TraceD0_Pin=0x00040003
[03:01:19.384]    TraceD1_Pin=0x00040004
[03:01:19.384]    TraceD2_Pin=0x00040005
[03:01:19.384]    TraceD3_Pin=0x00040006
[03:01:19.384]  </debugvars>
[03:01:19.384]  
[03:01:19.385]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:01:19.385]    <block atomic="false" info="">
[03:01:19.385]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:01:19.385]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:19.385]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:01:19.386]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:19.386]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:01:19.386]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:19.386]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:01:19.387]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:19.387]    </block>
[03:01:19.387]  </sequence>
[03:01:19.387]  
[03:01:50.227]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:01:50.227]  
[03:01:50.227]  <debugvars>
[03:01:50.227]    // Pre-defined
[03:01:50.227]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:01:50.228]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:01:50.228]    __dp=0x00000000
[03:01:50.228]    __ap=0x00000000
[03:01:50.228]    __traceout=0x00000001      (SWO Trace)
[03:01:50.228]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:01:50.229]    __FlashAddr=0x00000000
[03:01:50.229]    __FlashLen=0x00000000
[03:01:50.229]    __FlashArg=0x00000000
[03:01:50.229]    __FlashOp=0x00000000
[03:01:50.229]    __Result=0x00000000
[03:01:50.230]    
[03:01:50.230]    // User-defined
[03:01:50.230]    DbgMCU_CR=0x00000007
[03:01:50.230]    DbgMCU_APB1_Fz=0x00000000
[03:01:50.230]    DbgMCU_APB2_Fz=0x00000000
[03:01:50.230]    TraceClk_Pin=0x00040002
[03:01:50.231]    TraceD0_Pin=0x00040003
[03:01:50.231]    TraceD1_Pin=0x00040004
[03:01:50.231]    TraceD2_Pin=0x00040005
[03:01:50.231]    TraceD3_Pin=0x00040006
[03:01:50.231]  </debugvars>
[03:01:50.232]  
[03:01:50.232]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:01:50.232]    <block atomic="false" info="">
[03:01:50.232]      Sequence("CheckID");
[03:01:50.232]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:01:50.233]          <block atomic="false" info="">
[03:01:50.233]            __var pidr1 = 0;
[03:01:50.233]              // -> [pidr1 <= 0x00000000]
[03:01:50.233]            __var pidr2 = 0;
[03:01:50.233]              // -> [pidr2 <= 0x00000000]
[03:01:50.233]            __var jep106id = 0;
[03:01:50.234]              // -> [jep106id <= 0x00000000]
[03:01:50.234]            __var ROMTableBase = 0;
[03:01:50.234]              // -> [ROMTableBase <= 0x00000000]
[03:01:50.234]            __ap = 0;      // AHB-AP
[03:01:50.234]              // -> [__ap <= 0x00000000]
[03:01:50.235]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:01:50.235]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.235]              // -> [ROMTableBase <= 0xE00FD000]
[03:01:50.235]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:01:50.236]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.236]              // -> [pidr1 <= 0x00000004]
[03:01:50.236]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:01:50.237]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.237]              // -> [pidr2 <= 0x0000001A]
[03:01:50.237]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:01:50.237]              // -> [jep106id <= 0x00000020]
[03:01:50.238]          </block>
[03:01:50.238]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:01:50.238]            // if-block "jep106id != 0x20"
[03:01:50.238]              // =>  FALSE
[03:01:50.238]            // skip if-block "jep106id != 0x20"
[03:01:50.239]          </control>
[03:01:50.239]        </sequence>
[03:01:50.239]    </block>
[03:01:50.239]  </sequence>
[03:01:50.239]  
[03:01:50.253]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:01:50.253]  
[03:01:50.253]  <debugvars>
[03:01:50.254]    // Pre-defined
[03:01:50.254]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:01:50.254]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:01:50.254]    __dp=0x00000000
[03:01:50.254]    __ap=0x00000000
[03:01:50.254]    __traceout=0x00000001      (SWO Trace)
[03:01:50.255]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:01:50.255]    __FlashAddr=0x00000000
[03:01:50.255]    __FlashLen=0x00000000
[03:01:50.255]    __FlashArg=0x00000000
[03:01:50.255]    __FlashOp=0x00000000
[03:01:50.255]    __Result=0x00000000
[03:01:50.256]    
[03:01:50.256]    // User-defined
[03:01:50.256]    DbgMCU_CR=0x00000007
[03:01:50.256]    DbgMCU_APB1_Fz=0x00000000
[03:01:50.256]    DbgMCU_APB2_Fz=0x00000000
[03:01:50.256]    TraceClk_Pin=0x00040002
[03:01:50.256]    TraceD0_Pin=0x00040003
[03:01:50.257]    TraceD1_Pin=0x00040004
[03:01:50.257]    TraceD2_Pin=0x00040005
[03:01:50.257]    TraceD3_Pin=0x00040006
[03:01:50.257]  </debugvars>
[03:01:50.257]  
[03:01:50.258]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:01:50.258]    <block atomic="false" info="">
[03:01:50.258]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:01:50.258]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.259]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:01:50.259]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.259]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:01:50.260]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.260]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:01:50.261]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.261]    </block>
[03:01:50.261]  </sequence>
[03:01:50.261]  
[03:01:50.277]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:01:50.277]  
[03:01:50.277]  <debugvars>
[03:01:50.277]    // Pre-defined
[03:01:50.277]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:01:50.277]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:01:50.277]    __dp=0x00000000
[03:01:50.278]    __ap=0x00000000
[03:01:50.278]    __traceout=0x00000001      (SWO Trace)
[03:01:50.278]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:01:50.278]    __FlashAddr=0x00000000
[03:01:50.278]    __FlashLen=0x00000000
[03:01:50.279]    __FlashArg=0x00000000
[03:01:50.279]    __FlashOp=0x00000000
[03:01:50.279]    __Result=0x00000000
[03:01:50.279]    
[03:01:50.279]    // User-defined
[03:01:50.279]    DbgMCU_CR=0x00000007
[03:01:50.279]    DbgMCU_APB1_Fz=0x00000000
[03:01:50.280]    DbgMCU_APB2_Fz=0x00000000
[03:01:50.280]    TraceClk_Pin=0x00040002
[03:01:50.280]    TraceD0_Pin=0x00040003
[03:01:50.280]    TraceD1_Pin=0x00040004
[03:01:50.280]    TraceD2_Pin=0x00040005
[03:01:50.280]    TraceD3_Pin=0x00040006
[03:01:50.281]  </debugvars>
[03:01:50.281]  
[03:01:50.281]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:01:50.281]    <block atomic="false" info="">
[03:01:50.281]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:01:50.281]        // -> [traceSWO <= 0x00000001]
[03:01:50.282]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:01:50.282]        // -> [traceTPIU <= 0x00000000]
[03:01:50.282]    </block>
[03:01:50.282]    <control if="traceSWO" while="" timeout="0" info="">
[03:01:50.282]      // if-block "traceSWO"
[03:01:50.282]        // =>  TRUE
[03:01:50.283]      <block atomic="false" info="">
[03:01:50.283]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:01:50.283]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:01:50.283]            <block atomic="false" info="">
[03:01:50.283]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:01:50.283]                // -> [dbgmcu_val <= 0x00000000]
[03:01:50.283]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:01:50.283]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:01:50.284]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:01:50.284]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.284]                // -> [dbgmcu_val <= 0x00000007]
[03:01:50.284]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:01:50.284]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:01:50.284]              Sequence("ConfigureTraceSWOPin");
[03:01:50.285]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:01:50.285]                  <block atomic="false" info="">
[03:01:50.285]                    __var pin     = 0;
[03:01:50.285]                      // -> [pin <= 0x00000000]
[03:01:50.285]                    __var port    = 0;
[03:01:50.285]                      // -> [port <= 0x00000000]
[03:01:50.285]                    __var portAdr = 0;
[03:01:50.285]                      // -> [portAdr <= 0x00000000]
[03:01:50.285]                    __var pos     = 0;
[03:01:50.286]                      // -> [pos <= 0x00000000]
[03:01:50.286]                    __var SWO_Pin = 0x00010003;          // PB3
[03:01:50.286]                      // -> [SWO_Pin <= 0x00010003]
[03:01:50.286]                  </block>
[03:01:50.286]                  <block atomic="false" info="configure SWO">
[03:01:50.286]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:01:50.286]                      // -> [pin <= 0x00000003]
[03:01:50.286]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:01:50.287]                      // -> [port <= 0x00000001]
[03:01:50.287]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:01:50.287]                      // -> [portAdr <= 0x40020400]
[03:01:50.287]                    pos = pin * 2;
[03:01:50.287]                      // -> [pos <= 0x00000006]
[03:01:50.287]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:01:50.288]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.288]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.288]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:01:50.289]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.289]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.289]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:01:50.290]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.290]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.290]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:01:50.291]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.291]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.291]                  </block>
[03:01:50.291]                  <control if="pin <  8" while="" timeout="0" info="">
[03:01:50.292]                    // if-block "pin <  8"
[03:01:50.292]                      // =>  TRUE
[03:01:50.292]                    <block atomic="false" info="">
[03:01:50.292]                      pos = ((pin    ) & 7) * 4;
[03:01:50.292]                        // -> [pos <= 0x0000000C]
[03:01:50.292]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:01:50.293]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.293]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.293]                    </block>
[03:01:50.293]                    // end if-block "pin <  8"
[03:01:50.294]                  </control>
[03:01:50.294]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:01:50.294]                    // if-block "pin >= 8"
[03:01:50.294]                      // =>  FALSE
[03:01:50.294]                    // skip if-block "pin >= 8"
[03:01:50.294]                  </control>
[03:01:50.295]                </sequence>
[03:01:50.295]            </block>
[03:01:50.295]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:01:50.295]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:01:50.295]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.295]            </block>
[03:01:50.296]          </sequence>
[03:01:50.296]      </block>
[03:01:50.296]      // end if-block "traceSWO"
[03:01:50.296]    </control>
[03:01:50.296]    <control if="traceTPIU" while="" timeout="0" info="">
[03:01:50.296]      // if-block "traceTPIU"
[03:01:50.296]        // =>  FALSE
[03:01:50.297]      // skip if-block "traceTPIU"
[03:01:50.297]    </control>
[03:01:50.297]  </sequence>
[03:01:50.297]  
[03:01:50.301]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:01:50.301]  
[03:01:50.301]  <debugvars>
[03:01:50.301]    // Pre-defined
[03:01:50.301]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:01:50.301]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:01:50.302]    __dp=0x00000000
[03:01:50.302]    __ap=0x00000000
[03:01:50.302]    __traceout=0x00000001      (SWO Trace)
[03:01:50.302]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:01:50.302]    __FlashAddr=0x00000000
[03:01:50.302]    __FlashLen=0x00000000
[03:01:50.303]    __FlashArg=0x00000000
[03:01:50.303]    __FlashOp=0x00000000
[03:01:50.303]    __Result=0x00000000
[03:01:50.303]    
[03:01:50.303]    // User-defined
[03:01:50.303]    DbgMCU_CR=0x00000007
[03:01:50.303]    DbgMCU_APB1_Fz=0x00000000
[03:01:50.303]    DbgMCU_APB2_Fz=0x00000000
[03:01:50.303]    TraceClk_Pin=0x00040002
[03:01:50.304]    TraceD0_Pin=0x00040003
[03:01:50.304]    TraceD1_Pin=0x00040004
[03:01:50.304]    TraceD2_Pin=0x00040005
[03:01:50.304]    TraceD3_Pin=0x00040006
[03:01:50.304]  </debugvars>
[03:01:50.304]  
[03:01:50.305]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:01:50.305]    <block atomic="false" info="">
[03:01:50.305]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:01:50.305]        // -> [traceSWO <= 0x00000001]
[03:01:50.305]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:01:50.305]        // -> [traceTPIU <= 0x00000000]
[03:01:50.305]    </block>
[03:01:50.306]    <control if="traceSWO" while="" timeout="0" info="">
[03:01:50.306]      // if-block "traceSWO"
[03:01:50.306]        // =>  TRUE
[03:01:50.306]      <block atomic="false" info="">
[03:01:50.306]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:01:50.306]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:01:50.306]            <block atomic="false" info="">
[03:01:50.307]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:01:50.307]                // -> [dbgmcu_val <= 0x00000000]
[03:01:50.307]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:01:50.307]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:01:50.307]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:01:50.308]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.308]                // -> [dbgmcu_val <= 0x00000007]
[03:01:50.308]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:01:50.308]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:01:50.308]              Sequence("ConfigureTraceSWOPin");
[03:01:50.308]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:01:50.308]                  <block atomic="false" info="">
[03:01:50.308]                    __var pin     = 0;
[03:01:50.309]                      // -> [pin <= 0x00000000]
[03:01:50.309]                    __var port    = 0;
[03:01:50.309]                      // -> [port <= 0x00000000]
[03:01:50.309]                    __var portAdr = 0;
[03:01:50.309]                      // -> [portAdr <= 0x00000000]
[03:01:50.309]                    __var pos     = 0;
[03:01:50.309]                      // -> [pos <= 0x00000000]
[03:01:50.309]                    __var SWO_Pin = 0x00010003;          // PB3
[03:01:50.309]                      // -> [SWO_Pin <= 0x00010003]
[03:01:50.309]                  </block>
[03:01:50.309]                  <block atomic="false" info="configure SWO">
[03:01:50.309]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:01:50.309]                      // -> [pin <= 0x00000003]
[03:01:50.309]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:01:50.309]                      // -> [port <= 0x00000001]
[03:01:50.309]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:01:50.310]                      // -> [portAdr <= 0x40020400]
[03:01:50.310]                    pos = pin * 2;
[03:01:50.310]                      // -> [pos <= 0x00000006]
[03:01:50.310]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:01:50.310]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.311]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.311]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:01:50.311]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.312]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.312]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:01:50.312]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.313]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.313]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:01:50.313]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.314]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.314]                  </block>
[03:01:50.314]                  <control if="pin <  8" while="" timeout="0" info="">
[03:01:50.314]                    // if-block "pin <  8"
[03:01:50.314]                      // =>  TRUE
[03:01:50.314]                    <block atomic="false" info="">
[03:01:50.314]                      pos = ((pin    ) & 7) * 4;
[03:01:50.314]                        // -> [pos <= 0x0000000C]
[03:01:50.314]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:01:50.315]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.315]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.315]                    </block>
[03:01:50.315]                    // end if-block "pin <  8"
[03:01:50.316]                  </control>
[03:01:50.316]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:01:50.316]                    // if-block "pin >= 8"
[03:01:50.316]                      // =>  FALSE
[03:01:50.316]                    // skip if-block "pin >= 8"
[03:01:50.316]                  </control>
[03:01:50.316]                </sequence>
[03:01:50.316]            </block>
[03:01:50.316]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:01:50.317]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:01:50.317]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.317]            </block>
[03:01:50.317]          </sequence>
[03:01:50.317]      </block>
[03:01:50.317]      // end if-block "traceSWO"
[03:01:50.317]    </control>
[03:01:50.318]    <control if="traceTPIU" while="" timeout="0" info="">
[03:01:50.318]      // if-block "traceTPIU"
[03:01:50.318]        // =>  FALSE
[03:01:50.318]      // skip if-block "traceTPIU"
[03:01:50.318]    </control>
[03:01:50.318]  </sequence>
[03:01:50.318]  
[03:01:50.535]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:01:50.535]  
[03:01:50.535]  <debugvars>
[03:01:50.536]    // Pre-defined
[03:01:50.536]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:01:50.536]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:01:50.536]    __dp=0x00000000
[03:01:50.537]    __ap=0x00000000
[03:01:50.537]    __traceout=0x00000001      (SWO Trace)
[03:01:50.537]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:01:50.537]    __FlashAddr=0x00000000
[03:01:50.537]    __FlashLen=0x00000000
[03:01:50.537]    __FlashArg=0x00000000
[03:01:50.538]    __FlashOp=0x00000000
[03:01:50.538]    __Result=0x00000000
[03:01:50.538]    
[03:01:50.538]    // User-defined
[03:01:50.538]    DbgMCU_CR=0x00000007
[03:01:50.538]    DbgMCU_APB1_Fz=0x00000000
[03:01:50.539]    DbgMCU_APB2_Fz=0x00000000
[03:01:50.539]    TraceClk_Pin=0x00040002
[03:01:50.539]    TraceD0_Pin=0x00040003
[03:01:50.539]    TraceD1_Pin=0x00040004
[03:01:50.539]    TraceD2_Pin=0x00040005
[03:01:50.540]    TraceD3_Pin=0x00040006
[03:01:50.540]  </debugvars>
[03:01:50.540]  
[03:01:50.540]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:01:50.540]    <block atomic="false" info="">
[03:01:50.541]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:01:50.541]        // -> [traceSWO <= 0x00000001]
[03:01:50.541]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:01:50.541]        // -> [traceTPIU <= 0x00000000]
[03:01:50.541]    </block>
[03:01:50.541]    <control if="traceSWO" while="" timeout="0" info="">
[03:01:50.542]      // if-block "traceSWO"
[03:01:50.542]        // =>  TRUE
[03:01:50.542]      <block atomic="false" info="">
[03:01:50.542]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:01:50.542]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:01:50.543]            <block atomic="false" info="">
[03:01:50.543]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:01:50.543]                // -> [dbgmcu_val <= 0x00000000]
[03:01:50.543]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:01:50.543]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:01:50.543]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:01:50.544]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.544]                // -> [dbgmcu_val <= 0x00000007]
[03:01:50.545]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:01:50.545]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:01:50.545]              Sequence("ConfigureTraceSWOPin");
[03:01:50.545]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:01:50.545]                  <block atomic="false" info="">
[03:01:50.546]                    __var pin     = 0;
[03:01:50.546]                      // -> [pin <= 0x00000000]
[03:01:50.546]                    __var port    = 0;
[03:01:50.546]                      // -> [port <= 0x00000000]
[03:01:50.546]                    __var portAdr = 0;
[03:01:50.546]                      // -> [portAdr <= 0x00000000]
[03:01:50.547]                    __var pos     = 0;
[03:01:50.547]                      // -> [pos <= 0x00000000]
[03:01:50.547]                    __var SWO_Pin = 0x00010003;          // PB3
[03:01:50.547]                      // -> [SWO_Pin <= 0x00010003]
[03:01:50.547]                  </block>
[03:01:50.548]                  <block atomic="false" info="configure SWO">
[03:01:50.548]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:01:50.548]                      // -> [pin <= 0x00000003]
[03:01:50.548]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:01:50.548]                      // -> [port <= 0x00000001]
[03:01:50.548]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:01:50.549]                      // -> [portAdr <= 0x40020400]
[03:01:50.549]                    pos = pin * 2;
[03:01:50.549]                      // -> [pos <= 0x00000006]
[03:01:50.549]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:01:50.550]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.550]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.550]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:01:50.551]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.551]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.552]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:01:50.552]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.553]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.553]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:01:50.553]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.554]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.554]                  </block>
[03:01:50.554]                  <control if="pin <  8" while="" timeout="0" info="">
[03:01:50.554]                    // if-block "pin <  8"
[03:01:50.554]                      // =>  TRUE
[03:01:50.554]                    <block atomic="false" info="">
[03:01:50.555]                      pos = ((pin    ) & 7) * 4;
[03:01:50.555]                        // -> [pos <= 0x0000000C]
[03:01:50.555]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:01:50.555]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.556]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.556]                    </block>
[03:01:50.556]                    // end if-block "pin <  8"
[03:01:50.556]                  </control>
[03:01:50.557]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:01:50.557]                    // if-block "pin >= 8"
[03:01:50.557]                      // =>  FALSE
[03:01:50.557]                    // skip if-block "pin >= 8"
[03:01:50.557]                  </control>
[03:01:50.557]                </sequence>
[03:01:50.557]            </block>
[03:01:50.558]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:01:50.558]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:01:50.558]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:01:50.558]            </block>
[03:01:50.559]          </sequence>
[03:01:50.559]      </block>
[03:01:50.559]      // end if-block "traceSWO"
[03:01:50.559]    </control>
[03:01:50.559]    <control if="traceTPIU" while="" timeout="0" info="">
[03:01:50.559]      // if-block "traceTPIU"
[03:01:50.559]        // =>  FALSE
[03:01:50.560]      // skip if-block "traceTPIU"
[03:01:50.560]    </control>
[03:01:50.560]  </sequence>
[03:01:50.560]  
[03:02:21.461]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:02:21.461]  
[03:02:21.461]  <debugvars>
[03:02:21.461]    // Pre-defined
[03:02:21.461]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:02:21.461]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:02:21.462]    __dp=0x00000000
[03:02:21.462]    __ap=0x00000000
[03:02:21.462]    __traceout=0x00000001      (SWO Trace)
[03:02:21.462]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:02:21.462]    __FlashAddr=0x00000000
[03:02:21.463]    __FlashLen=0x00000000
[03:02:21.463]    __FlashArg=0x00000000
[03:02:21.463]    __FlashOp=0x00000000
[03:02:21.463]    __Result=0x00000000
[03:02:21.463]    
[03:02:21.463]    // User-defined
[03:02:21.463]    DbgMCU_CR=0x00000007
[03:02:21.464]    DbgMCU_APB1_Fz=0x00000000
[03:02:21.464]    DbgMCU_APB2_Fz=0x00000000
[03:02:21.464]    TraceClk_Pin=0x00040002
[03:02:21.464]    TraceD0_Pin=0x00040003
[03:02:21.464]    TraceD1_Pin=0x00040004
[03:02:21.464]    TraceD2_Pin=0x00040005
[03:02:21.465]    TraceD3_Pin=0x00040006
[03:02:21.465]  </debugvars>
[03:02:21.465]  
[03:02:21.465]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:02:21.465]    <block atomic="false" info="">
[03:02:21.466]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:02:21.466]        // -> [traceSWO <= 0x00000001]
[03:02:21.466]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:02:21.466]        // -> [traceTPIU <= 0x00000000]
[03:02:21.466]    </block>
[03:02:21.466]    <control if="traceSWO" while="" timeout="0" info="">
[03:02:21.467]      // if-block "traceSWO"
[03:02:21.467]        // =>  TRUE
[03:02:21.467]      <block atomic="false" info="">
[03:02:21.467]        Sequence("DisableTraceSWO");
[03:02:21.467]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:02:21.467]            <block atomic="false" info="">
[03:02:21.468]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:02:21.468]                // -> [dbgmcu_val <= 0x00000000]
[03:02:21.468]            </block>
[03:02:21.468]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:02:21.468]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:02:21.469]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:02:21.469]                // -> [dbgmcu_val <= 0x00000007]
[03:02:21.469]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:02:21.469]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:02:21.470]            </block>
[03:02:21.470]          </sequence>
[03:02:21.470]      </block>
[03:02:21.470]      // end if-block "traceSWO"
[03:02:21.470]    </control>
[03:02:21.470]    <control if="traceTPIU" while="" timeout="0" info="">
[03:02:21.471]      // if-block "traceTPIU"
[03:02:21.471]        // =>  FALSE
[03:02:21.471]      // skip if-block "traceTPIU"
[03:02:21.471]    </control>
[03:02:21.471]  </sequence>
[03:02:21.471]  
[03:02:59.204]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:02:59.204]  
[03:02:59.207]  <debugvars>
[03:02:59.207]    // Pre-defined
[03:02:59.208]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:02:59.208]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:02:59.208]    __dp=0x00000000
[03:02:59.208]    __ap=0x00000000
[03:02:59.208]    __traceout=0x00000001      (SWO Trace)
[03:02:59.208]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:02:59.208]    __FlashAddr=0x00000000
[03:02:59.208]    __FlashLen=0x00000000
[03:02:59.209]    __FlashArg=0x00000000
[03:02:59.209]    __FlashOp=0x00000000
[03:02:59.209]    __Result=0x00000000
[03:02:59.209]    
[03:02:59.209]    // User-defined
[03:02:59.209]    DbgMCU_CR=0x00000007
[03:02:59.209]    DbgMCU_APB1_Fz=0x00000000
[03:02:59.209]    DbgMCU_APB2_Fz=0x00000000
[03:02:59.210]    TraceClk_Pin=0x00040002
[03:02:59.210]    TraceD0_Pin=0x00040003
[03:02:59.210]    TraceD1_Pin=0x00040004
[03:02:59.210]    TraceD2_Pin=0x00040005
[03:02:59.210]    TraceD3_Pin=0x00040006
[03:02:59.210]  </debugvars>
[03:02:59.210]  
[03:02:59.210]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:02:59.211]    <block atomic="false" info="">
[03:02:59.211]      Sequence("CheckID");
[03:02:59.211]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:02:59.211]          <block atomic="false" info="">
[03:02:59.211]            __var pidr1 = 0;
[03:02:59.211]              // -> [pidr1 <= 0x00000000]
[03:02:59.211]            __var pidr2 = 0;
[03:02:59.211]              // -> [pidr2 <= 0x00000000]
[03:02:59.212]            __var jep106id = 0;
[03:02:59.212]              // -> [jep106id <= 0x00000000]
[03:02:59.212]            __var ROMTableBase = 0;
[03:02:59.212]              // -> [ROMTableBase <= 0x00000000]
[03:02:59.212]            __ap = 0;      // AHB-AP
[03:02:59.212]              // -> [__ap <= 0x00000000]
[03:02:59.212]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:02:59.213]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:02:59.213]              // -> [ROMTableBase <= 0xE00FD000]
[03:02:59.213]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:02:59.213]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:02:59.213]              // -> [pidr1 <= 0x00000004]
[03:02:59.214]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:02:59.214]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:02:59.214]              // -> [pidr2 <= 0x0000001A]
[03:02:59.214]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:02:59.215]              // -> [jep106id <= 0x00000020]
[03:02:59.215]          </block>
[03:02:59.215]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:02:59.215]            // if-block "jep106id != 0x20"
[03:02:59.215]              // =>  FALSE
[03:02:59.215]            // skip if-block "jep106id != 0x20"
[03:02:59.215]          </control>
[03:02:59.215]        </sequence>
[03:02:59.216]    </block>
[03:02:59.216]  </sequence>
[03:02:59.216]  
[03:02:59.230]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:02:59.230]  
[03:02:59.230]  <debugvars>
[03:02:59.230]    // Pre-defined
[03:02:59.230]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:02:59.231]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:02:59.231]    __dp=0x00000000
[03:02:59.231]    __ap=0x00000000
[03:02:59.231]    __traceout=0x00000001      (SWO Trace)
[03:02:59.231]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:02:59.231]    __FlashAddr=0x00000000
[03:02:59.231]    __FlashLen=0x00000000
[03:02:59.231]    __FlashArg=0x00000000
[03:02:59.232]    __FlashOp=0x00000000
[03:02:59.232]    __Result=0x00000000
[03:02:59.232]    
[03:02:59.232]    // User-defined
[03:02:59.232]    DbgMCU_CR=0x00000007
[03:02:59.232]    DbgMCU_APB1_Fz=0x00000000
[03:02:59.232]    DbgMCU_APB2_Fz=0x00000000
[03:02:59.232]    TraceClk_Pin=0x00040002
[03:02:59.233]    TraceD0_Pin=0x00040003
[03:02:59.233]    TraceD1_Pin=0x00040004
[03:02:59.233]    TraceD2_Pin=0x00040005
[03:02:59.233]    TraceD3_Pin=0x00040006
[03:02:59.233]  </debugvars>
[03:02:59.233]  
[03:02:59.233]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:02:59.233]    <block atomic="false" info="">
[03:02:59.234]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:02:59.234]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:02:59.234]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:02:59.235]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:02:59.235]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:02:59.235]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:02:59.235]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:02:59.236]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:02:59.236]    </block>
[03:02:59.236]  </sequence>
[03:02:59.236]  
[03:03:30.005]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:03:30.005]  
[03:03:30.005]  <debugvars>
[03:03:30.005]    // Pre-defined
[03:03:30.005]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:03:30.006]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:03:30.006]    __dp=0x00000000
[03:03:30.006]    __ap=0x00000000
[03:03:30.006]    __traceout=0x00000001      (SWO Trace)
[03:03:30.006]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:03:30.006]    __FlashAddr=0x00000000
[03:03:30.007]    __FlashLen=0x00000000
[03:03:30.007]    __FlashArg=0x00000000
[03:03:30.007]    __FlashOp=0x00000000
[03:03:30.007]    __Result=0x00000000
[03:03:30.007]    
[03:03:30.007]    // User-defined
[03:03:30.007]    DbgMCU_CR=0x00000007
[03:03:30.008]    DbgMCU_APB1_Fz=0x00000000
[03:03:30.008]    DbgMCU_APB2_Fz=0x00000000
[03:03:30.008]    TraceClk_Pin=0x00040002
[03:03:30.008]    TraceD0_Pin=0x00040003
[03:03:30.008]    TraceD1_Pin=0x00040004
[03:03:30.008]    TraceD2_Pin=0x00040005
[03:03:30.009]    TraceD3_Pin=0x00040006
[03:03:30.009]  </debugvars>
[03:03:30.009]  
[03:03:30.009]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:03:30.009]    <block atomic="false" info="">
[03:03:30.009]      Sequence("CheckID");
[03:03:30.010]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:03:30.010]          <block atomic="false" info="">
[03:03:30.010]            __var pidr1 = 0;
[03:03:30.010]              // -> [pidr1 <= 0x00000000]
[03:03:30.010]            __var pidr2 = 0;
[03:03:30.010]              // -> [pidr2 <= 0x00000000]
[03:03:30.010]            __var jep106id = 0;
[03:03:30.011]              // -> [jep106id <= 0x00000000]
[03:03:30.011]            __var ROMTableBase = 0;
[03:03:30.011]              // -> [ROMTableBase <= 0x00000000]
[03:03:30.011]            __ap = 0;      // AHB-AP
[03:03:30.011]              // -> [__ap <= 0x00000000]
[03:03:30.011]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:03:30.012]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.012]              // -> [ROMTableBase <= 0xE00FD000]
[03:03:30.012]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:03:30.013]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.013]              // -> [pidr1 <= 0x00000004]
[03:03:30.013]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:03:30.013]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.014]              // -> [pidr2 <= 0x0000001A]
[03:03:30.014]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:03:30.014]              // -> [jep106id <= 0x00000020]
[03:03:30.014]          </block>
[03:03:30.014]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:03:30.014]            // if-block "jep106id != 0x20"
[03:03:30.014]              // =>  FALSE
[03:03:30.015]            // skip if-block "jep106id != 0x20"
[03:03:30.015]          </control>
[03:03:30.015]        </sequence>
[03:03:30.015]    </block>
[03:03:30.015]  </sequence>
[03:03:30.015]  
[03:03:30.030]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:03:30.030]  
[03:03:30.030]  <debugvars>
[03:03:30.031]    // Pre-defined
[03:03:30.031]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:03:30.031]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:03:30.031]    __dp=0x00000000
[03:03:30.031]    __ap=0x00000000
[03:03:30.031]    __traceout=0x00000001      (SWO Trace)
[03:03:30.032]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:03:30.032]    __FlashAddr=0x00000000
[03:03:30.032]    __FlashLen=0x00000000
[03:03:30.032]    __FlashArg=0x00000000
[03:03:30.032]    __FlashOp=0x00000000
[03:03:30.032]    __Result=0x00000000
[03:03:30.032]    
[03:03:30.032]    // User-defined
[03:03:30.033]    DbgMCU_CR=0x00000007
[03:03:30.033]    DbgMCU_APB1_Fz=0x00000000
[03:03:30.033]    DbgMCU_APB2_Fz=0x00000000
[03:03:30.033]    TraceClk_Pin=0x00040002
[03:03:30.033]    TraceD0_Pin=0x00040003
[03:03:30.034]    TraceD1_Pin=0x00040004
[03:03:30.034]    TraceD2_Pin=0x00040005
[03:03:30.034]    TraceD3_Pin=0x00040006
[03:03:30.034]  </debugvars>
[03:03:30.034]  
[03:03:30.034]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:03:30.034]    <block atomic="false" info="">
[03:03:30.035]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:03:30.035]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.035]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:03:30.036]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.036]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:03:30.036]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.037]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:03:30.037]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.037]    </block>
[03:03:30.037]  </sequence>
[03:03:30.037]  
[03:03:30.053]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:03:30.053]  
[03:03:30.053]  <debugvars>
[03:03:30.053]    // Pre-defined
[03:03:30.054]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:03:30.054]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:03:30.054]    __dp=0x00000000
[03:03:30.054]    __ap=0x00000000
[03:03:30.055]    __traceout=0x00000001      (SWO Trace)
[03:03:30.055]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:03:30.055]    __FlashAddr=0x00000000
[03:03:30.055]    __FlashLen=0x00000000
[03:03:30.055]    __FlashArg=0x00000000
[03:03:30.055]    __FlashOp=0x00000000
[03:03:30.056]    __Result=0x00000000
[03:03:30.056]    
[03:03:30.056]    // User-defined
[03:03:30.056]    DbgMCU_CR=0x00000007
[03:03:30.056]    DbgMCU_APB1_Fz=0x00000000
[03:03:30.056]    DbgMCU_APB2_Fz=0x00000000
[03:03:30.057]    TraceClk_Pin=0x00040002
[03:03:30.057]    TraceD0_Pin=0x00040003
[03:03:30.057]    TraceD1_Pin=0x00040004
[03:03:30.057]    TraceD2_Pin=0x00040005
[03:03:30.057]    TraceD3_Pin=0x00040006
[03:03:30.057]  </debugvars>
[03:03:30.057]  
[03:03:30.058]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:03:30.058]    <block atomic="false" info="">
[03:03:30.058]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:03:30.058]        // -> [traceSWO <= 0x00000001]
[03:03:30.058]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:03:30.058]        // -> [traceTPIU <= 0x00000000]
[03:03:30.058]    </block>
[03:03:30.059]    <control if="traceSWO" while="" timeout="0" info="">
[03:03:30.059]      // if-block "traceSWO"
[03:03:30.059]        // =>  TRUE
[03:03:30.059]      <block atomic="false" info="">
[03:03:30.059]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:03:30.059]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:03:30.059]            <block atomic="false" info="">
[03:03:30.059]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:03:30.059]                // -> [dbgmcu_val <= 0x00000000]
[03:03:30.060]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:03:30.060]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:03:30.060]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:03:30.060]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.060]                // -> [dbgmcu_val <= 0x00000007]
[03:03:30.060]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:03:30.061]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:03:30.061]              Sequence("ConfigureTraceSWOPin");
[03:03:30.061]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:03:30.061]                  <block atomic="false" info="">
[03:03:30.061]                    __var pin     = 0;
[03:03:30.061]                      // -> [pin <= 0x00000000]
[03:03:30.061]                    __var port    = 0;
[03:03:30.061]                      // -> [port <= 0x00000000]
[03:03:30.061]                    __var portAdr = 0;
[03:03:30.062]                      // -> [portAdr <= 0x00000000]
[03:03:30.062]                    __var pos     = 0;
[03:03:30.062]                      // -> [pos <= 0x00000000]
[03:03:30.062]                    __var SWO_Pin = 0x00010003;          // PB3
[03:03:30.062]                      // -> [SWO_Pin <= 0x00010003]
[03:03:30.062]                  </block>
[03:03:30.062]                  <block atomic="false" info="configure SWO">
[03:03:30.062]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:03:30.062]                      // -> [pin <= 0x00000003]
[03:03:30.062]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:03:30.063]                      // -> [port <= 0x00000001]
[03:03:30.063]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:03:30.063]                      // -> [portAdr <= 0x40020400]
[03:03:30.063]                    pos = pin * 2;
[03:03:30.063]                      // -> [pos <= 0x00000006]
[03:03:30.063]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:03:30.064]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.064]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.064]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:03:30.065]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.065]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.065]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:03:30.066]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.066]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.066]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:03:30.067]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.067]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.067]                  </block>
[03:03:30.067]                  <control if="pin <  8" while="" timeout="0" info="">
[03:03:30.067]                    // if-block "pin <  8"
[03:03:30.068]                      // =>  TRUE
[03:03:30.068]                    <block atomic="false" info="">
[03:03:30.068]                      pos = ((pin    ) & 7) * 4;
[03:03:30.068]                        // -> [pos <= 0x0000000C]
[03:03:30.068]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:03:30.068]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.069]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.069]                    </block>
[03:03:30.069]                    // end if-block "pin <  8"
[03:03:30.069]                  </control>
[03:03:30.069]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:03:30.069]                    // if-block "pin >= 8"
[03:03:30.070]                      // =>  FALSE
[03:03:30.070]                    // skip if-block "pin >= 8"
[03:03:30.070]                  </control>
[03:03:30.070]                </sequence>
[03:03:30.070]            </block>
[03:03:30.070]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:03:30.070]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:03:30.071]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.071]            </block>
[03:03:30.071]          </sequence>
[03:03:30.071]      </block>
[03:03:30.071]      // end if-block "traceSWO"
[03:03:30.071]    </control>
[03:03:30.071]    <control if="traceTPIU" while="" timeout="0" info="">
[03:03:30.071]      // if-block "traceTPIU"
[03:03:30.071]        // =>  FALSE
[03:03:30.072]      // skip if-block "traceTPIU"
[03:03:30.072]    </control>
[03:03:30.072]  </sequence>
[03:03:30.072]  
[03:03:30.075]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:03:30.075]  
[03:03:30.075]  <debugvars>
[03:03:30.076]    // Pre-defined
[03:03:30.076]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:03:30.076]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:03:30.076]    __dp=0x00000000
[03:03:30.076]    __ap=0x00000000
[03:03:30.077]    __traceout=0x00000001      (SWO Trace)
[03:03:30.077]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:03:30.077]    __FlashAddr=0x00000000
[03:03:30.077]    __FlashLen=0x00000000
[03:03:30.077]    __FlashArg=0x00000000
[03:03:30.078]    __FlashOp=0x00000000
[03:03:30.078]    __Result=0x00000000
[03:03:30.078]    
[03:03:30.078]    // User-defined
[03:03:30.078]    DbgMCU_CR=0x00000007
[03:03:30.078]    DbgMCU_APB1_Fz=0x00000000
[03:03:30.078]    DbgMCU_APB2_Fz=0x00000000
[03:03:30.079]    TraceClk_Pin=0x00040002
[03:03:30.079]    TraceD0_Pin=0x00040003
[03:03:30.079]    TraceD1_Pin=0x00040004
[03:03:30.079]    TraceD2_Pin=0x00040005
[03:03:30.079]    TraceD3_Pin=0x00040006
[03:03:30.079]  </debugvars>
[03:03:30.079]  
[03:03:30.080]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:03:30.080]    <block atomic="false" info="">
[03:03:30.080]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:03:30.080]        // -> [traceSWO <= 0x00000001]
[03:03:30.080]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:03:30.080]        // -> [traceTPIU <= 0x00000000]
[03:03:30.080]    </block>
[03:03:30.080]    <control if="traceSWO" while="" timeout="0" info="">
[03:03:30.081]      // if-block "traceSWO"
[03:03:30.081]        // =>  TRUE
[03:03:30.081]      <block atomic="false" info="">
[03:03:30.081]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:03:30.081]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:03:30.081]            <block atomic="false" info="">
[03:03:30.081]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:03:30.081]                // -> [dbgmcu_val <= 0x00000000]
[03:03:30.082]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:03:30.082]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:03:30.082]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:03:30.082]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.082]                // -> [dbgmcu_val <= 0x00000007]
[03:03:30.082]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:03:30.083]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:03:30.083]              Sequence("ConfigureTraceSWOPin");
[03:03:30.083]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:03:30.083]                  <block atomic="false" info="">
[03:03:30.083]                    __var pin     = 0;
[03:03:30.083]                      // -> [pin <= 0x00000000]
[03:03:30.083]                    __var port    = 0;
[03:03:30.084]                      // -> [port <= 0x00000000]
[03:03:30.084]                    __var portAdr = 0;
[03:03:30.084]                      // -> [portAdr <= 0x00000000]
[03:03:30.084]                    __var pos     = 0;
[03:03:30.084]                      // -> [pos <= 0x00000000]
[03:03:30.084]                    __var SWO_Pin = 0x00010003;          // PB3
[03:03:30.084]                      // -> [SWO_Pin <= 0x00010003]
[03:03:30.084]                  </block>
[03:03:30.085]                  <block atomic="false" info="configure SWO">
[03:03:30.085]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:03:30.085]                      // -> [pin <= 0x00000003]
[03:03:30.085]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:03:30.085]                      // -> [port <= 0x00000001]
[03:03:30.085]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:03:30.085]                      // -> [portAdr <= 0x40020400]
[03:03:30.085]                    pos = pin * 2;
[03:03:30.085]                      // -> [pos <= 0x00000006]
[03:03:30.086]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:03:30.086]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.086]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.086]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:03:30.087]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.087]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.087]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:03:30.088]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.088]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.088]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:03:30.089]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.089]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.089]                  </block>
[03:03:30.089]                  <control if="pin <  8" while="" timeout="0" info="">
[03:03:30.089]                    // if-block "pin <  8"
[03:03:30.090]                      // =>  TRUE
[03:03:30.090]                    <block atomic="false" info="">
[03:03:30.090]                      pos = ((pin    ) & 7) * 4;
[03:03:30.090]                        // -> [pos <= 0x0000000C]
[03:03:30.090]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:03:30.090]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.091]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.091]                    </block>
[03:03:30.091]                    // end if-block "pin <  8"
[03:03:30.091]                  </control>
[03:03:30.091]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:03:30.091]                    // if-block "pin >= 8"
[03:03:30.091]                      // =>  FALSE
[03:03:30.092]                    // skip if-block "pin >= 8"
[03:03:30.092]                  </control>
[03:03:30.092]                </sequence>
[03:03:30.092]            </block>
[03:03:30.092]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:03:30.092]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:03:30.092]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.093]            </block>
[03:03:30.093]          </sequence>
[03:03:30.093]      </block>
[03:03:30.093]      // end if-block "traceSWO"
[03:03:30.093]    </control>
[03:03:30.093]    <control if="traceTPIU" while="" timeout="0" info="">
[03:03:30.093]      // if-block "traceTPIU"
[03:03:30.093]        // =>  FALSE
[03:03:30.093]      // skip if-block "traceTPIU"
[03:03:30.094]    </control>
[03:03:30.094]  </sequence>
[03:03:30.094]  
[03:03:30.318]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:03:30.318]  
[03:03:30.319]  <debugvars>
[03:03:30.319]    // Pre-defined
[03:03:30.319]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:03:30.319]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:03:30.319]    __dp=0x00000000
[03:03:30.319]    __ap=0x00000000
[03:03:30.320]    __traceout=0x00000001      (SWO Trace)
[03:03:30.320]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:03:30.320]    __FlashAddr=0x00000000
[03:03:30.320]    __FlashLen=0x00000000
[03:03:30.320]    __FlashArg=0x00000000
[03:03:30.320]    __FlashOp=0x00000000
[03:03:30.320]    __Result=0x00000000
[03:03:30.321]    
[03:03:30.321]    // User-defined
[03:03:30.321]    DbgMCU_CR=0x00000007
[03:03:30.321]    DbgMCU_APB1_Fz=0x00000000
[03:03:30.321]    DbgMCU_APB2_Fz=0x00000000
[03:03:30.321]    TraceClk_Pin=0x00040002
[03:03:30.321]    TraceD0_Pin=0x00040003
[03:03:30.321]    TraceD1_Pin=0x00040004
[03:03:30.322]    TraceD2_Pin=0x00040005
[03:03:30.322]    TraceD3_Pin=0x00040006
[03:03:30.322]  </debugvars>
[03:03:30.322]  
[03:03:30.322]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:03:30.322]    <block atomic="false" info="">
[03:03:30.322]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:03:30.323]        // -> [traceSWO <= 0x00000001]
[03:03:30.323]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:03:30.323]        // -> [traceTPIU <= 0x00000000]
[03:03:30.323]    </block>
[03:03:30.323]    <control if="traceSWO" while="" timeout="0" info="">
[03:03:30.323]      // if-block "traceSWO"
[03:03:30.323]        // =>  TRUE
[03:03:30.324]      <block atomic="false" info="">
[03:03:30.324]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:03:30.324]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:03:30.324]            <block atomic="false" info="">
[03:03:30.324]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:03:30.324]                // -> [dbgmcu_val <= 0x00000000]
[03:03:30.324]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:03:30.325]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:03:30.325]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:03:30.325]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.325]                // -> [dbgmcu_val <= 0x00000007]
[03:03:30.325]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:03:30.326]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:03:30.326]              Sequence("ConfigureTraceSWOPin");
[03:03:30.326]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:03:30.326]                  <block atomic="false" info="">
[03:03:30.326]                    __var pin     = 0;
[03:03:30.326]                      // -> [pin <= 0x00000000]
[03:03:30.326]                    __var port    = 0;
[03:03:30.326]                      // -> [port <= 0x00000000]
[03:03:30.327]                    __var portAdr = 0;
[03:03:30.327]                      // -> [portAdr <= 0x00000000]
[03:03:30.327]                    __var pos     = 0;
[03:03:30.327]                      // -> [pos <= 0x00000000]
[03:03:30.327]                    __var SWO_Pin = 0x00010003;          // PB3
[03:03:30.327]                      // -> [SWO_Pin <= 0x00010003]
[03:03:30.327]                  </block>
[03:03:30.327]                  <block atomic="false" info="configure SWO">
[03:03:30.327]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:03:30.328]                      // -> [pin <= 0x00000003]
[03:03:30.328]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:03:30.328]                      // -> [port <= 0x00000001]
[03:03:30.328]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:03:30.328]                      // -> [portAdr <= 0x40020400]
[03:03:30.328]                    pos = pin * 2;
[03:03:30.328]                      // -> [pos <= 0x00000006]
[03:03:30.328]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:03:30.329]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.329]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.329]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:03:30.330]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.330]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.330]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:03:30.331]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.331]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.331]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:03:30.331]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.332]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.332]                  </block>
[03:03:30.332]                  <control if="pin <  8" while="" timeout="0" info="">
[03:03:30.332]                    // if-block "pin <  8"
[03:03:30.332]                      // =>  TRUE
[03:03:30.333]                    <block atomic="false" info="">
[03:03:30.333]                      pos = ((pin    ) & 7) * 4;
[03:03:30.333]                        // -> [pos <= 0x0000000C]
[03:03:30.333]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:03:30.333]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.334]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.334]                    </block>
[03:03:30.334]                    // end if-block "pin <  8"
[03:03:30.334]                  </control>
[03:03:30.334]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:03:30.334]                    // if-block "pin >= 8"
[03:03:30.334]                      // =>  FALSE
[03:03:30.335]                    // skip if-block "pin >= 8"
[03:03:30.335]                  </control>
[03:03:30.335]                </sequence>
[03:03:30.335]            </block>
[03:03:30.335]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:03:30.335]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:03:30.336]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:03:30.336]            </block>
[03:03:30.336]          </sequence>
[03:03:30.336]      </block>
[03:03:30.336]      // end if-block "traceSWO"
[03:03:30.336]    </control>
[03:03:30.336]    <control if="traceTPIU" while="" timeout="0" info="">
[03:03:30.336]      // if-block "traceTPIU"
[03:03:30.336]        // =>  FALSE
[03:03:30.337]      // skip if-block "traceTPIU"
[03:03:30.337]    </control>
[03:03:30.337]  </sequence>
[03:03:30.337]  
[03:04:13.549]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:04:13.549]  
[03:04:13.550]  <debugvars>
[03:04:13.550]    // Pre-defined
[03:04:13.550]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:13.550]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:04:13.551]    __dp=0x00000000
[03:04:13.551]    __ap=0x00000000
[03:04:13.551]    __traceout=0x00000001      (SWO Trace)
[03:04:13.551]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:13.552]    __FlashAddr=0x00000000
[03:04:13.552]    __FlashLen=0x00000000
[03:04:13.552]    __FlashArg=0x00000000
[03:04:13.552]    __FlashOp=0x00000000
[03:04:13.552]    __Result=0x00000000
[03:04:13.553]    
[03:04:13.553]    // User-defined
[03:04:13.553]    DbgMCU_CR=0x00000007
[03:04:13.553]    DbgMCU_APB1_Fz=0x00000000
[03:04:13.553]    DbgMCU_APB2_Fz=0x00000000
[03:04:13.553]    TraceClk_Pin=0x00040002
[03:04:13.553]    TraceD0_Pin=0x00040003
[03:04:13.554]    TraceD1_Pin=0x00040004
[03:04:13.554]    TraceD2_Pin=0x00040005
[03:04:13.554]    TraceD3_Pin=0x00040006
[03:04:13.554]  </debugvars>
[03:04:13.554]  
[03:04:13.554]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:04:13.555]    <block atomic="false" info="">
[03:04:13.555]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:04:13.555]        // -> [traceSWO <= 0x00000001]
[03:04:13.555]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:04:13.555]        // -> [traceTPIU <= 0x00000000]
[03:04:13.555]    </block>
[03:04:13.556]    <control if="traceSWO" while="" timeout="0" info="">
[03:04:13.556]      // if-block "traceSWO"
[03:04:13.556]        // =>  TRUE
[03:04:13.556]      <block atomic="false" info="">
[03:04:13.556]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:04:13.556]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:04:13.557]            <block atomic="false" info="">
[03:04:13.557]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:04:13.557]                // -> [dbgmcu_val <= 0x00000000]
[03:04:13.557]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:04:13.557]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:04:13.557]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:04:13.558]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:04:13.558]                // -> [dbgmcu_val <= 0x00000007]
[03:04:13.558]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:04:13.558]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:04:13.559]              Sequence("ConfigureTraceSWOPin");
[03:04:13.559]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:04:13.559]                  <block atomic="false" info="">
[03:04:13.559]                    __var pin     = 0;
[03:04:13.559]                      // -> [pin <= 0x00000000]
[03:04:13.559]                    __var port    = 0;
[03:04:13.560]                      // -> [port <= 0x00000000]
[03:04:13.560]                    __var portAdr = 0;
[03:04:13.560]                      // -> [portAdr <= 0x00000000]
[03:04:13.560]                    __var pos     = 0;
[03:04:13.560]                      // -> [pos <= 0x00000000]
[03:04:13.560]                    __var SWO_Pin = 0x00010003;          // PB3
[03:04:13.561]                      // -> [SWO_Pin <= 0x00010003]
[03:04:13.561]                  </block>
[03:04:13.561]                  <block atomic="false" info="configure SWO">
[03:04:13.561]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:04:13.561]                      // -> [pin <= 0x00000003]
[03:04:13.561]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:04:13.561]                      // -> [port <= 0x00000001]
[03:04:13.562]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:04:13.562]                      // -> [portAdr <= 0x40020400]
[03:04:13.562]                    pos = pin * 2;
[03:04:13.562]                      // -> [pos <= 0x00000006]
[03:04:13.562]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:04:13.563]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:04:13.563]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:04:13.563]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:04:13.564]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:04:13.564]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:04:13.564]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:04:13.565]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:04:13.565]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:04:13.565]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:04:13.566]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:04:13.566]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:04:13.566]                  </block>
[03:04:13.566]                  <control if="pin <  8" while="" timeout="0" info="">
[03:04:13.567]                    // if-block "pin <  8"
[03:04:13.567]                      // =>  TRUE
[03:04:13.567]                    <block atomic="false" info="">
[03:04:13.567]                      pos = ((pin    ) & 7) * 4;
[03:04:13.567]                        // -> [pos <= 0x0000000C]
[03:04:13.567]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:04:13.568]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:04:13.568]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:04:13.569]                    </block>
[03:04:13.569]                    // end if-block "pin <  8"
[03:04:13.569]                  </control>
[03:04:13.569]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:04:13.569]                    // if-block "pin >= 8"
[03:04:13.569]                      // =>  FALSE
[03:04:13.570]                    // skip if-block "pin >= 8"
[03:04:13.570]                  </control>
[03:04:13.570]                </sequence>
[03:04:13.570]            </block>
[03:04:13.570]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:04:13.570]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:04:13.571]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:04:13.571]            </block>
[03:04:13.571]          </sequence>
[03:04:13.571]      </block>
[03:04:13.572]      // end if-block "traceSWO"
[03:04:13.572]    </control>
[03:04:13.572]    <control if="traceTPIU" while="" timeout="0" info="">
[03:04:13.572]      // if-block "traceTPIU"
[03:04:13.572]        // =>  FALSE
[03:04:13.572]      // skip if-block "traceTPIU"
[03:04:13.573]    </control>
[03:04:13.573]  </sequence>
[03:04:13.573]  
[03:04:18.110]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:04:18.110]  
[03:04:18.110]  <debugvars>
[03:04:18.110]    // Pre-defined
[03:04:18.111]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:18.111]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:04:18.111]    __dp=0x00000000
[03:04:18.111]    __ap=0x00000000
[03:04:18.111]    __traceout=0x00000001      (SWO Trace)
[03:04:18.112]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:18.112]    __FlashAddr=0x00000000
[03:04:18.112]    __FlashLen=0x00000000
[03:04:18.112]    __FlashArg=0x00000000
[03:04:18.112]    __FlashOp=0x00000000
[03:04:18.113]    __Result=0x00000000
[03:04:18.113]    
[03:04:18.113]    // User-defined
[03:04:18.113]    DbgMCU_CR=0x00000007
[03:04:18.113]    DbgMCU_APB1_Fz=0x00000000
[03:04:18.113]    DbgMCU_APB2_Fz=0x00000000
[03:04:18.113]    TraceClk_Pin=0x00040002
[03:04:18.114]    TraceD0_Pin=0x00040003
[03:04:18.114]    TraceD1_Pin=0x00040004
[03:04:18.114]    TraceD2_Pin=0x00040005
[03:04:18.114]    TraceD3_Pin=0x00040006
[03:04:18.114]  </debugvars>
[03:04:18.115]  
[03:04:18.115]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:04:18.115]    <block atomic="false" info="">
[03:04:18.115]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:04:18.115]        // -> [traceSWO <= 0x00000001]
[03:04:18.115]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:04:18.116]        // -> [traceTPIU <= 0x00000000]
[03:04:18.116]    </block>
[03:04:18.116]    <control if="traceSWO" while="" timeout="0" info="">
[03:04:18.116]      // if-block "traceSWO"
[03:04:18.116]        // =>  TRUE
[03:04:18.116]      <block atomic="false" info="">
[03:04:18.117]        Sequence("DisableTraceSWO");
[03:04:18.117]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:04:18.117]            <block atomic="false" info="">
[03:04:18.117]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:04:18.117]                // -> [dbgmcu_val <= 0x00000000]
[03:04:18.118]            </block>
[03:04:18.118]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:04:18.118]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:04:18.119]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:04:18.119]                // -> [dbgmcu_val <= 0x00000007]
[03:04:18.119]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:04:18.119]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:04:18.120]            </block>
[03:04:18.120]          </sequence>
[03:04:18.120]      </block>
[03:04:18.120]      // end if-block "traceSWO"
[03:04:18.120]    </control>
[03:04:18.120]    <control if="traceTPIU" while="" timeout="0" info="">
[03:04:18.121]      // if-block "traceTPIU"
[03:04:18.121]        // =>  FALSE
[03:04:18.121]      // skip if-block "traceTPIU"
[03:04:18.121]    </control>
[03:04:18.121]  </sequence>
[03:04:18.121]  
[03:04:51.214]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:04:51.214]  
[03:04:51.214]  <debugvars>
[03:04:51.215]    // Pre-defined
[03:04:51.215]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:51.215]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:04:51.215]    __dp=0x00000000
[03:04:51.215]    __ap=0x00000000
[03:04:51.216]    __traceout=0x00000001      (SWO Trace)
[03:04:51.216]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:51.216]    __FlashAddr=0x00000000
[03:04:51.216]    __FlashLen=0x00000000
[03:04:51.216]    __FlashArg=0x00000000
[03:04:51.216]    __FlashOp=0x00000000
[03:04:51.217]    __Result=0x00000000
[03:04:51.217]    
[03:04:51.217]    // User-defined
[03:04:51.217]    DbgMCU_CR=0x00000007
[03:04:51.217]    DbgMCU_APB1_Fz=0x00000000
[03:04:51.217]    DbgMCU_APB2_Fz=0x00000000
[03:04:51.218]    TraceClk_Pin=0x00040002
[03:04:51.218]    TraceD0_Pin=0x00040003
[03:04:51.218]    TraceD1_Pin=0x00040004
[03:04:51.218]    TraceD2_Pin=0x00040005
[03:04:51.218]    TraceD3_Pin=0x00040006
[03:04:51.219]  </debugvars>
[03:04:51.219]  
[03:04:51.219]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:04:51.219]    <block atomic="false" info="">
[03:04:51.219]      Sequence("CheckID");
[03:04:51.219]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:04:51.220]          <block atomic="false" info="">
[03:04:51.220]            __var pidr1 = 0;
[03:04:51.220]              // -> [pidr1 <= 0x00000000]
[03:04:51.220]            __var pidr2 = 0;
[03:04:51.220]              // -> [pidr2 <= 0x00000000]
[03:04:51.221]            __var jep106id = 0;
[03:04:51.221]              // -> [jep106id <= 0x00000000]
[03:04:51.221]            __var ROMTableBase = 0;
[03:04:51.221]              // -> [ROMTableBase <= 0x00000000]
[03:04:51.221]            __ap = 0;      // AHB-AP
[03:04:51.221]              // -> [__ap <= 0x00000000]
[03:04:51.222]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:04:51.222]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:04:51.222]              // -> [ROMTableBase <= 0xE00FD000]
[03:04:51.222]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:04:51.223]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:04:51.223]              // -> [pidr1 <= 0x00000004]
[03:04:51.223]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:04:51.223]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:04:51.224]              // -> [pidr2 <= 0x0000001A]
[03:04:51.224]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:04:51.224]              // -> [jep106id <= 0x00000020]
[03:04:51.224]          </block>
[03:04:51.224]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:04:51.224]            // if-block "jep106id != 0x20"
[03:04:51.224]              // =>  FALSE
[03:04:51.225]            // skip if-block "jep106id != 0x20"
[03:04:51.225]          </control>
[03:04:51.225]        </sequence>
[03:04:51.225]    </block>
[03:04:51.225]  </sequence>
[03:04:51.225]  
[03:04:51.240]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:04:51.240]  
[03:04:51.240]  <debugvars>
[03:04:51.240]    // Pre-defined
[03:04:51.241]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:51.241]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:04:51.241]    __dp=0x00000000
[03:04:51.241]    __ap=0x00000000
[03:04:51.241]    __traceout=0x00000001      (SWO Trace)
[03:04:51.242]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:51.242]    __FlashAddr=0x00000000
[03:04:51.242]    __FlashLen=0x00000000
[03:04:51.242]    __FlashArg=0x00000000
[03:04:51.242]    __FlashOp=0x00000000
[03:04:51.242]    __Result=0x00000000
[03:04:51.243]    
[03:04:51.243]    // User-defined
[03:04:51.243]    DbgMCU_CR=0x00000007
[03:04:51.243]    DbgMCU_APB1_Fz=0x00000000
[03:04:51.243]    DbgMCU_APB2_Fz=0x00000000
[03:04:51.243]    TraceClk_Pin=0x00040002
[03:04:51.244]    TraceD0_Pin=0x00040003
[03:04:51.244]    TraceD1_Pin=0x00040004
[03:04:51.244]    TraceD2_Pin=0x00040005
[03:04:51.244]    TraceD3_Pin=0x00040006
[03:04:51.244]  </debugvars>
[03:04:51.245]  
[03:04:51.245]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:04:51.245]    <block atomic="false" info="">
[03:04:51.245]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:04:51.246]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:04:51.246]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:04:51.247]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:04:51.247]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:04:51.247]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:04:51.247]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:04:51.248]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:04:51.248]    </block>
[03:04:51.248]  </sequence>
[03:04:51.249]  
[03:05:22.180]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:05:22.180]  
[03:05:22.181]  <debugvars>
[03:05:22.181]    // Pre-defined
[03:05:22.181]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:22.181]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:05:22.182]    __dp=0x00000000
[03:05:22.182]    __ap=0x00000000
[03:05:22.182]    __traceout=0x00000001      (SWO Trace)
[03:05:22.182]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:22.182]    __FlashAddr=0x00000000
[03:05:22.182]    __FlashLen=0x00000000
[03:05:22.183]    __FlashArg=0x00000000
[03:05:22.183]    __FlashOp=0x00000000
[03:05:22.183]    __Result=0x00000000
[03:05:22.183]    
[03:05:22.183]    // User-defined
[03:05:22.183]    DbgMCU_CR=0x00000007
[03:05:22.183]    DbgMCU_APB1_Fz=0x00000000
[03:05:22.184]    DbgMCU_APB2_Fz=0x00000000
[03:05:22.184]    TraceClk_Pin=0x00040002
[03:05:22.184]    TraceD0_Pin=0x00040003
[03:05:22.184]    TraceD1_Pin=0x00040004
[03:05:22.184]    TraceD2_Pin=0x00040005
[03:05:22.184]    TraceD3_Pin=0x00040006
[03:05:22.185]  </debugvars>
[03:05:22.185]  
[03:05:22.185]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:05:22.185]    <block atomic="false" info="">
[03:05:22.185]      Sequence("CheckID");
[03:05:22.185]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:05:22.186]          <block atomic="false" info="">
[03:05:22.186]            __var pidr1 = 0;
[03:05:22.186]              // -> [pidr1 <= 0x00000000]
[03:05:22.186]            __var pidr2 = 0;
[03:05:22.186]              // -> [pidr2 <= 0x00000000]
[03:05:22.186]            __var jep106id = 0;
[03:05:22.187]              // -> [jep106id <= 0x00000000]
[03:05:22.187]            __var ROMTableBase = 0;
[03:05:22.187]              // -> [ROMTableBase <= 0x00000000]
[03:05:22.187]            __ap = 0;      // AHB-AP
[03:05:22.187]              // -> [__ap <= 0x00000000]
[03:05:22.187]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:05:22.188]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.188]              // -> [ROMTableBase <= 0xE00FD000]
[03:05:22.188]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:05:22.189]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.189]              // -> [pidr1 <= 0x00000004]
[03:05:22.189]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:05:22.189]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.189]              // -> [pidr2 <= 0x0000001A]
[03:05:22.190]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:05:22.190]              // -> [jep106id <= 0x00000020]
[03:05:22.190]          </block>
[03:05:22.190]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:05:22.190]            // if-block "jep106id != 0x20"
[03:05:22.190]              // =>  FALSE
[03:05:22.190]            // skip if-block "jep106id != 0x20"
[03:05:22.191]          </control>
[03:05:22.191]        </sequence>
[03:05:22.191]    </block>
[03:05:22.191]  </sequence>
[03:05:22.191]  
[03:05:22.206]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:05:22.206]  
[03:05:22.207]  <debugvars>
[03:05:22.207]    // Pre-defined
[03:05:22.207]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:22.207]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:05:22.207]    __dp=0x00000000
[03:05:22.207]    __ap=0x00000000
[03:05:22.208]    __traceout=0x00000001      (SWO Trace)
[03:05:22.208]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:22.208]    __FlashAddr=0x00000000
[03:05:22.208]    __FlashLen=0x00000000
[03:05:22.208]    __FlashArg=0x00000000
[03:05:22.209]    __FlashOp=0x00000000
[03:05:22.209]    __Result=0x00000000
[03:05:22.209]    
[03:05:22.209]    // User-defined
[03:05:22.209]    DbgMCU_CR=0x00000007
[03:05:22.209]    DbgMCU_APB1_Fz=0x00000000
[03:05:22.209]    DbgMCU_APB2_Fz=0x00000000
[03:05:22.210]    TraceClk_Pin=0x00040002
[03:05:22.210]    TraceD0_Pin=0x00040003
[03:05:22.210]    TraceD1_Pin=0x00040004
[03:05:22.210]    TraceD2_Pin=0x00040005
[03:05:22.210]    TraceD3_Pin=0x00040006
[03:05:22.211]  </debugvars>
[03:05:22.211]  
[03:05:22.211]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:05:22.211]    <block atomic="false" info="">
[03:05:22.211]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:05:22.212]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.212]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:05:22.213]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.213]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:05:22.214]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.214]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:05:22.214]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.215]    </block>
[03:05:22.215]  </sequence>
[03:05:22.215]  
[03:05:22.231]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:05:22.231]  
[03:05:22.231]  <debugvars>
[03:05:22.231]    // Pre-defined
[03:05:22.231]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:22.232]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:05:22.232]    __dp=0x00000000
[03:05:22.232]    __ap=0x00000000
[03:05:22.232]    __traceout=0x00000001      (SWO Trace)
[03:05:22.232]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:22.232]    __FlashAddr=0x00000000
[03:05:22.233]    __FlashLen=0x00000000
[03:05:22.233]    __FlashArg=0x00000000
[03:05:22.233]    __FlashOp=0x00000000
[03:05:22.233]    __Result=0x00000000
[03:05:22.233]    
[03:05:22.233]    // User-defined
[03:05:22.233]    DbgMCU_CR=0x00000007
[03:05:22.234]    DbgMCU_APB1_Fz=0x00000000
[03:05:22.234]    DbgMCU_APB2_Fz=0x00000000
[03:05:22.234]    TraceClk_Pin=0x00040002
[03:05:22.234]    TraceD0_Pin=0x00040003
[03:05:22.234]    TraceD1_Pin=0x00040004
[03:05:22.235]    TraceD2_Pin=0x00040005
[03:05:22.235]    TraceD3_Pin=0x00040006
[03:05:22.235]  </debugvars>
[03:05:22.235]  
[03:05:22.235]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:05:22.235]    <block atomic="false" info="">
[03:05:22.235]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:05:22.236]        // -> [traceSWO <= 0x00000001]
[03:05:22.236]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:05:22.236]        // -> [traceTPIU <= 0x00000000]
[03:05:22.236]    </block>
[03:05:22.236]    <control if="traceSWO" while="" timeout="0" info="">
[03:05:22.236]      // if-block "traceSWO"
[03:05:22.237]        // =>  TRUE
[03:05:22.237]      <block atomic="false" info="">
[03:05:22.237]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:05:22.237]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:05:22.237]            <block atomic="false" info="">
[03:05:22.237]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:05:22.238]                // -> [dbgmcu_val <= 0x00000000]
[03:05:22.238]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:05:22.238]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:05:22.238]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:05:22.239]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.239]                // -> [dbgmcu_val <= 0x00000007]
[03:05:22.239]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:05:22.239]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:05:22.239]              Sequence("ConfigureTraceSWOPin");
[03:05:22.239]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:05:22.239]                  <block atomic="false" info="">
[03:05:22.240]                    __var pin     = 0;
[03:05:22.240]                      // -> [pin <= 0x00000000]
[03:05:22.240]                    __var port    = 0;
[03:05:22.240]                      // -> [port <= 0x00000000]
[03:05:22.240]                    __var portAdr = 0;
[03:05:22.240]                      // -> [portAdr <= 0x00000000]
[03:05:22.240]                    __var pos     = 0;
[03:05:22.241]                      // -> [pos <= 0x00000000]
[03:05:22.241]                    __var SWO_Pin = 0x00010003;          // PB3
[03:05:22.241]                      // -> [SWO_Pin <= 0x00010003]
[03:05:22.241]                  </block>
[03:05:22.241]                  <block atomic="false" info="configure SWO">
[03:05:22.241]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:05:22.241]                      // -> [pin <= 0x00000003]
[03:05:22.242]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:05:22.242]                      // -> [port <= 0x00000001]
[03:05:22.242]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:05:22.242]                      // -> [portAdr <= 0x40020400]
[03:05:22.242]                    pos = pin * 2;
[03:05:22.242]                      // -> [pos <= 0x00000006]
[03:05:22.242]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:05:22.243]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.244]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.244]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:05:22.244]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.245]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.245]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:05:22.245]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.245]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.246]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:05:22.246]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.246]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.247]                  </block>
[03:05:22.247]                  <control if="pin <  8" while="" timeout="0" info="">
[03:05:22.247]                    // if-block "pin <  8"
[03:05:22.247]                      // =>  TRUE
[03:05:22.247]                    <block atomic="false" info="">
[03:05:22.247]                      pos = ((pin    ) & 7) * 4;
[03:05:22.247]                        // -> [pos <= 0x0000000C]
[03:05:22.248]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:05:22.248]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.248]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.249]                    </block>
[03:05:22.249]                    // end if-block "pin <  8"
[03:05:22.249]                  </control>
[03:05:22.249]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:05:22.249]                    // if-block "pin >= 8"
[03:05:22.249]                      // =>  FALSE
[03:05:22.249]                    // skip if-block "pin >= 8"
[03:05:22.249]                  </control>
[03:05:22.249]                </sequence>
[03:05:22.250]            </block>
[03:05:22.250]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:05:22.250]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:05:22.250]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.250]            </block>
[03:05:22.250]          </sequence>
[03:05:22.251]      </block>
[03:05:22.251]      // end if-block "traceSWO"
[03:05:22.251]    </control>
[03:05:22.251]    <control if="traceTPIU" while="" timeout="0" info="">
[03:05:22.251]      // if-block "traceTPIU"
[03:05:22.251]        // =>  FALSE
[03:05:22.251]      // skip if-block "traceTPIU"
[03:05:22.252]    </control>
[03:05:22.252]  </sequence>
[03:05:22.252]  
[03:05:22.256]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:05:22.256]  
[03:05:22.256]  <debugvars>
[03:05:22.256]    // Pre-defined
[03:05:22.256]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:22.256]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:05:22.257]    __dp=0x00000000
[03:05:22.257]    __ap=0x00000000
[03:05:22.257]    __traceout=0x00000001      (SWO Trace)
[03:05:22.257]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:22.257]    __FlashAddr=0x00000000
[03:05:22.258]    __FlashLen=0x00000000
[03:05:22.258]    __FlashArg=0x00000000
[03:05:22.258]    __FlashOp=0x00000000
[03:05:22.258]    __Result=0x00000000
[03:05:22.258]    
[03:05:22.258]    // User-defined
[03:05:22.258]    DbgMCU_CR=0x00000007
[03:05:22.259]    DbgMCU_APB1_Fz=0x00000000
[03:05:22.259]    DbgMCU_APB2_Fz=0x00000000
[03:05:22.259]    TraceClk_Pin=0x00040002
[03:05:22.259]    TraceD0_Pin=0x00040003
[03:05:22.259]    TraceD1_Pin=0x00040004
[03:05:22.259]    TraceD2_Pin=0x00040005
[03:05:22.259]    TraceD3_Pin=0x00040006
[03:05:22.260]  </debugvars>
[03:05:22.260]  
[03:05:22.260]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:05:22.260]    <block atomic="false" info="">
[03:05:22.260]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:05:22.260]        // -> [traceSWO <= 0x00000001]
[03:05:22.261]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:05:22.261]        // -> [traceTPIU <= 0x00000000]
[03:05:22.261]    </block>
[03:05:22.261]    <control if="traceSWO" while="" timeout="0" info="">
[03:05:22.261]      // if-block "traceSWO"
[03:05:22.261]        // =>  TRUE
[03:05:22.262]      <block atomic="false" info="">
[03:05:22.262]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:05:22.262]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:05:22.262]            <block atomic="false" info="">
[03:05:22.262]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:05:22.262]                // -> [dbgmcu_val <= 0x00000000]
[03:05:22.263]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:05:22.263]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:05:22.263]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:05:22.263]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.263]                // -> [dbgmcu_val <= 0x00000007]
[03:05:22.264]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:05:22.264]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:05:22.264]              Sequence("ConfigureTraceSWOPin");
[03:05:22.264]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:05:22.264]                  <block atomic="false" info="">
[03:05:22.264]                    __var pin     = 0;
[03:05:22.265]                      // -> [pin <= 0x00000000]
[03:05:22.265]                    __var port    = 0;
[03:05:22.265]                      // -> [port <= 0x00000000]
[03:05:22.265]                    __var portAdr = 0;
[03:05:22.265]                      // -> [portAdr <= 0x00000000]
[03:05:22.265]                    __var pos     = 0;
[03:05:22.265]                      // -> [pos <= 0x00000000]
[03:05:22.266]                    __var SWO_Pin = 0x00010003;          // PB3
[03:05:22.266]                      // -> [SWO_Pin <= 0x00010003]
[03:05:22.266]                  </block>
[03:05:22.266]                  <block atomic="false" info="configure SWO">
[03:05:22.266]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:05:22.266]                      // -> [pin <= 0x00000003]
[03:05:22.267]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:05:22.267]                      // -> [port <= 0x00000001]
[03:05:22.267]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:05:22.267]                      // -> [portAdr <= 0x40020400]
[03:05:22.267]                    pos = pin * 2;
[03:05:22.267]                      // -> [pos <= 0x00000006]
[03:05:22.268]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:05:22.268]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.268]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.269]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:05:22.269]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.270]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.270]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:05:22.270]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.271]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.271]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:05:22.271]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.272]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.272]                  </block>
[03:05:22.272]                  <control if="pin <  8" while="" timeout="0" info="">
[03:05:22.272]                    // if-block "pin <  8"
[03:05:22.273]                      // =>  TRUE
[03:05:22.273]                    <block atomic="false" info="">
[03:05:22.273]                      pos = ((pin    ) & 7) * 4;
[03:05:22.273]                        // -> [pos <= 0x0000000C]
[03:05:22.273]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:05:22.274]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.274]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.274]                    </block>
[03:05:22.275]                    // end if-block "pin <  8"
[03:05:22.275]                  </control>
[03:05:22.275]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:05:22.275]                    // if-block "pin >= 8"
[03:05:22.275]                      // =>  FALSE
[03:05:22.275]                    // skip if-block "pin >= 8"
[03:05:22.275]                  </control>
[03:05:22.276]                </sequence>
[03:05:22.276]            </block>
[03:05:22.276]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:05:22.276]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:05:22.277]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.277]            </block>
[03:05:22.277]          </sequence>
[03:05:22.277]      </block>
[03:05:22.277]      // end if-block "traceSWO"
[03:05:22.277]    </control>
[03:05:22.277]    <control if="traceTPIU" while="" timeout="0" info="">
[03:05:22.278]      // if-block "traceTPIU"
[03:05:22.278]        // =>  FALSE
[03:05:22.278]      // skip if-block "traceTPIU"
[03:05:22.278]    </control>
[03:05:22.278]  </sequence>
[03:05:22.278]  
[03:05:22.494]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:05:22.494]  
[03:05:22.495]  <debugvars>
[03:05:22.495]    // Pre-defined
[03:05:22.495]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:22.495]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:05:22.496]    __dp=0x00000000
[03:05:22.496]    __ap=0x00000000
[03:05:22.496]    __traceout=0x00000001      (SWO Trace)
[03:05:22.496]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:22.496]    __FlashAddr=0x00000000
[03:05:22.496]    __FlashLen=0x00000000
[03:05:22.497]    __FlashArg=0x00000000
[03:05:22.497]    __FlashOp=0x00000000
[03:05:22.497]    __Result=0x00000000
[03:05:22.497]    
[03:05:22.497]    // User-defined
[03:05:22.498]    DbgMCU_CR=0x00000007
[03:05:22.498]    DbgMCU_APB1_Fz=0x00000000
[03:05:22.498]    DbgMCU_APB2_Fz=0x00000000
[03:05:22.498]    TraceClk_Pin=0x00040002
[03:05:22.498]    TraceD0_Pin=0x00040003
[03:05:22.499]    TraceD1_Pin=0x00040004
[03:05:22.499]    TraceD2_Pin=0x00040005
[03:05:22.499]    TraceD3_Pin=0x00040006
[03:05:22.499]  </debugvars>
[03:05:22.499]  
[03:05:22.500]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:05:22.500]    <block atomic="false" info="">
[03:05:22.500]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:05:22.500]        // -> [traceSWO <= 0x00000001]
[03:05:22.500]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:05:22.500]        // -> [traceTPIU <= 0x00000000]
[03:05:22.501]    </block>
[03:05:22.501]    <control if="traceSWO" while="" timeout="0" info="">
[03:05:22.501]      // if-block "traceSWO"
[03:05:22.501]        // =>  TRUE
[03:05:22.501]      <block atomic="false" info="">
[03:05:22.502]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:05:22.502]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:05:22.502]            <block atomic="false" info="">
[03:05:22.502]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:05:22.502]                // -> [dbgmcu_val <= 0x00000000]
[03:05:22.502]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:05:22.503]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:05:22.503]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:05:22.503]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.504]                // -> [dbgmcu_val <= 0x00000007]
[03:05:22.504]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:05:22.504]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:05:22.504]              Sequence("ConfigureTraceSWOPin");
[03:05:22.504]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:05:22.504]                  <block atomic="false" info="">
[03:05:22.505]                    __var pin     = 0;
[03:05:22.505]                      // -> [pin <= 0x00000000]
[03:05:22.505]                    __var port    = 0;
[03:05:22.505]                      // -> [port <= 0x00000000]
[03:05:22.506]                    __var portAdr = 0;
[03:05:22.506]                      // -> [portAdr <= 0x00000000]
[03:05:22.506]                    __var pos     = 0;
[03:05:22.506]                      // -> [pos <= 0x00000000]
[03:05:22.506]                    __var SWO_Pin = 0x00010003;          // PB3
[03:05:22.506]                      // -> [SWO_Pin <= 0x00010003]
[03:05:22.506]                  </block>
[03:05:22.507]                  <block atomic="false" info="configure SWO">
[03:05:22.507]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:05:22.507]                      // -> [pin <= 0x00000003]
[03:05:22.507]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:05:22.507]                      // -> [port <= 0x00000001]
[03:05:22.507]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:05:22.507]                      // -> [portAdr <= 0x40020400]
[03:05:22.508]                    pos = pin * 2;
[03:05:22.508]                      // -> [pos <= 0x00000006]
[03:05:22.508]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:05:22.508]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.509]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.509]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:05:22.509]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.510]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.510]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:05:22.510]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.511]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.511]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:05:22.512]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.512]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.512]                  </block>
[03:05:22.512]                  <control if="pin <  8" while="" timeout="0" info="">
[03:05:22.512]                    // if-block "pin <  8"
[03:05:22.513]                      // =>  TRUE
[03:05:22.513]                    <block atomic="false" info="">
[03:05:22.513]                      pos = ((pin    ) & 7) * 4;
[03:05:22.513]                        // -> [pos <= 0x0000000C]
[03:05:22.513]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:05:22.514]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.514]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.514]                    </block>
[03:05:22.514]                    // end if-block "pin <  8"
[03:05:22.514]                  </control>
[03:05:22.515]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:05:22.515]                    // if-block "pin >= 8"
[03:05:22.515]                      // =>  FALSE
[03:05:22.515]                    // skip if-block "pin >= 8"
[03:05:22.515]                  </control>
[03:05:22.515]                </sequence>
[03:05:22.515]            </block>
[03:05:22.516]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:05:22.516]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:05:22.516]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:22.516]            </block>
[03:05:22.516]          </sequence>
[03:05:22.517]      </block>
[03:05:22.517]      // end if-block "traceSWO"
[03:05:22.517]    </control>
[03:05:22.517]    <control if="traceTPIU" while="" timeout="0" info="">
[03:05:22.517]      // if-block "traceTPIU"
[03:05:22.517]        // =>  FALSE
[03:05:22.517]      // skip if-block "traceTPIU"
[03:05:22.518]    </control>
[03:05:22.518]  </sequence>
[03:05:22.518]  
[03:08:11.469]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:08:11.469]  
[03:08:11.469]  <debugvars>
[03:08:11.469]    // Pre-defined
[03:08:11.469]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:08:11.470]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:08:11.470]    __dp=0x00000000
[03:08:11.470]    __ap=0x00000000
[03:08:11.470]    __traceout=0x00000001      (SWO Trace)
[03:08:11.470]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:08:11.471]    __FlashAddr=0x00000000
[03:08:11.471]    __FlashLen=0x00000000
[03:08:11.471]    __FlashArg=0x00000000
[03:08:11.471]    __FlashOp=0x00000000
[03:08:11.471]    __Result=0x00000000
[03:08:11.471]    
[03:08:11.471]    // User-defined
[03:08:11.471]    DbgMCU_CR=0x00000007
[03:08:11.471]    DbgMCU_APB1_Fz=0x00000000
[03:08:11.471]    DbgMCU_APB2_Fz=0x00000000
[03:08:11.471]    TraceClk_Pin=0x00040002
[03:08:11.471]    TraceD0_Pin=0x00040003
[03:08:11.471]    TraceD1_Pin=0x00040004
[03:08:11.471]    TraceD2_Pin=0x00040005
[03:08:11.472]    TraceD3_Pin=0x00040006
[03:08:11.472]  </debugvars>
[03:08:11.472]  
[03:08:11.472]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:08:11.472]    <block atomic="false" info="">
[03:08:11.472]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:08:11.472]        // -> [traceSWO <= 0x00000001]
[03:08:11.472]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:08:11.473]        // -> [traceTPIU <= 0x00000000]
[03:08:11.473]    </block>
[03:08:11.473]    <control if="traceSWO" while="" timeout="0" info="">
[03:08:11.473]      // if-block "traceSWO"
[03:08:11.473]        // =>  TRUE
[03:08:11.473]      <block atomic="false" info="">
[03:08:11.473]        Sequence("DisableTraceSWO");
[03:08:11.474]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:08:11.474]            <block atomic="false" info="">
[03:08:11.474]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:08:11.474]                // -> [dbgmcu_val <= 0x00000000]
[03:08:11.474]            </block>
[03:08:11.474]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:08:11.474]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:08:11.475]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:08:11.475]                // -> [dbgmcu_val <= 0x00000007]
[03:08:11.475]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:08:11.475]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:08:11.475]            </block>
[03:08:11.475]          </sequence>
[03:08:11.476]      </block>
[03:08:11.476]      // end if-block "traceSWO"
[03:08:11.476]    </control>
[03:08:11.476]    <control if="traceTPIU" while="" timeout="0" info="">
[03:08:11.476]      // if-block "traceTPIU"
[03:08:11.476]        // =>  FALSE
[03:08:11.476]      // skip if-block "traceTPIU"
[03:08:11.476]    </control>
[03:08:11.476]  </sequence>
[03:08:11.477]  
[03:08:39.373]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:08:39.373]  
[03:08:39.373]  <debugvars>
[03:08:39.374]    // Pre-defined
[03:08:39.374]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:08:39.374]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:08:39.374]    __dp=0x00000000
[03:08:39.374]    __ap=0x00000000
[03:08:39.374]    __traceout=0x00000001      (SWO Trace)
[03:08:39.374]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:08:39.374]    __FlashAddr=0x00000000
[03:08:39.375]    __FlashLen=0x00000000
[03:08:39.375]    __FlashArg=0x00000000
[03:08:39.375]    __FlashOp=0x00000000
[03:08:39.375]    __Result=0x00000000
[03:08:39.375]    
[03:08:39.375]    // User-defined
[03:08:39.375]    DbgMCU_CR=0x00000007
[03:08:39.375]    DbgMCU_APB1_Fz=0x00000000
[03:08:39.375]    DbgMCU_APB2_Fz=0x00000000
[03:08:39.376]    TraceClk_Pin=0x00040002
[03:08:39.376]    TraceD0_Pin=0x00040003
[03:08:39.376]    TraceD1_Pin=0x00040004
[03:08:39.376]    TraceD2_Pin=0x00040005
[03:08:39.376]    TraceD3_Pin=0x00040006
[03:08:39.376]  </debugvars>
[03:08:39.376]  
[03:08:39.376]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:08:39.376]    <block atomic="false" info="">
[03:08:39.377]      Sequence("CheckID");
[03:08:39.377]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:08:39.377]          <block atomic="false" info="">
[03:08:39.377]            __var pidr1 = 0;
[03:08:39.377]              // -> [pidr1 <= 0x00000000]
[03:08:39.377]            __var pidr2 = 0;
[03:08:39.377]              // -> [pidr2 <= 0x00000000]
[03:08:39.378]            __var jep106id = 0;
[03:08:39.378]              // -> [jep106id <= 0x00000000]
[03:08:39.378]            __var ROMTableBase = 0;
[03:08:39.378]              // -> [ROMTableBase <= 0x00000000]
[03:08:39.378]            __ap = 0;      // AHB-AP
[03:08:39.378]              // -> [__ap <= 0x00000000]
[03:08:39.378]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:08:39.379]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:08:39.379]              // -> [ROMTableBase <= 0xE00FD000]
[03:08:39.379]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:08:39.379]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:08:39.380]              // -> [pidr1 <= 0x00000004]
[03:08:39.380]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:08:39.380]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:08:39.380]              // -> [pidr2 <= 0x0000001A]
[03:08:39.380]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:08:39.381]              // -> [jep106id <= 0x00000020]
[03:08:39.381]          </block>
[03:08:39.381]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:08:39.381]            // if-block "jep106id != 0x20"
[03:08:39.381]              // =>  FALSE
[03:08:39.381]            // skip if-block "jep106id != 0x20"
[03:08:39.381]          </control>
[03:08:39.381]        </sequence>
[03:08:39.381]    </block>
[03:08:39.382]  </sequence>
[03:08:39.382]  
[03:08:39.396]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:08:39.396]  
[03:08:39.396]  <debugvars>
[03:08:39.396]    // Pre-defined
[03:08:39.396]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:08:39.397]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:08:39.397]    __dp=0x00000000
[03:08:39.397]    __ap=0x00000000
[03:08:39.397]    __traceout=0x00000001      (SWO Trace)
[03:08:39.397]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:08:39.397]    __FlashAddr=0x00000000
[03:08:39.397]    __FlashLen=0x00000000
[03:08:39.397]    __FlashArg=0x00000000
[03:08:39.397]    __FlashOp=0x00000000
[03:08:39.398]    __Result=0x00000000
[03:08:39.398]    
[03:08:39.398]    // User-defined
[03:08:39.398]    DbgMCU_CR=0x00000007
[03:08:39.398]    DbgMCU_APB1_Fz=0x00000000
[03:08:39.398]    DbgMCU_APB2_Fz=0x00000000
[03:08:39.398]    TraceClk_Pin=0x00040002
[03:08:39.399]    TraceD0_Pin=0x00040003
[03:08:39.399]    TraceD1_Pin=0x00040004
[03:08:39.399]    TraceD2_Pin=0x00040005
[03:08:39.399]    TraceD3_Pin=0x00040006
[03:08:39.399]  </debugvars>
[03:08:39.399]  
[03:08:39.399]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:08:39.399]    <block atomic="false" info="">
[03:08:39.400]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:08:39.400]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:08:39.400]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:08:39.401]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:08:39.401]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:08:39.401]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:08:39.401]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:08:39.402]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:08:39.402]    </block>
[03:08:39.402]  </sequence>
[03:08:39.402]  
[03:09:10.295]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:09:10.295]  
[03:09:10.295]  <debugvars>
[03:09:10.295]    // Pre-defined
[03:09:10.295]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:09:10.295]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:09:10.296]    __dp=0x00000000
[03:09:10.296]    __ap=0x00000000
[03:09:10.296]    __traceout=0x00000001      (SWO Trace)
[03:09:10.296]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:09:10.296]    __FlashAddr=0x00000000
[03:09:10.297]    __FlashLen=0x00000000
[03:09:10.297]    __FlashArg=0x00000000
[03:09:10.297]    __FlashOp=0x00000000
[03:09:10.297]    __Result=0x00000000
[03:09:10.297]    
[03:09:10.297]    // User-defined
[03:09:10.297]    DbgMCU_CR=0x00000007
[03:09:10.298]    DbgMCU_APB1_Fz=0x00000000
[03:09:10.298]    DbgMCU_APB2_Fz=0x00000000
[03:09:10.298]    TraceClk_Pin=0x00040002
[03:09:10.298]    TraceD0_Pin=0x00040003
[03:09:10.298]    TraceD1_Pin=0x00040004
[03:09:10.298]    TraceD2_Pin=0x00040005
[03:09:10.299]    TraceD3_Pin=0x00040006
[03:09:10.299]  </debugvars>
[03:09:10.299]  
[03:09:10.299]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:09:10.299]    <block atomic="false" info="">
[03:09:10.299]      Sequence("CheckID");
[03:09:10.300]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:09:10.300]          <block atomic="false" info="">
[03:09:10.300]            __var pidr1 = 0;
[03:09:10.300]              // -> [pidr1 <= 0x00000000]
[03:09:10.300]            __var pidr2 = 0;
[03:09:10.301]              // -> [pidr2 <= 0x00000000]
[03:09:10.301]            __var jep106id = 0;
[03:09:10.301]              // -> [jep106id <= 0x00000000]
[03:09:10.301]            __var ROMTableBase = 0;
[03:09:10.301]              // -> [ROMTableBase <= 0x00000000]
[03:09:10.301]            __ap = 0;      // AHB-AP
[03:09:10.301]              // -> [__ap <= 0x00000000]
[03:09:10.302]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:09:10.302]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.302]              // -> [ROMTableBase <= 0xE00FD000]
[03:09:10.302]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:09:10.303]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.303]              // -> [pidr1 <= 0x00000004]
[03:09:10.303]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:09:10.304]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.304]              // -> [pidr2 <= 0x0000001A]
[03:09:10.304]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:09:10.304]              // -> [jep106id <= 0x00000020]
[03:09:10.304]          </block>
[03:09:10.304]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:09:10.305]            // if-block "jep106id != 0x20"
[03:09:10.305]              // =>  FALSE
[03:09:10.305]            // skip if-block "jep106id != 0x20"
[03:09:10.305]          </control>
[03:09:10.305]        </sequence>
[03:09:10.305]    </block>
[03:09:10.305]  </sequence>
[03:09:10.306]  
[03:09:10.320]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:09:10.320]  
[03:09:10.320]  <debugvars>
[03:09:10.320]    // Pre-defined
[03:09:10.320]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:09:10.320]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:09:10.320]    __dp=0x00000000
[03:09:10.321]    __ap=0x00000000
[03:09:10.321]    __traceout=0x00000001      (SWO Trace)
[03:09:10.321]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:09:10.321]    __FlashAddr=0x00000000
[03:09:10.321]    __FlashLen=0x00000000
[03:09:10.321]    __FlashArg=0x00000000
[03:09:10.322]    __FlashOp=0x00000000
[03:09:10.322]    __Result=0x00000000
[03:09:10.322]    
[03:09:10.322]    // User-defined
[03:09:10.322]    DbgMCU_CR=0x00000007
[03:09:10.322]    DbgMCU_APB1_Fz=0x00000000
[03:09:10.322]    DbgMCU_APB2_Fz=0x00000000
[03:09:10.323]    TraceClk_Pin=0x00040002
[03:09:10.323]    TraceD0_Pin=0x00040003
[03:09:10.323]    TraceD1_Pin=0x00040004
[03:09:10.323]    TraceD2_Pin=0x00040005
[03:09:10.323]    TraceD3_Pin=0x00040006
[03:09:10.324]  </debugvars>
[03:09:10.324]  
[03:09:10.324]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:09:10.324]    <block atomic="false" info="">
[03:09:10.324]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:09:10.325]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.325]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:09:10.326]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.326]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:09:10.327]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.327]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:09:10.327]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.327]    </block>
[03:09:10.328]  </sequence>
[03:09:10.328]  
[03:09:10.343]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:09:10.343]  
[03:09:10.343]  <debugvars>
[03:09:10.344]    // Pre-defined
[03:09:10.344]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:09:10.344]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:09:10.344]    __dp=0x00000000
[03:09:10.344]    __ap=0x00000000
[03:09:10.345]    __traceout=0x00000001      (SWO Trace)
[03:09:10.345]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:09:10.345]    __FlashAddr=0x00000000
[03:09:10.345]    __FlashLen=0x00000000
[03:09:10.345]    __FlashArg=0x00000000
[03:09:10.346]    __FlashOp=0x00000000
[03:09:10.346]    __Result=0x00000000
[03:09:10.346]    
[03:09:10.346]    // User-defined
[03:09:10.346]    DbgMCU_CR=0x00000007
[03:09:10.346]    DbgMCU_APB1_Fz=0x00000000
[03:09:10.347]    DbgMCU_APB2_Fz=0x00000000
[03:09:10.347]    TraceClk_Pin=0x00040002
[03:09:10.347]    TraceD0_Pin=0x00040003
[03:09:10.347]    TraceD1_Pin=0x00040004
[03:09:10.347]    TraceD2_Pin=0x00040005
[03:09:10.348]    TraceD3_Pin=0x00040006
[03:09:10.348]  </debugvars>
[03:09:10.348]  
[03:09:10.348]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:09:10.348]    <block atomic="false" info="">
[03:09:10.348]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:09:10.349]        // -> [traceSWO <= 0x00000001]
[03:09:10.349]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:09:10.349]        // -> [traceTPIU <= 0x00000000]
[03:09:10.349]    </block>
[03:09:10.349]    <control if="traceSWO" while="" timeout="0" info="">
[03:09:10.349]      // if-block "traceSWO"
[03:09:10.350]        // =>  TRUE
[03:09:10.350]      <block atomic="false" info="">
[03:09:10.350]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:09:10.350]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:09:10.351]            <block atomic="false" info="">
[03:09:10.351]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:09:10.351]                // -> [dbgmcu_val <= 0x00000000]
[03:09:10.351]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:09:10.351]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:09:10.351]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:09:10.352]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.352]                // -> [dbgmcu_val <= 0x00000007]
[03:09:10.352]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:09:10.352]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:09:10.352]              Sequence("ConfigureTraceSWOPin");
[03:09:10.352]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:09:10.352]                  <block atomic="false" info="">
[03:09:10.352]                    __var pin     = 0;
[03:09:10.352]                      // -> [pin <= 0x00000000]
[03:09:10.352]                    __var port    = 0;
[03:09:10.353]                      // -> [port <= 0x00000000]
[03:09:10.353]                    __var portAdr = 0;
[03:09:10.353]                      // -> [portAdr <= 0x00000000]
[03:09:10.353]                    __var pos     = 0;
[03:09:10.353]                      // -> [pos <= 0x00000000]
[03:09:10.353]                    __var SWO_Pin = 0x00010003;          // PB3
[03:09:10.354]                      // -> [SWO_Pin <= 0x00010003]
[03:09:10.354]                  </block>
[03:09:10.354]                  <block atomic="false" info="configure SWO">
[03:09:10.354]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:09:10.354]                      // -> [pin <= 0x00000003]
[03:09:10.354]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:09:10.355]                      // -> [port <= 0x00000001]
[03:09:10.355]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:09:10.355]                      // -> [portAdr <= 0x40020400]
[03:09:10.355]                    pos = pin * 2;
[03:09:10.355]                      // -> [pos <= 0x00000006]
[03:09:10.355]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:09:10.356]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.356]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.357]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:09:10.357]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.357]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.358]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:09:10.358]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.359]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.359]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:09:10.359]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.360]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.360]                  </block>
[03:09:10.360]                  <control if="pin <  8" while="" timeout="0" info="">
[03:09:10.360]                    // if-block "pin <  8"
[03:09:10.360]                      // =>  TRUE
[03:09:10.360]                    <block atomic="false" info="">
[03:09:10.360]                      pos = ((pin    ) & 7) * 4;
[03:09:10.361]                        // -> [pos <= 0x0000000C]
[03:09:10.361]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:09:10.361]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.362]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.362]                    </block>
[03:09:10.362]                    // end if-block "pin <  8"
[03:09:10.362]                  </control>
[03:09:10.363]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:09:10.363]                    // if-block "pin >= 8"
[03:09:10.363]                      // =>  FALSE
[03:09:10.363]                    // skip if-block "pin >= 8"
[03:09:10.363]                  </control>
[03:09:10.363]                </sequence>
[03:09:10.364]            </block>
[03:09:10.364]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:09:10.364]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:09:10.365]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.365]            </block>
[03:09:10.365]          </sequence>
[03:09:10.365]      </block>
[03:09:10.365]      // end if-block "traceSWO"
[03:09:10.365]    </control>
[03:09:10.365]    <control if="traceTPIU" while="" timeout="0" info="">
[03:09:10.366]      // if-block "traceTPIU"
[03:09:10.366]        // =>  FALSE
[03:09:10.366]      // skip if-block "traceTPIU"
[03:09:10.366]    </control>
[03:09:10.366]  </sequence>
[03:09:10.367]  
[03:09:10.370]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:09:10.370]  
[03:09:10.370]  <debugvars>
[03:09:10.370]    // Pre-defined
[03:09:10.371]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:09:10.371]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:09:10.371]    __dp=0x00000000
[03:09:10.371]    __ap=0x00000000
[03:09:10.371]    __traceout=0x00000001      (SWO Trace)
[03:09:10.372]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:09:10.372]    __FlashAddr=0x00000000
[03:09:10.372]    __FlashLen=0x00000000
[03:09:10.372]    __FlashArg=0x00000000
[03:09:10.372]    __FlashOp=0x00000000
[03:09:10.372]    __Result=0x00000000
[03:09:10.373]    
[03:09:10.373]    // User-defined
[03:09:10.373]    DbgMCU_CR=0x00000007
[03:09:10.373]    DbgMCU_APB1_Fz=0x00000000
[03:09:10.373]    DbgMCU_APB2_Fz=0x00000000
[03:09:10.373]    TraceClk_Pin=0x00040002
[03:09:10.374]    TraceD0_Pin=0x00040003
[03:09:10.374]    TraceD1_Pin=0x00040004
[03:09:10.374]    TraceD2_Pin=0x00040005
[03:09:10.374]    TraceD3_Pin=0x00040006
[03:09:10.374]  </debugvars>
[03:09:10.374]  
[03:09:10.375]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:09:10.375]    <block atomic="false" info="">
[03:09:10.375]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:09:10.375]        // -> [traceSWO <= 0x00000001]
[03:09:10.375]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:09:10.375]        // -> [traceTPIU <= 0x00000000]
[03:09:10.376]    </block>
[03:09:10.376]    <control if="traceSWO" while="" timeout="0" info="">
[03:09:10.376]      // if-block "traceSWO"
[03:09:10.376]        // =>  TRUE
[03:09:10.376]      <block atomic="false" info="">
[03:09:10.376]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:09:10.377]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:09:10.377]            <block atomic="false" info="">
[03:09:10.377]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:09:10.377]                // -> [dbgmcu_val <= 0x00000000]
[03:09:10.377]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:09:10.377]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:09:10.378]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:09:10.378]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.378]                // -> [dbgmcu_val <= 0x00000007]
[03:09:10.378]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:09:10.378]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:09:10.379]              Sequence("ConfigureTraceSWOPin");
[03:09:10.379]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:09:10.379]                  <block atomic="false" info="">
[03:09:10.379]                    __var pin     = 0;
[03:09:10.379]                      // -> [pin <= 0x00000000]
[03:09:10.379]                    __var port    = 0;
[03:09:10.379]                      // -> [port <= 0x00000000]
[03:09:10.380]                    __var portAdr = 0;
[03:09:10.380]                      // -> [portAdr <= 0x00000000]
[03:09:10.380]                    __var pos     = 0;
[03:09:10.380]                      // -> [pos <= 0x00000000]
[03:09:10.380]                    __var SWO_Pin = 0x00010003;          // PB3
[03:09:10.380]                      // -> [SWO_Pin <= 0x00010003]
[03:09:10.380]                  </block>
[03:09:10.381]                  <block atomic="false" info="configure SWO">
[03:09:10.381]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:09:10.381]                      // -> [pin <= 0x00000003]
[03:09:10.381]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:09:10.381]                      // -> [port <= 0x00000001]
[03:09:10.381]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:09:10.381]                      // -> [portAdr <= 0x40020400]
[03:09:10.382]                    pos = pin * 2;
[03:09:10.382]                      // -> [pos <= 0x00000006]
[03:09:10.382]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:09:10.382]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.383]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.383]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:09:10.383]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.384]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.384]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:09:10.384]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.385]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.385]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:09:10.385]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.386]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.386]                  </block>
[03:09:10.386]                  <control if="pin <  8" while="" timeout="0" info="">
[03:09:10.386]                    // if-block "pin <  8"
[03:09:10.386]                      // =>  TRUE
[03:09:10.387]                    <block atomic="false" info="">
[03:09:10.387]                      pos = ((pin    ) & 7) * 4;
[03:09:10.387]                        // -> [pos <= 0x0000000C]
[03:09:10.387]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:09:10.388]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.388]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.388]                    </block>
[03:09:10.388]                    // end if-block "pin <  8"
[03:09:10.388]                  </control>
[03:09:10.388]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:09:10.389]                    // if-block "pin >= 8"
[03:09:10.389]                      // =>  FALSE
[03:09:10.389]                    // skip if-block "pin >= 8"
[03:09:10.389]                  </control>
[03:09:10.389]                </sequence>
[03:09:10.389]            </block>
[03:09:10.389]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:09:10.389]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:09:10.390]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.390]            </block>
[03:09:10.390]          </sequence>
[03:09:10.390]      </block>
[03:09:10.390]      // end if-block "traceSWO"
[03:09:10.390]    </control>
[03:09:10.391]    <control if="traceTPIU" while="" timeout="0" info="">
[03:09:10.391]      // if-block "traceTPIU"
[03:09:10.391]        // =>  FALSE
[03:09:10.391]      // skip if-block "traceTPIU"
[03:09:10.391]    </control>
[03:09:10.391]  </sequence>
[03:09:10.391]  
[03:09:10.607]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:09:10.607]  
[03:09:10.608]  <debugvars>
[03:09:10.608]    // Pre-defined
[03:09:10.608]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:09:10.608]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:09:10.608]    __dp=0x00000000
[03:09:10.608]    __ap=0x00000000
[03:09:10.609]    __traceout=0x00000001      (SWO Trace)
[03:09:10.609]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:09:10.609]    __FlashAddr=0x00000000
[03:09:10.609]    __FlashLen=0x00000000
[03:09:10.609]    __FlashArg=0x00000000
[03:09:10.609]    __FlashOp=0x00000000
[03:09:10.609]    __Result=0x00000000
[03:09:10.610]    
[03:09:10.610]    // User-defined
[03:09:10.610]    DbgMCU_CR=0x00000007
[03:09:10.610]    DbgMCU_APB1_Fz=0x00000000
[03:09:10.610]    DbgMCU_APB2_Fz=0x00000000
[03:09:10.610]    TraceClk_Pin=0x00040002
[03:09:10.610]    TraceD0_Pin=0x00040003
[03:09:10.611]    TraceD1_Pin=0x00040004
[03:09:10.611]    TraceD2_Pin=0x00040005
[03:09:10.611]    TraceD3_Pin=0x00040006
[03:09:10.611]  </debugvars>
[03:09:10.611]  
[03:09:10.611]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:09:10.611]    <block atomic="false" info="">
[03:09:10.612]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:09:10.612]        // -> [traceSWO <= 0x00000001]
[03:09:10.612]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:09:10.612]        // -> [traceTPIU <= 0x00000000]
[03:09:10.612]    </block>
[03:09:10.612]    <control if="traceSWO" while="" timeout="0" info="">
[03:09:10.612]      // if-block "traceSWO"
[03:09:10.613]        // =>  TRUE
[03:09:10.613]      <block atomic="false" info="">
[03:09:10.613]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:09:10.613]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:09:10.613]            <block atomic="false" info="">
[03:09:10.613]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:09:10.613]                // -> [dbgmcu_val <= 0x00000000]
[03:09:10.613]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:09:10.614]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:09:10.614]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:09:10.614]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.614]                // -> [dbgmcu_val <= 0x00000007]
[03:09:10.614]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:09:10.614]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:09:10.615]              Sequence("ConfigureTraceSWOPin");
[03:09:10.615]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:09:10.615]                  <block atomic="false" info="">
[03:09:10.615]                    __var pin     = 0;
[03:09:10.615]                      // -> [pin <= 0x00000000]
[03:09:10.615]                    __var port    = 0;
[03:09:10.615]                      // -> [port <= 0x00000000]
[03:09:10.615]                    __var portAdr = 0;
[03:09:10.616]                      // -> [portAdr <= 0x00000000]
[03:09:10.616]                    __var pos     = 0;
[03:09:10.616]                      // -> [pos <= 0x00000000]
[03:09:10.616]                    __var SWO_Pin = 0x00010003;          // PB3
[03:09:10.616]                      // -> [SWO_Pin <= 0x00010003]
[03:09:10.616]                  </block>
[03:09:10.617]                  <block atomic="false" info="configure SWO">
[03:09:10.617]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:09:10.617]                      // -> [pin <= 0x00000003]
[03:09:10.617]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:09:10.617]                      // -> [port <= 0x00000001]
[03:09:10.617]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:09:10.617]                      // -> [portAdr <= 0x40020400]
[03:09:10.617]                    pos = pin * 2;
[03:09:10.617]                      // -> [pos <= 0x00000006]
[03:09:10.618]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:09:10.618]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.619]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.619]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:09:10.619]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.619]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.620]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:09:10.620]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.620]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.621]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:09:10.621]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.621]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.622]                  </block>
[03:09:10.622]                  <control if="pin <  8" while="" timeout="0" info="">
[03:09:10.622]                    // if-block "pin <  8"
[03:09:10.622]                      // =>  TRUE
[03:09:10.622]                    <block atomic="false" info="">
[03:09:10.622]                      pos = ((pin    ) & 7) * 4;
[03:09:10.622]                        // -> [pos <= 0x0000000C]
[03:09:10.623]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:09:10.623]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.624]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.624]                    </block>
[03:09:10.624]                    // end if-block "pin <  8"
[03:09:10.624]                  </control>
[03:09:10.624]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:09:10.624]                    // if-block "pin >= 8"
[03:09:10.624]                      // =>  FALSE
[03:09:10.624]                    // skip if-block "pin >= 8"
[03:09:10.624]                  </control>
[03:09:10.625]                </sequence>
[03:09:10.625]            </block>
[03:09:10.625]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:09:10.625]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:09:10.625]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:10.626]            </block>
[03:09:10.626]          </sequence>
[03:09:10.626]      </block>
[03:09:10.626]      // end if-block "traceSWO"
[03:09:10.626]    </control>
[03:09:10.626]    <control if="traceTPIU" while="" timeout="0" info="">
[03:09:10.626]      // if-block "traceTPIU"
[03:09:10.626]        // =>  FALSE
[03:09:10.626]      // skip if-block "traceTPIU"
[03:09:10.626]    </control>
[03:09:10.627]  </sequence>
[03:09:10.627]  
[03:09:20.404]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:09:20.404]  
[03:09:20.404]  <debugvars>
[03:09:20.404]    // Pre-defined
[03:09:20.405]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:09:20.405]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:09:20.405]    __dp=0x00000000
[03:09:20.405]    __ap=0x00000000
[03:09:20.405]    __traceout=0x00000001      (SWO Trace)
[03:09:20.406]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:09:20.406]    __FlashAddr=0x00000000
[03:09:20.406]    __FlashLen=0x00000000
[03:09:20.406]    __FlashArg=0x00000000
[03:09:20.407]    __FlashOp=0x00000000
[03:09:20.407]    __Result=0x00000000
[03:09:20.407]    
[03:09:20.407]    // User-defined
[03:09:20.407]    DbgMCU_CR=0x00000007
[03:09:20.407]    DbgMCU_APB1_Fz=0x00000000
[03:09:20.407]    DbgMCU_APB2_Fz=0x00000000
[03:09:20.408]    TraceClk_Pin=0x00040002
[03:09:20.408]    TraceD0_Pin=0x00040003
[03:09:20.408]    TraceD1_Pin=0x00040004
[03:09:20.408]    TraceD2_Pin=0x00040005
[03:09:20.408]    TraceD3_Pin=0x00040006
[03:09:20.408]  </debugvars>
[03:09:20.408]  
[03:09:20.408]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:09:20.409]    <block atomic="false" info="">
[03:09:20.409]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:09:20.409]        // -> [traceSWO <= 0x00000001]
[03:09:20.409]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:09:20.409]        // -> [traceTPIU <= 0x00000000]
[03:09:20.409]    </block>
[03:09:20.409]    <control if="traceSWO" while="" timeout="0" info="">
[03:09:20.410]      // if-block "traceSWO"
[03:09:20.410]        // =>  TRUE
[03:09:20.410]      <block atomic="false" info="">
[03:09:20.410]        Sequence("DisableTraceSWO");
[03:09:20.410]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:09:20.410]            <block atomic="false" info="">
[03:09:20.410]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:09:20.410]                // -> [dbgmcu_val <= 0x00000000]
[03:09:20.410]            </block>
[03:09:20.411]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:09:20.411]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:09:20.411]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:09:20.411]                // -> [dbgmcu_val <= 0x00000007]
[03:09:20.411]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:09:20.412]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:20.412]            </block>
[03:09:20.412]          </sequence>
[03:09:20.412]      </block>
[03:09:20.412]      // end if-block "traceSWO"
[03:09:20.412]    </control>
[03:09:20.412]    <control if="traceTPIU" while="" timeout="0" info="">
[03:09:20.413]      // if-block "traceTPIU"
[03:09:20.413]        // =>  FALSE
[03:09:20.413]      // skip if-block "traceTPIU"
[03:09:20.413]    </control>
[03:09:20.413]  </sequence>
[03:09:20.413]  
[03:09:38.261]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:09:38.261]  
[03:09:38.261]  <debugvars>
[03:09:38.261]    // Pre-defined
[03:09:38.262]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:09:38.262]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:09:38.262]    __dp=0x00000000
[03:09:38.262]    __ap=0x00000000
[03:09:38.262]    __traceout=0x00000001      (SWO Trace)
[03:09:38.263]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:09:38.263]    __FlashAddr=0x00000000
[03:09:38.263]    __FlashLen=0x00000000
[03:09:38.263]    __FlashArg=0x00000000
[03:09:38.263]    __FlashOp=0x00000000
[03:09:38.263]    __Result=0x00000000
[03:09:38.264]    
[03:09:38.264]    // User-defined
[03:09:38.264]    DbgMCU_CR=0x00000007
[03:09:38.264]    DbgMCU_APB1_Fz=0x00000000
[03:09:38.264]    DbgMCU_APB2_Fz=0x00000000
[03:09:38.264]    TraceClk_Pin=0x00040002
[03:09:38.265]    TraceD0_Pin=0x00040003
[03:09:38.265]    TraceD1_Pin=0x00040004
[03:09:38.265]    TraceD2_Pin=0x00040005
[03:09:38.265]    TraceD3_Pin=0x00040006
[03:09:38.265]  </debugvars>
[03:09:38.266]  
[03:09:38.266]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:09:38.266]    <block atomic="false" info="">
[03:09:38.266]      Sequence("CheckID");
[03:09:38.266]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:09:38.267]          <block atomic="false" info="">
[03:09:38.267]            __var pidr1 = 0;
[03:09:38.267]              // -> [pidr1 <= 0x00000000]
[03:09:38.267]            __var pidr2 = 0;
[03:09:38.267]              // -> [pidr2 <= 0x00000000]
[03:09:38.268]            __var jep106id = 0;
[03:09:38.268]              // -> [jep106id <= 0x00000000]
[03:09:38.268]            __var ROMTableBase = 0;
[03:09:38.268]              // -> [ROMTableBase <= 0x00000000]
[03:09:38.268]            __ap = 0;      // AHB-AP
[03:09:38.269]              // -> [__ap <= 0x00000000]
[03:09:38.269]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:09:38.269]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:09:38.269]              // -> [ROMTableBase <= 0xE00FD000]
[03:09:38.269]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:09:38.270]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:09:38.270]              // -> [pidr1 <= 0x00000004]
[03:09:38.270]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:09:38.271]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:09:38.271]              // -> [pidr2 <= 0x0000001A]
[03:09:38.271]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:09:38.271]              // -> [jep106id <= 0x00000020]
[03:09:38.272]          </block>
[03:09:38.272]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:09:38.272]            // if-block "jep106id != 0x20"
[03:09:38.272]              // =>  FALSE
[03:09:38.272]            // skip if-block "jep106id != 0x20"
[03:09:38.272]          </control>
[03:09:38.273]        </sequence>
[03:09:38.273]    </block>
[03:09:38.273]  </sequence>
[03:09:38.273]  
[03:09:38.287]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:09:38.287]  
[03:09:38.288]  <debugvars>
[03:09:38.288]    // Pre-defined
[03:09:38.288]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:09:38.288]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:09:38.288]    __dp=0x00000000
[03:09:38.288]    __ap=0x00000000
[03:09:38.289]    __traceout=0x00000001      (SWO Trace)
[03:09:38.289]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:09:38.289]    __FlashAddr=0x00000000
[03:09:38.289]    __FlashLen=0x00000000
[03:09:38.289]    __FlashArg=0x00000000
[03:09:38.289]    __FlashOp=0x00000000
[03:09:38.290]    __Result=0x00000000
[03:09:38.290]    
[03:09:38.290]    // User-defined
[03:09:38.290]    DbgMCU_CR=0x00000007
[03:09:38.290]    DbgMCU_APB1_Fz=0x00000000
[03:09:38.290]    DbgMCU_APB2_Fz=0x00000000
[03:09:38.291]    TraceClk_Pin=0x00040002
[03:09:38.291]    TraceD0_Pin=0x00040003
[03:09:38.291]    TraceD1_Pin=0x00040004
[03:09:38.291]    TraceD2_Pin=0x00040005
[03:09:38.291]    TraceD3_Pin=0x00040006
[03:09:38.292]  </debugvars>
[03:09:38.292]  
[03:09:38.292]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:09:38.292]    <block atomic="false" info="">
[03:09:38.292]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:09:38.293]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:38.293]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:09:38.294]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:38.294]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:09:38.294]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:38.294]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:09:38.295]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:38.295]    </block>
[03:09:38.295]  </sequence>
[03:09:38.296]  
[03:10:09.227]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:10:09.227]  
[03:10:09.228]  <debugvars>
[03:10:09.228]    // Pre-defined
[03:10:09.228]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:09.228]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:10:09.228]    __dp=0x00000000
[03:10:09.228]    __ap=0x00000000
[03:10:09.228]    __traceout=0x00000001      (SWO Trace)
[03:10:09.228]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:09.229]    __FlashAddr=0x00000000
[03:10:09.229]    __FlashLen=0x00000000
[03:10:09.229]    __FlashArg=0x00000000
[03:10:09.229]    __FlashOp=0x00000000
[03:10:09.229]    __Result=0x00000000
[03:10:09.229]    
[03:10:09.229]    // User-defined
[03:10:09.229]    DbgMCU_CR=0x00000007
[03:10:09.229]    DbgMCU_APB1_Fz=0x00000000
[03:10:09.230]    DbgMCU_APB2_Fz=0x00000000
[03:10:09.230]    TraceClk_Pin=0x00040002
[03:10:09.230]    TraceD0_Pin=0x00040003
[03:10:09.230]    TraceD1_Pin=0x00040004
[03:10:09.230]    TraceD2_Pin=0x00040005
[03:10:09.230]    TraceD3_Pin=0x00040006
[03:10:09.230]  </debugvars>
[03:10:09.230]  
[03:10:09.231]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:10:09.231]    <block atomic="false" info="">
[03:10:09.231]      Sequence("CheckID");
[03:10:09.231]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:10:09.231]          <block atomic="false" info="">
[03:10:09.231]            __var pidr1 = 0;
[03:10:09.231]              // -> [pidr1 <= 0x00000000]
[03:10:09.231]            __var pidr2 = 0;
[03:10:09.232]              // -> [pidr2 <= 0x00000000]
[03:10:09.232]            __var jep106id = 0;
[03:10:09.232]              // -> [jep106id <= 0x00000000]
[03:10:09.232]            __var ROMTableBase = 0;
[03:10:09.232]              // -> [ROMTableBase <= 0x00000000]
[03:10:09.232]            __ap = 0;      // AHB-AP
[03:10:09.232]              // -> [__ap <= 0x00000000]
[03:10:09.232]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:10:09.233]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.233]              // -> [ROMTableBase <= 0xE00FD000]
[03:10:09.233]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:10:09.234]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.234]              // -> [pidr1 <= 0x00000004]
[03:10:09.234]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:10:09.234]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.234]              // -> [pidr2 <= 0x0000001A]
[03:10:09.234]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:10:09.235]              // -> [jep106id <= 0x00000020]
[03:10:09.235]          </block>
[03:10:09.235]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:10:09.235]            // if-block "jep106id != 0x20"
[03:10:09.235]              // =>  FALSE
[03:10:09.235]            // skip if-block "jep106id != 0x20"
[03:10:09.235]          </control>
[03:10:09.235]        </sequence>
[03:10:09.236]    </block>
[03:10:09.236]  </sequence>
[03:10:09.236]  
[03:10:09.250]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:10:09.250]  
[03:10:09.250]  <debugvars>
[03:10:09.250]    // Pre-defined
[03:10:09.250]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:09.250]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:10:09.250]    __dp=0x00000000
[03:10:09.251]    __ap=0x00000000
[03:10:09.251]    __traceout=0x00000001      (SWO Trace)
[03:10:09.251]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:09.251]    __FlashAddr=0x00000000
[03:10:09.251]    __FlashLen=0x00000000
[03:10:09.251]    __FlashArg=0x00000000
[03:10:09.251]    __FlashOp=0x00000000
[03:10:09.251]    __Result=0x00000000
[03:10:09.251]    
[03:10:09.251]    // User-defined
[03:10:09.252]    DbgMCU_CR=0x00000007
[03:10:09.252]    DbgMCU_APB1_Fz=0x00000000
[03:10:09.252]    DbgMCU_APB2_Fz=0x00000000
[03:10:09.252]    TraceClk_Pin=0x00040002
[03:10:09.252]    TraceD0_Pin=0x00040003
[03:10:09.252]    TraceD1_Pin=0x00040004
[03:10:09.252]    TraceD2_Pin=0x00040005
[03:10:09.252]    TraceD3_Pin=0x00040006
[03:10:09.253]  </debugvars>
[03:10:09.253]  
[03:10:09.253]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:10:09.253]    <block atomic="false" info="">
[03:10:09.253]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:10:09.254]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.254]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:10:09.255]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.255]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:10:09.255]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.255]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:10:09.256]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.256]    </block>
[03:10:09.256]  </sequence>
[03:10:09.256]  
[03:10:09.272]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:10:09.272]  
[03:10:09.272]  <debugvars>
[03:10:09.273]    // Pre-defined
[03:10:09.273]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:09.273]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:10:09.273]    __dp=0x00000000
[03:10:09.273]    __ap=0x00000000
[03:10:09.273]    __traceout=0x00000001      (SWO Trace)
[03:10:09.274]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:09.274]    __FlashAddr=0x00000000
[03:10:09.274]    __FlashLen=0x00000000
[03:10:09.274]    __FlashArg=0x00000000
[03:10:09.274]    __FlashOp=0x00000000
[03:10:09.274]    __Result=0x00000000
[03:10:09.275]    
[03:10:09.275]    // User-defined
[03:10:09.275]    DbgMCU_CR=0x00000007
[03:10:09.275]    DbgMCU_APB1_Fz=0x00000000
[03:10:09.275]    DbgMCU_APB2_Fz=0x00000000
[03:10:09.275]    TraceClk_Pin=0x00040002
[03:10:09.275]    TraceD0_Pin=0x00040003
[03:10:09.275]    TraceD1_Pin=0x00040004
[03:10:09.275]    TraceD2_Pin=0x00040005
[03:10:09.275]    TraceD3_Pin=0x00040006
[03:10:09.275]  </debugvars>
[03:10:09.275]  
[03:10:09.275]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:10:09.275]    <block atomic="false" info="">
[03:10:09.276]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:10:09.276]        // -> [traceSWO <= 0x00000001]
[03:10:09.276]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:10:09.276]        // -> [traceTPIU <= 0x00000000]
[03:10:09.276]    </block>
[03:10:09.276]    <control if="traceSWO" while="" timeout="0" info="">
[03:10:09.276]      // if-block "traceSWO"
[03:10:09.276]        // =>  TRUE
[03:10:09.277]      <block atomic="false" info="">
[03:10:09.277]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:10:09.277]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:10:09.277]            <block atomic="false" info="">
[03:10:09.277]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:10:09.277]                // -> [dbgmcu_val <= 0x00000000]
[03:10:09.277]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:10:09.277]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:10:09.278]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:10:09.278]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.278]                // -> [dbgmcu_val <= 0x00000007]
[03:10:09.278]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:10:09.279]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:10:09.279]              Sequence("ConfigureTraceSWOPin");
[03:10:09.279]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:10:09.279]                  <block atomic="false" info="">
[03:10:09.279]                    __var pin     = 0;
[03:10:09.279]                      // -> [pin <= 0x00000000]
[03:10:09.279]                    __var port    = 0;
[03:10:09.279]                      // -> [port <= 0x00000000]
[03:10:09.280]                    __var portAdr = 0;
[03:10:09.280]                      // -> [portAdr <= 0x00000000]
[03:10:09.280]                    __var pos     = 0;
[03:10:09.280]                      // -> [pos <= 0x00000000]
[03:10:09.280]                    __var SWO_Pin = 0x00010003;          // PB3
[03:10:09.280]                      // -> [SWO_Pin <= 0x00010003]
[03:10:09.280]                  </block>
[03:10:09.280]                  <block atomic="false" info="configure SWO">
[03:10:09.281]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:10:09.281]                      // -> [pin <= 0x00000003]
[03:10:09.281]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:10:09.281]                      // -> [port <= 0x00000001]
[03:10:09.281]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:10:09.281]                      // -> [portAdr <= 0x40020400]
[03:10:09.281]                    pos = pin * 2;
[03:10:09.281]                      // -> [pos <= 0x00000006]
[03:10:09.282]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:10:09.282]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.282]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.283]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:10:09.283]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.283]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.284]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:10:09.284]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.285]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.285]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:10:09.285]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.286]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.286]                  </block>
[03:10:09.286]                  <control if="pin <  8" while="" timeout="0" info="">
[03:10:09.286]                    // if-block "pin <  8"
[03:10:09.286]                      // =>  TRUE
[03:10:09.286]                    <block atomic="false" info="">
[03:10:09.286]                      pos = ((pin    ) & 7) * 4;
[03:10:09.287]                        // -> [pos <= 0x0000000C]
[03:10:09.287]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:10:09.287]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.288]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.288]                    </block>
[03:10:09.288]                    // end if-block "pin <  8"
[03:10:09.288]                  </control>
[03:10:09.288]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:10:09.288]                    // if-block "pin >= 8"
[03:10:09.288]                      // =>  FALSE
[03:10:09.289]                    // skip if-block "pin >= 8"
[03:10:09.289]                  </control>
[03:10:09.289]                </sequence>
[03:10:09.289]            </block>
[03:10:09.289]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:10:09.289]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:10:09.290]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.290]            </block>
[03:10:09.290]          </sequence>
[03:10:09.290]      </block>
[03:10:09.290]      // end if-block "traceSWO"
[03:10:09.290]    </control>
[03:10:09.290]    <control if="traceTPIU" while="" timeout="0" info="">
[03:10:09.290]      // if-block "traceTPIU"
[03:10:09.290]        // =>  FALSE
[03:10:09.291]      // skip if-block "traceTPIU"
[03:10:09.291]    </control>
[03:10:09.291]  </sequence>
[03:10:09.291]  
[03:10:09.294]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:10:09.294]  
[03:10:09.295]  <debugvars>
[03:10:09.295]    // Pre-defined
[03:10:09.295]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:09.295]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:10:09.295]    __dp=0x00000000
[03:10:09.296]    __ap=0x00000000
[03:10:09.296]    __traceout=0x00000001      (SWO Trace)
[03:10:09.296]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:09.296]    __FlashAddr=0x00000000
[03:10:09.296]    __FlashLen=0x00000000
[03:10:09.297]    __FlashArg=0x00000000
[03:10:09.297]    __FlashOp=0x00000000
[03:10:09.297]    __Result=0x00000000
[03:10:09.297]    
[03:10:09.297]    // User-defined
[03:10:09.297]    DbgMCU_CR=0x00000007
[03:10:09.297]    DbgMCU_APB1_Fz=0x00000000
[03:10:09.298]    DbgMCU_APB2_Fz=0x00000000
[03:10:09.298]    TraceClk_Pin=0x00040002
[03:10:09.298]    TraceD0_Pin=0x00040003
[03:10:09.298]    TraceD1_Pin=0x00040004
[03:10:09.298]    TraceD2_Pin=0x00040005
[03:10:09.298]    TraceD3_Pin=0x00040006
[03:10:09.299]  </debugvars>
[03:10:09.299]  
[03:10:09.299]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:10:09.299]    <block atomic="false" info="">
[03:10:09.299]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:10:09.299]        // -> [traceSWO <= 0x00000001]
[03:10:09.299]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:10:09.299]        // -> [traceTPIU <= 0x00000000]
[03:10:09.300]    </block>
[03:10:09.300]    <control if="traceSWO" while="" timeout="0" info="">
[03:10:09.300]      // if-block "traceSWO"
[03:10:09.300]        // =>  TRUE
[03:10:09.300]      <block atomic="false" info="">
[03:10:09.300]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:10:09.300]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:10:09.300]            <block atomic="false" info="">
[03:10:09.300]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:10:09.301]                // -> [dbgmcu_val <= 0x00000000]
[03:10:09.301]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:10:09.301]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:10:09.301]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:10:09.301]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.301]                // -> [dbgmcu_val <= 0x00000007]
[03:10:09.302]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:10:09.302]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:10:09.302]              Sequence("ConfigureTraceSWOPin");
[03:10:09.302]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:10:09.302]                  <block atomic="false" info="">
[03:10:09.302]                    __var pin     = 0;
[03:10:09.303]                      // -> [pin <= 0x00000000]
[03:10:09.303]                    __var port    = 0;
[03:10:09.303]                      // -> [port <= 0x00000000]
[03:10:09.303]                    __var portAdr = 0;
[03:10:09.303]                      // -> [portAdr <= 0x00000000]
[03:10:09.303]                    __var pos     = 0;
[03:10:09.303]                      // -> [pos <= 0x00000000]
[03:10:09.303]                    __var SWO_Pin = 0x00010003;          // PB3
[03:10:09.303]                      // -> [SWO_Pin <= 0x00010003]
[03:10:09.304]                  </block>
[03:10:09.304]                  <block atomic="false" info="configure SWO">
[03:10:09.304]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:10:09.304]                      // -> [pin <= 0x00000003]
[03:10:09.304]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:10:09.304]                      // -> [port <= 0x00000001]
[03:10:09.304]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:10:09.304]                      // -> [portAdr <= 0x40020400]
[03:10:09.304]                    pos = pin * 2;
[03:10:09.305]                      // -> [pos <= 0x00000006]
[03:10:09.305]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:10:09.305]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.305]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.306]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:10:09.306]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.306]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.307]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:10:09.307]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.307]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.307]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:10:09.308]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.308]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.308]                  </block>
[03:10:09.308]                  <control if="pin <  8" while="" timeout="0" info="">
[03:10:09.309]                    // if-block "pin <  8"
[03:10:09.309]                      // =>  TRUE
[03:10:09.309]                    <block atomic="false" info="">
[03:10:09.309]                      pos = ((pin    ) & 7) * 4;
[03:10:09.309]                        // -> [pos <= 0x0000000C]
[03:10:09.309]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:10:09.310]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.310]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.310]                    </block>
[03:10:09.310]                    // end if-block "pin <  8"
[03:10:09.310]                  </control>
[03:10:09.310]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:10:09.311]                    // if-block "pin >= 8"
[03:10:09.311]                      // =>  FALSE
[03:10:09.311]                    // skip if-block "pin >= 8"
[03:10:09.311]                  </control>
[03:10:09.311]                </sequence>
[03:10:09.311]            </block>
[03:10:09.311]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:10:09.311]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:10:09.312]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.312]            </block>
[03:10:09.312]          </sequence>
[03:10:09.312]      </block>
[03:10:09.312]      // end if-block "traceSWO"
[03:10:09.312]    </control>
[03:10:09.312]    <control if="traceTPIU" while="" timeout="0" info="">
[03:10:09.313]      // if-block "traceTPIU"
[03:10:09.313]        // =>  FALSE
[03:10:09.313]      // skip if-block "traceTPIU"
[03:10:09.313]    </control>
[03:10:09.313]  </sequence>
[03:10:09.313]  
[03:10:09.526]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:10:09.526]  
[03:10:09.527]  <debugvars>
[03:10:09.527]    // Pre-defined
[03:10:09.527]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:09.527]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:10:09.527]    __dp=0x00000000
[03:10:09.527]    __ap=0x00000000
[03:10:09.527]    __traceout=0x00000001      (SWO Trace)
[03:10:09.527]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:09.528]    __FlashAddr=0x00000000
[03:10:09.528]    __FlashLen=0x00000000
[03:10:09.528]    __FlashArg=0x00000000
[03:10:09.528]    __FlashOp=0x00000000
[03:10:09.528]    __Result=0x00000000
[03:10:09.528]    
[03:10:09.528]    // User-defined
[03:10:09.528]    DbgMCU_CR=0x00000007
[03:10:09.528]    DbgMCU_APB1_Fz=0x00000000
[03:10:09.529]    DbgMCU_APB2_Fz=0x00000000
[03:10:09.529]    TraceClk_Pin=0x00040002
[03:10:09.529]    TraceD0_Pin=0x00040003
[03:10:09.529]    TraceD1_Pin=0x00040004
[03:10:09.529]    TraceD2_Pin=0x00040005
[03:10:09.529]    TraceD3_Pin=0x00040006
[03:10:09.530]  </debugvars>
[03:10:09.530]  
[03:10:09.530]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:10:09.530]    <block atomic="false" info="">
[03:10:09.530]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:10:09.530]        // -> [traceSWO <= 0x00000001]
[03:10:09.530]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:10:09.530]        // -> [traceTPIU <= 0x00000000]
[03:10:09.531]    </block>
[03:10:09.531]    <control if="traceSWO" while="" timeout="0" info="">
[03:10:09.531]      // if-block "traceSWO"
[03:10:09.531]        // =>  TRUE
[03:10:09.531]      <block atomic="false" info="">
[03:10:09.531]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:10:09.531]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:10:09.531]            <block atomic="false" info="">
[03:10:09.532]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:10:09.532]                // -> [dbgmcu_val <= 0x00000000]
[03:10:09.532]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:10:09.532]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:10:09.532]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:10:09.532]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.533]                // -> [dbgmcu_val <= 0x00000007]
[03:10:09.533]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:10:09.533]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:10:09.533]              Sequence("ConfigureTraceSWOPin");
[03:10:09.533]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:10:09.533]                  <block atomic="false" info="">
[03:10:09.533]                    __var pin     = 0;
[03:10:09.534]                      // -> [pin <= 0x00000000]
[03:10:09.534]                    __var port    = 0;
[03:10:09.534]                      // -> [port <= 0x00000000]
[03:10:09.534]                    __var portAdr = 0;
[03:10:09.534]                      // -> [portAdr <= 0x00000000]
[03:10:09.534]                    __var pos     = 0;
[03:10:09.534]                      // -> [pos <= 0x00000000]
[03:10:09.534]                    __var SWO_Pin = 0x00010003;          // PB3
[03:10:09.535]                      // -> [SWO_Pin <= 0x00010003]
[03:10:09.535]                  </block>
[03:10:09.535]                  <block atomic="false" info="configure SWO">
[03:10:09.535]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:10:09.535]                      // -> [pin <= 0x00000003]
[03:10:09.535]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:10:09.535]                      // -> [port <= 0x00000001]
[03:10:09.535]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:10:09.536]                      // -> [portAdr <= 0x40020400]
[03:10:09.536]                    pos = pin * 2;
[03:10:09.536]                      // -> [pos <= 0x00000006]
[03:10:09.536]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:10:09.536]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.537]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.537]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:10:09.537]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.538]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.538]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:10:09.538]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.539]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.539]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:10:09.539]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.540]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.540]                  </block>
[03:10:09.540]                  <control if="pin <  8" while="" timeout="0" info="">
[03:10:09.540]                    // if-block "pin <  8"
[03:10:09.540]                      // =>  TRUE
[03:10:09.540]                    <block atomic="false" info="">
[03:10:09.540]                      pos = ((pin    ) & 7) * 4;
[03:10:09.541]                        // -> [pos <= 0x0000000C]
[03:10:09.541]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:10:09.541]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.542]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.542]                    </block>
[03:10:09.542]                    // end if-block "pin <  8"
[03:10:09.542]                  </control>
[03:10:09.542]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:10:09.542]                    // if-block "pin >= 8"
[03:10:09.542]                      // =>  FALSE
[03:10:09.542]                    // skip if-block "pin >= 8"
[03:10:09.542]                  </control>
[03:10:09.543]                </sequence>
[03:10:09.543]            </block>
[03:10:09.543]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:10:09.543]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:10:09.543]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:09.543]            </block>
[03:10:09.544]          </sequence>
[03:10:09.544]      </block>
[03:10:09.544]      // end if-block "traceSWO"
[03:10:09.544]    </control>
[03:10:09.544]    <control if="traceTPIU" while="" timeout="0" info="">
[03:10:09.544]      // if-block "traceTPIU"
[03:10:09.544]        // =>  FALSE
[03:10:09.544]      // skip if-block "traceTPIU"
[03:10:09.544]    </control>
[03:10:09.545]  </sequence>
[03:10:09.545]  
[03:10:27.831]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:10:27.831]  
[03:10:27.831]  <debugvars>
[03:10:27.831]    // Pre-defined
[03:10:27.831]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:27.831]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:10:27.832]    __dp=0x00000000
[03:10:27.832]    __ap=0x00000000
[03:10:27.832]    __traceout=0x00000001      (SWO Trace)
[03:10:27.832]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:27.832]    __FlashAddr=0x00000000
[03:10:27.832]    __FlashLen=0x00000000
[03:10:27.833]    __FlashArg=0x00000000
[03:10:27.833]    __FlashOp=0x00000000
[03:10:27.833]    __Result=0x00000000
[03:10:27.833]    
[03:10:27.833]    // User-defined
[03:10:27.833]    DbgMCU_CR=0x00000007
[03:10:27.833]    DbgMCU_APB1_Fz=0x00000000
[03:10:27.834]    DbgMCU_APB2_Fz=0x00000000
[03:10:27.834]    TraceClk_Pin=0x00040002
[03:10:27.834]    TraceD0_Pin=0x00040003
[03:10:27.834]    TraceD1_Pin=0x00040004
[03:10:27.834]    TraceD2_Pin=0x00040005
[03:10:27.834]    TraceD3_Pin=0x00040006
[03:10:27.834]  </debugvars>
[03:10:27.835]  
[03:10:27.835]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:10:27.835]    <block atomic="false" info="">
[03:10:27.835]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:10:27.835]        // -> [traceSWO <= 0x00000001]
[03:10:27.836]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:10:27.836]        // -> [traceTPIU <= 0x00000000]
[03:10:27.836]    </block>
[03:10:27.836]    <control if="traceSWO" while="" timeout="0" info="">
[03:10:27.836]      // if-block "traceSWO"
[03:10:27.836]        // =>  TRUE
[03:10:27.836]      <block atomic="false" info="">
[03:10:27.837]        Sequence("DisableTraceSWO");
[03:10:27.837]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:10:27.837]            <block atomic="false" info="">
[03:10:27.837]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:10:27.837]                // -> [dbgmcu_val <= 0x00000000]
[03:10:27.838]            </block>
[03:10:27.838]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:10:27.838]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:10:27.838]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:10:27.839]                // -> [dbgmcu_val <= 0x00000007]
[03:10:27.839]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:10:27.839]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:27.839]            </block>
[03:10:27.839]          </sequence>
[03:10:27.840]      </block>
[03:10:27.840]      // end if-block "traceSWO"
[03:10:27.840]    </control>
[03:10:27.840]    <control if="traceTPIU" while="" timeout="0" info="">
[03:10:27.840]      // if-block "traceTPIU"
[03:10:27.840]        // =>  FALSE
[03:10:27.840]      // skip if-block "traceTPIU"
[03:10:27.841]    </control>
[03:10:27.841]  </sequence>
[03:10:27.841]  
[03:11:35.581]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:11:35.581]  
[03:11:35.581]  <debugvars>
[03:11:35.582]    // Pre-defined
[03:11:35.582]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:11:35.582]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:11:35.582]    __dp=0x00000000
[03:11:35.582]    __ap=0x00000000
[03:11:35.582]    __traceout=0x00000001      (SWO Trace)
[03:11:35.583]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:11:35.583]    __FlashAddr=0x00000000
[03:11:35.583]    __FlashLen=0x00000000
[03:11:35.583]    __FlashArg=0x00000000
[03:11:35.583]    __FlashOp=0x00000000
[03:11:35.583]    __Result=0x00000000
[03:11:35.584]    
[03:11:35.584]    // User-defined
[03:11:35.584]    DbgMCU_CR=0x00000007
[03:11:35.584]    DbgMCU_APB1_Fz=0x00000000
[03:11:35.584]    DbgMCU_APB2_Fz=0x00000000
[03:11:35.584]    TraceClk_Pin=0x00040002
[03:11:35.585]    TraceD0_Pin=0x00040003
[03:11:35.585]    TraceD1_Pin=0x00040004
[03:11:35.585]    TraceD2_Pin=0x00040005
[03:11:35.585]    TraceD3_Pin=0x00040006
[03:11:35.585]  </debugvars>
[03:11:35.585]  
[03:11:35.586]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:11:35.586]    <block atomic="false" info="">
[03:11:35.586]      Sequence("CheckID");
[03:11:35.586]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:11:35.586]          <block atomic="false" info="">
[03:11:35.586]            __var pidr1 = 0;
[03:11:35.587]              // -> [pidr1 <= 0x00000000]
[03:11:35.587]            __var pidr2 = 0;
[03:11:35.587]              // -> [pidr2 <= 0x00000000]
[03:11:35.587]            __var jep106id = 0;
[03:11:35.587]              // -> [jep106id <= 0x00000000]
[03:11:35.587]            __var ROMTableBase = 0;
[03:11:35.588]              // -> [ROMTableBase <= 0x00000000]
[03:11:35.588]            __ap = 0;      // AHB-AP
[03:11:35.588]              // -> [__ap <= 0x00000000]
[03:11:35.588]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:11:35.588]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:11:35.589]              // -> [ROMTableBase <= 0xE00FD000]
[03:11:35.589]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:11:35.589]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:11:35.589]              // -> [pidr1 <= 0x00000004]
[03:11:35.590]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:11:35.590]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:11:35.590]              // -> [pidr2 <= 0x0000001A]
[03:11:35.590]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:11:35.590]              // -> [jep106id <= 0x00000020]
[03:11:35.591]          </block>
[03:11:35.591]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:11:35.591]            // if-block "jep106id != 0x20"
[03:11:35.591]              // =>  FALSE
[03:11:35.591]            // skip if-block "jep106id != 0x20"
[03:11:35.592]          </control>
[03:11:35.592]        </sequence>
[03:11:35.592]    </block>
[03:11:35.592]  </sequence>
[03:11:35.592]  
[03:11:35.606]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:11:35.606]  
[03:11:35.607]  <debugvars>
[03:11:35.607]    // Pre-defined
[03:11:35.607]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:11:35.607]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:11:35.607]    __dp=0x00000000
[03:11:35.608]    __ap=0x00000000
[03:11:35.608]    __traceout=0x00000001      (SWO Trace)
[03:11:35.608]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:11:35.608]    __FlashAddr=0x00000000
[03:11:35.608]    __FlashLen=0x00000000
[03:11:35.609]    __FlashArg=0x00000000
[03:11:35.609]    __FlashOp=0x00000000
[03:11:35.609]    __Result=0x00000000
[03:11:35.609]    
[03:11:35.609]    // User-defined
[03:11:35.609]    DbgMCU_CR=0x00000007
[03:11:35.610]    DbgMCU_APB1_Fz=0x00000000
[03:11:35.610]    DbgMCU_APB2_Fz=0x00000000
[03:11:35.610]    TraceClk_Pin=0x00040002
[03:11:35.610]    TraceD0_Pin=0x00040003
[03:11:35.610]    TraceD1_Pin=0x00040004
[03:11:35.611]    TraceD2_Pin=0x00040005
[03:11:35.611]    TraceD3_Pin=0x00040006
[03:11:35.611]  </debugvars>
[03:11:35.611]  
[03:11:35.611]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:11:35.611]    <block atomic="false" info="">
[03:11:35.612]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:11:35.612]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:11:35.612]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:11:35.613]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:11:35.613]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:11:35.614]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:11:35.614]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:11:35.615]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:11:35.615]    </block>
[03:11:35.615]  </sequence>
[03:11:35.615]  
[03:12:06.398]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:12:06.398]  
[03:12:06.398]  <debugvars>
[03:12:06.398]    // Pre-defined
[03:12:06.398]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:12:06.399]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:12:06.399]    __dp=0x00000000
[03:12:06.399]    __ap=0x00000000
[03:12:06.399]    __traceout=0x00000001      (SWO Trace)
[03:12:06.399]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:12:06.400]    __FlashAddr=0x00000000
[03:12:06.400]    __FlashLen=0x00000000
[03:12:06.400]    __FlashArg=0x00000000
[03:12:06.400]    __FlashOp=0x00000000
[03:12:06.400]    __Result=0x00000000
[03:12:06.401]    
[03:12:06.401]    // User-defined
[03:12:06.401]    DbgMCU_CR=0x00000007
[03:12:06.401]    DbgMCU_APB1_Fz=0x00000000
[03:12:06.401]    DbgMCU_APB2_Fz=0x00000000
[03:12:06.401]    TraceClk_Pin=0x00040002
[03:12:06.402]    TraceD0_Pin=0x00040003
[03:12:06.402]    TraceD1_Pin=0x00040004
[03:12:06.402]    TraceD2_Pin=0x00040005
[03:12:06.402]    TraceD3_Pin=0x00040006
[03:12:06.402]  </debugvars>
[03:12:06.403]  
[03:12:06.403]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:12:06.403]    <block atomic="false" info="">
[03:12:06.403]      Sequence("CheckID");
[03:12:06.403]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:12:06.404]          <block atomic="false" info="">
[03:12:06.404]            __var pidr1 = 0;
[03:12:06.404]              // -> [pidr1 <= 0x00000000]
[03:12:06.404]            __var pidr2 = 0;
[03:12:06.404]              // -> [pidr2 <= 0x00000000]
[03:12:06.404]            __var jep106id = 0;
[03:12:06.405]              // -> [jep106id <= 0x00000000]
[03:12:06.405]            __var ROMTableBase = 0;
[03:12:06.405]              // -> [ROMTableBase <= 0x00000000]
[03:12:06.405]            __ap = 0;      // AHB-AP
[03:12:06.405]              // -> [__ap <= 0x00000000]
[03:12:06.405]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:12:06.406]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.406]              // -> [ROMTableBase <= 0xE00FD000]
[03:12:06.406]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:12:06.407]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.407]              // -> [pidr1 <= 0x00000004]
[03:12:06.407]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:12:06.408]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.408]              // -> [pidr2 <= 0x0000001A]
[03:12:06.408]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:12:06.408]              // -> [jep106id <= 0x00000020]
[03:12:06.408]          </block>
[03:12:06.408]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:12:06.409]            // if-block "jep106id != 0x20"
[03:12:06.409]              // =>  FALSE
[03:12:06.409]            // skip if-block "jep106id != 0x20"
[03:12:06.409]          </control>
[03:12:06.409]        </sequence>
[03:12:06.409]    </block>
[03:12:06.410]  </sequence>
[03:12:06.410]  
[03:12:06.424]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:12:06.424]  
[03:12:06.424]  <debugvars>
[03:12:06.424]    // Pre-defined
[03:12:06.424]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:12:06.424]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:12:06.424]    __dp=0x00000000
[03:12:06.425]    __ap=0x00000000
[03:12:06.425]    __traceout=0x00000001      (SWO Trace)
[03:12:06.425]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:12:06.425]    __FlashAddr=0x00000000
[03:12:06.425]    __FlashLen=0x00000000
[03:12:06.426]    __FlashArg=0x00000000
[03:12:06.426]    __FlashOp=0x00000000
[03:12:06.426]    __Result=0x00000000
[03:12:06.426]    
[03:12:06.426]    // User-defined
[03:12:06.426]    DbgMCU_CR=0x00000007
[03:12:06.426]    DbgMCU_APB1_Fz=0x00000000
[03:12:06.427]    DbgMCU_APB2_Fz=0x00000000
[03:12:06.427]    TraceClk_Pin=0x00040002
[03:12:06.427]    TraceD0_Pin=0x00040003
[03:12:06.427]    TraceD1_Pin=0x00040004
[03:12:06.427]    TraceD2_Pin=0x00040005
[03:12:06.427]    TraceD3_Pin=0x00040006
[03:12:06.428]  </debugvars>
[03:12:06.428]  
[03:12:06.428]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:12:06.428]    <block atomic="false" info="">
[03:12:06.428]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:12:06.429]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.429]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:12:06.429]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.430]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:12:06.430]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.430]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:12:06.431]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.431]    </block>
[03:12:06.431]  </sequence>
[03:12:06.431]  
[03:12:06.447]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:12:06.447]  
[03:12:06.447]  <debugvars>
[03:12:06.447]    // Pre-defined
[03:12:06.447]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:12:06.448]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:12:06.448]    __dp=0x00000000
[03:12:06.448]    __ap=0x00000000
[03:12:06.448]    __traceout=0x00000001      (SWO Trace)
[03:12:06.448]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:12:06.448]    __FlashAddr=0x00000000
[03:12:06.449]    __FlashLen=0x00000000
[03:12:06.449]    __FlashArg=0x00000000
[03:12:06.449]    __FlashOp=0x00000000
[03:12:06.449]    __Result=0x00000000
[03:12:06.449]    
[03:12:06.449]    // User-defined
[03:12:06.449]    DbgMCU_CR=0x00000007
[03:12:06.450]    DbgMCU_APB1_Fz=0x00000000
[03:12:06.450]    DbgMCU_APB2_Fz=0x00000000
[03:12:06.450]    TraceClk_Pin=0x00040002
[03:12:06.450]    TraceD0_Pin=0x00040003
[03:12:06.450]    TraceD1_Pin=0x00040004
[03:12:06.451]    TraceD2_Pin=0x00040005
[03:12:06.451]    TraceD3_Pin=0x00040006
[03:12:06.451]  </debugvars>
[03:12:06.451]  
[03:12:06.451]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:12:06.451]    <block atomic="false" info="">
[03:12:06.452]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:12:06.452]        // -> [traceSWO <= 0x00000001]
[03:12:06.452]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:12:06.452]        // -> [traceTPIU <= 0x00000000]
[03:12:06.452]    </block>
[03:12:06.452]    <control if="traceSWO" while="" timeout="0" info="">
[03:12:06.452]      // if-block "traceSWO"
[03:12:06.453]        // =>  TRUE
[03:12:06.453]      <block atomic="false" info="">
[03:12:06.453]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:12:06.453]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:12:06.453]            <block atomic="false" info="">
[03:12:06.453]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:12:06.454]                // -> [dbgmcu_val <= 0x00000000]
[03:12:06.454]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:12:06.454]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:12:06.454]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:12:06.455]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.455]                // -> [dbgmcu_val <= 0x00000007]
[03:12:06.455]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:12:06.455]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:12:06.455]              Sequence("ConfigureTraceSWOPin");
[03:12:06.455]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:12:06.456]                  <block atomic="false" info="">
[03:12:06.456]                    __var pin     = 0;
[03:12:06.456]                      // -> [pin <= 0x00000000]
[03:12:06.456]                    __var port    = 0;
[03:12:06.456]                      // -> [port <= 0x00000000]
[03:12:06.456]                    __var portAdr = 0;
[03:12:06.456]                      // -> [portAdr <= 0x00000000]
[03:12:06.457]                    __var pos     = 0;
[03:12:06.457]                      // -> [pos <= 0x00000000]
[03:12:06.457]                    __var SWO_Pin = 0x00010003;          // PB3
[03:12:06.457]                      // -> [SWO_Pin <= 0x00010003]
[03:12:06.457]                  </block>
[03:12:06.457]                  <block atomic="false" info="configure SWO">
[03:12:06.457]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:12:06.457]                      // -> [pin <= 0x00000003]
[03:12:06.458]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:12:06.458]                      // -> [port <= 0x00000001]
[03:12:06.458]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:12:06.458]                      // -> [portAdr <= 0x40020400]
[03:12:06.458]                    pos = pin * 2;
[03:12:06.458]                      // -> [pos <= 0x00000006]
[03:12:06.458]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:12:06.459]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.460]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.460]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:12:06.460]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.461]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.461]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:12:06.462]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.462]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.462]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:12:06.463]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.464]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.464]                  </block>
[03:12:06.464]                  <control if="pin <  8" while="" timeout="0" info="">
[03:12:06.464]                    // if-block "pin <  8"
[03:12:06.465]                      // =>  TRUE
[03:12:06.465]                    <block atomic="false" info="">
[03:12:06.465]                      pos = ((pin    ) & 7) * 4;
[03:12:06.465]                        // -> [pos <= 0x0000000C]
[03:12:06.465]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:12:06.466]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.466]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.467]                    </block>
[03:12:06.467]                    // end if-block "pin <  8"
[03:12:06.467]                  </control>
[03:12:06.467]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:12:06.467]                    // if-block "pin >= 8"
[03:12:06.468]                      // =>  FALSE
[03:12:06.468]                    // skip if-block "pin >= 8"
[03:12:06.468]                  </control>
[03:12:06.468]                </sequence>
[03:12:06.468]            </block>
[03:12:06.468]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:12:06.469]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:12:06.469]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.469]            </block>
[03:12:06.470]          </sequence>
[03:12:06.470]      </block>
[03:12:06.470]      // end if-block "traceSWO"
[03:12:06.470]    </control>
[03:12:06.470]    <control if="traceTPIU" while="" timeout="0" info="">
[03:12:06.470]      // if-block "traceTPIU"
[03:12:06.471]        // =>  FALSE
[03:12:06.471]      // skip if-block "traceTPIU"
[03:12:06.471]    </control>
[03:12:06.471]  </sequence>
[03:12:06.471]  
[03:12:06.475]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:12:06.475]  
[03:12:06.475]  <debugvars>
[03:12:06.476]    // Pre-defined
[03:12:06.476]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:12:06.476]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:12:06.476]    __dp=0x00000000
[03:12:06.476]    __ap=0x00000000
[03:12:06.477]    __traceout=0x00000001      (SWO Trace)
[03:12:06.477]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:12:06.477]    __FlashAddr=0x00000000
[03:12:06.477]    __FlashLen=0x00000000
[03:12:06.477]    __FlashArg=0x00000000
[03:12:06.478]    __FlashOp=0x00000000
[03:12:06.478]    __Result=0x00000000
[03:12:06.478]    
[03:12:06.478]    // User-defined
[03:12:06.478]    DbgMCU_CR=0x00000007
[03:12:06.478]    DbgMCU_APB1_Fz=0x00000000
[03:12:06.478]    DbgMCU_APB2_Fz=0x00000000
[03:12:06.479]    TraceClk_Pin=0x00040002
[03:12:06.479]    TraceD0_Pin=0x00040003
[03:12:06.479]    TraceD1_Pin=0x00040004
[03:12:06.479]    TraceD2_Pin=0x00040005
[03:12:06.479]    TraceD3_Pin=0x00040006
[03:12:06.480]  </debugvars>
[03:12:06.480]  
[03:12:06.480]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:12:06.480]    <block atomic="false" info="">
[03:12:06.480]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:12:06.480]        // -> [traceSWO <= 0x00000001]
[03:12:06.481]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:12:06.481]        // -> [traceTPIU <= 0x00000000]
[03:12:06.481]    </block>
[03:12:06.481]    <control if="traceSWO" while="" timeout="0" info="">
[03:12:06.481]      // if-block "traceSWO"
[03:12:06.481]        // =>  TRUE
[03:12:06.482]      <block atomic="false" info="">
[03:12:06.482]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:12:06.482]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:12:06.482]            <block atomic="false" info="">
[03:12:06.482]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:12:06.483]                // -> [dbgmcu_val <= 0x00000000]
[03:12:06.483]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:12:06.483]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:12:06.483]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:12:06.484]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.484]                // -> [dbgmcu_val <= 0x00000007]
[03:12:06.484]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:12:06.484]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:12:06.484]              Sequence("ConfigureTraceSWOPin");
[03:12:06.485]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:12:06.485]                  <block atomic="false" info="">
[03:12:06.485]                    __var pin     = 0;
[03:12:06.485]                      // -> [pin <= 0x00000000]
[03:12:06.485]                    __var port    = 0;
[03:12:06.485]                      // -> [port <= 0x00000000]
[03:12:06.485]                    __var portAdr = 0;
[03:12:06.485]                      // -> [portAdr <= 0x00000000]
[03:12:06.486]                    __var pos     = 0;
[03:12:06.486]                      // -> [pos <= 0x00000000]
[03:12:06.486]                    __var SWO_Pin = 0x00010003;          // PB3
[03:12:06.486]                      // -> [SWO_Pin <= 0x00010003]
[03:12:06.486]                  </block>
[03:12:06.486]                  <block atomic="false" info="configure SWO">
[03:12:06.486]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:12:06.487]                      // -> [pin <= 0x00000003]
[03:12:06.487]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:12:06.487]                      // -> [port <= 0x00000001]
[03:12:06.487]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:12:06.487]                      // -> [portAdr <= 0x40020400]
[03:12:06.487]                    pos = pin * 2;
[03:12:06.487]                      // -> [pos <= 0x00000006]
[03:12:06.488]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:12:06.488]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.488]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.489]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:12:06.489]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.489]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.490]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:12:06.490]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.490]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.491]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:12:06.491]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.491]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.492]                  </block>
[03:12:06.492]                  <control if="pin <  8" while="" timeout="0" info="">
[03:12:06.492]                    // if-block "pin <  8"
[03:12:06.492]                      // =>  TRUE
[03:12:06.492]                    <block atomic="false" info="">
[03:12:06.492]                      pos = ((pin    ) & 7) * 4;
[03:12:06.492]                        // -> [pos <= 0x0000000C]
[03:12:06.493]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:12:06.493]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.493]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.494]                    </block>
[03:12:06.494]                    // end if-block "pin <  8"
[03:12:06.494]                  </control>
[03:12:06.494]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:12:06.494]                    // if-block "pin >= 8"
[03:12:06.494]                      // =>  FALSE
[03:12:06.495]                    // skip if-block "pin >= 8"
[03:12:06.495]                  </control>
[03:12:06.495]                </sequence>
[03:12:06.495]            </block>
[03:12:06.495]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:12:06.495]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:12:06.496]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.496]            </block>
[03:12:06.496]          </sequence>
[03:12:06.496]      </block>
[03:12:06.496]      // end if-block "traceSWO"
[03:12:06.496]    </control>
[03:12:06.497]    <control if="traceTPIU" while="" timeout="0" info="">
[03:12:06.497]      // if-block "traceTPIU"
[03:12:06.497]        // =>  FALSE
[03:12:06.497]      // skip if-block "traceTPIU"
[03:12:06.497]    </control>
[03:12:06.497]  </sequence>
[03:12:06.497]  
[03:12:06.713]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:12:06.713]  
[03:12:06.713]  <debugvars>
[03:12:06.713]    // Pre-defined
[03:12:06.713]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:12:06.713]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:12:06.714]    __dp=0x00000000
[03:12:06.714]    __ap=0x00000000
[03:12:06.714]    __traceout=0x00000001      (SWO Trace)
[03:12:06.714]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:12:06.714]    __FlashAddr=0x00000000
[03:12:06.715]    __FlashLen=0x00000000
[03:12:06.715]    __FlashArg=0x00000000
[03:12:06.715]    __FlashOp=0x00000000
[03:12:06.715]    __Result=0x00000000
[03:12:06.715]    
[03:12:06.715]    // User-defined
[03:12:06.715]    DbgMCU_CR=0x00000007
[03:12:06.716]    DbgMCU_APB1_Fz=0x00000000
[03:12:06.716]    DbgMCU_APB2_Fz=0x00000000
[03:12:06.716]    TraceClk_Pin=0x00040002
[03:12:06.716]    TraceD0_Pin=0x00040003
[03:12:06.716]    TraceD1_Pin=0x00040004
[03:12:06.716]    TraceD2_Pin=0x00040005
[03:12:06.717]    TraceD3_Pin=0x00040006
[03:12:06.717]  </debugvars>
[03:12:06.717]  
[03:12:06.717]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:12:06.717]    <block atomic="false" info="">
[03:12:06.717]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:12:06.718]        // -> [traceSWO <= 0x00000001]
[03:12:06.718]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:12:06.718]        // -> [traceTPIU <= 0x00000000]
[03:12:06.718]    </block>
[03:12:06.718]    <control if="traceSWO" while="" timeout="0" info="">
[03:12:06.718]      // if-block "traceSWO"
[03:12:06.719]        // =>  TRUE
[03:12:06.719]      <block atomic="false" info="">
[03:12:06.719]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:12:06.719]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:12:06.719]            <block atomic="false" info="">
[03:12:06.719]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:12:06.720]                // -> [dbgmcu_val <= 0x00000000]
[03:12:06.720]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:12:06.720]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:12:06.720]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:12:06.720]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.721]                // -> [dbgmcu_val <= 0x00000007]
[03:12:06.721]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:12:06.721]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:12:06.721]              Sequence("ConfigureTraceSWOPin");
[03:12:06.721]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:12:06.721]                  <block atomic="false" info="">
[03:12:06.722]                    __var pin     = 0;
[03:12:06.722]                      // -> [pin <= 0x00000000]
[03:12:06.722]                    __var port    = 0;
[03:12:06.722]                      // -> [port <= 0x00000000]
[03:12:06.722]                    __var portAdr = 0;
[03:12:06.722]                      // -> [portAdr <= 0x00000000]
[03:12:06.723]                    __var pos     = 0;
[03:12:06.723]                      // -> [pos <= 0x00000000]
[03:12:06.723]                    __var SWO_Pin = 0x00010003;          // PB3
[03:12:06.723]                      // -> [SWO_Pin <= 0x00010003]
[03:12:06.723]                  </block>
[03:12:06.723]                  <block atomic="false" info="configure SWO">
[03:12:06.723]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:12:06.724]                      // -> [pin <= 0x00000003]
[03:12:06.724]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:12:06.724]                      // -> [port <= 0x00000001]
[03:12:06.724]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:12:06.724]                      // -> [portAdr <= 0x40020400]
[03:12:06.724]                    pos = pin * 2;
[03:12:06.725]                      // -> [pos <= 0x00000006]
[03:12:06.725]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:12:06.725]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.726]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.726]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:12:06.726]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.727]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.727]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:12:06.727]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.728]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.728]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:12:06.728]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.729]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.729]                  </block>
[03:12:06.729]                  <control if="pin <  8" while="" timeout="0" info="">
[03:12:06.729]                    // if-block "pin <  8"
[03:12:06.729]                      // =>  TRUE
[03:12:06.729]                    <block atomic="false" info="">
[03:12:06.730]                      pos = ((pin    ) & 7) * 4;
[03:12:06.730]                        // -> [pos <= 0x0000000C]
[03:12:06.730]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:12:06.730]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.731]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.731]                    </block>
[03:12:06.731]                    // end if-block "pin <  8"
[03:12:06.731]                  </control>
[03:12:06.731]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:12:06.732]                    // if-block "pin >= 8"
[03:12:06.732]                      // =>  FALSE
[03:12:06.732]                    // skip if-block "pin >= 8"
[03:12:06.732]                  </control>
[03:12:06.732]                </sequence>
[03:12:06.732]            </block>
[03:12:06.732]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:12:06.732]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:12:06.733]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:06.733]            </block>
[03:12:06.733]          </sequence>
[03:12:06.733]      </block>
[03:12:06.734]      // end if-block "traceSWO"
[03:12:06.734]    </control>
[03:12:06.734]    <control if="traceTPIU" while="" timeout="0" info="">
[03:12:06.734]      // if-block "traceTPIU"
[03:12:06.734]        // =>  FALSE
[03:12:06.734]      // skip if-block "traceTPIU"
[03:12:06.734]    </control>
[03:12:06.735]  </sequence>
[03:12:06.735]  
[03:12:56.994]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:12:56.994]  
[03:12:56.994]  <debugvars>
[03:12:56.994]    // Pre-defined
[03:12:56.995]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:12:56.995]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:12:56.995]    __dp=0x00000000
[03:12:56.995]    __ap=0x00000000
[03:12:56.995]    __traceout=0x00000001      (SWO Trace)
[03:12:56.996]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:12:56.996]    __FlashAddr=0x00000000
[03:12:56.996]    __FlashLen=0x00000000
[03:12:56.996]    __FlashArg=0x00000000
[03:12:56.996]    __FlashOp=0x00000000
[03:12:56.996]    __Result=0x00000000
[03:12:56.997]    
[03:12:56.997]    // User-defined
[03:12:56.997]    DbgMCU_CR=0x00000007
[03:12:56.997]    DbgMCU_APB1_Fz=0x00000000
[03:12:56.997]    DbgMCU_APB2_Fz=0x00000000
[03:12:56.997]    TraceClk_Pin=0x00040002
[03:12:56.998]    TraceD0_Pin=0x00040003
[03:12:56.998]    TraceD1_Pin=0x00040004
[03:12:56.998]    TraceD2_Pin=0x00040005
[03:12:56.998]    TraceD3_Pin=0x00040006
[03:12:56.998]  </debugvars>
[03:12:56.999]  
[03:12:56.999]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:12:56.999]    <block atomic="false" info="">
[03:12:56.999]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:12:56.999]        // -> [traceSWO <= 0x00000001]
[03:12:57.000]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:12:57.000]        // -> [traceTPIU <= 0x00000000]
[03:12:57.000]    </block>
[03:12:57.000]    <control if="traceSWO" while="" timeout="0" info="">
[03:12:57.001]      // if-block "traceSWO"
[03:12:57.001]        // =>  TRUE
[03:12:57.001]      <block atomic="false" info="">
[03:12:57.001]        Sequence("DisableTraceSWO");
[03:12:57.001]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:12:57.001]            <block atomic="false" info="">
[03:12:57.002]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:12:57.002]                // -> [dbgmcu_val <= 0x00000000]
[03:12:57.002]            </block>
[03:12:57.002]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:12:57.002]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:12:57.003]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:12:57.003]                // -> [dbgmcu_val <= 0x00000007]
[03:12:57.003]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:12:57.004]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:57.004]            </block>
[03:12:57.004]          </sequence>
[03:12:57.004]      </block>
[03:12:57.004]      // end if-block "traceSWO"
[03:12:57.005]    </control>
[03:12:57.005]    <control if="traceTPIU" while="" timeout="0" info="">
[03:12:57.005]      // if-block "traceTPIU"
[03:12:57.005]        // =>  FALSE
[03:12:57.005]      // skip if-block "traceTPIU"
[03:12:57.005]    </control>
[03:12:57.006]  </sequence>
[03:12:57.006]  
[03:13:25.121]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:13:25.121]  
[03:13:25.121]  <debugvars>
[03:13:25.121]    // Pre-defined
[03:13:25.121]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:13:25.121]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:13:25.122]    __dp=0x00000000
[03:13:25.122]    __ap=0x00000000
[03:13:25.122]    __traceout=0x00000001      (SWO Trace)
[03:13:25.122]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:13:25.122]    __FlashAddr=0x00000000
[03:13:25.122]    __FlashLen=0x00000000
[03:13:25.123]    __FlashArg=0x00000000
[03:13:25.123]    __FlashOp=0x00000000
[03:13:25.123]    __Result=0x00000000
[03:13:25.123]    
[03:13:25.123]    // User-defined
[03:13:25.123]    DbgMCU_CR=0x00000007
[03:13:25.123]    DbgMCU_APB1_Fz=0x00000000
[03:13:25.124]    DbgMCU_APB2_Fz=0x00000000
[03:13:25.124]    TraceClk_Pin=0x00040002
[03:13:25.124]    TraceD0_Pin=0x00040003
[03:13:25.124]    TraceD1_Pin=0x00040004
[03:13:25.124]    TraceD2_Pin=0x00040005
[03:13:25.124]    TraceD3_Pin=0x00040006
[03:13:25.125]  </debugvars>
[03:13:25.125]  
[03:13:25.125]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:13:25.125]    <block atomic="false" info="">
[03:13:25.125]      Sequence("CheckID");
[03:13:25.125]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:13:25.126]          <block atomic="false" info="">
[03:13:25.126]            __var pidr1 = 0;
[03:13:25.126]              // -> [pidr1 <= 0x00000000]
[03:13:25.126]            __var pidr2 = 0;
[03:13:25.126]              // -> [pidr2 <= 0x00000000]
[03:13:25.126]            __var jep106id = 0;
[03:13:25.126]              // -> [jep106id <= 0x00000000]
[03:13:25.127]            __var ROMTableBase = 0;
[03:13:25.127]              // -> [ROMTableBase <= 0x00000000]
[03:13:25.127]            __ap = 0;      // AHB-AP
[03:13:25.127]              // -> [__ap <= 0x00000000]
[03:13:25.127]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:13:25.128]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:13:25.128]              // -> [ROMTableBase <= 0xE00FD000]
[03:13:25.128]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:13:25.128]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:13:25.129]              // -> [pidr1 <= 0x00000004]
[03:13:25.129]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:13:25.129]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:13:25.130]              // -> [pidr2 <= 0x0000001A]
[03:13:25.130]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:13:25.130]              // -> [jep106id <= 0x00000020]
[03:13:25.130]          </block>
[03:13:25.130]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:13:25.130]            // if-block "jep106id != 0x20"
[03:13:25.130]              // =>  FALSE
[03:13:25.131]            // skip if-block "jep106id != 0x20"
[03:13:25.131]          </control>
[03:13:25.131]        </sequence>
[03:13:25.131]    </block>
[03:13:25.131]  </sequence>
[03:13:25.131]  
[03:13:25.146]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:13:25.146]  
[03:13:25.146]  <debugvars>
[03:13:25.146]    // Pre-defined
[03:13:25.146]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:13:25.147]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:13:25.147]    __dp=0x00000000
[03:13:25.147]    __ap=0x00000000
[03:13:25.147]    __traceout=0x00000001      (SWO Trace)
[03:13:25.147]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:13:25.148]    __FlashAddr=0x00000000
[03:13:25.148]    __FlashLen=0x00000000
[03:13:25.148]    __FlashArg=0x00000000
[03:13:25.148]    __FlashOp=0x00000000
[03:13:25.148]    __Result=0x00000000
[03:13:25.149]    
[03:13:25.149]    // User-defined
[03:13:25.149]    DbgMCU_CR=0x00000007
[03:13:25.149]    DbgMCU_APB1_Fz=0x00000000
[03:13:25.149]    DbgMCU_APB2_Fz=0x00000000
[03:13:25.149]    TraceClk_Pin=0x00040002
[03:13:25.150]    TraceD0_Pin=0x00040003
[03:13:25.150]    TraceD1_Pin=0x00040004
[03:13:25.150]    TraceD2_Pin=0x00040005
[03:13:25.150]    TraceD3_Pin=0x00040006
[03:13:25.150]  </debugvars>
[03:13:25.150]  
[03:13:25.151]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:13:25.151]    <block atomic="false" info="">
[03:13:25.151]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:13:25.152]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:25.152]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:13:25.152]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:25.153]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:13:25.153]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:25.153]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:13:25.154]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:25.154]    </block>
[03:13:25.154]  </sequence>
[03:13:25.155]  
[03:13:58.882]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:13:58.882]  
[03:13:58.882]  <debugvars>
[03:13:58.882]    // Pre-defined
[03:13:58.882]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:13:58.882]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:13:58.882]    __dp=0x00000000
[03:13:58.883]    __ap=0x00000000
[03:13:58.883]    __traceout=0x00000001      (SWO Trace)
[03:13:58.883]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:13:58.883]    __FlashAddr=0x00000000
[03:13:58.883]    __FlashLen=0x00000000
[03:13:58.883]    __FlashArg=0x00000000
[03:13:58.883]    __FlashOp=0x00000000
[03:13:58.883]    __Result=0x00000000
[03:13:58.884]    
[03:13:58.884]    // User-defined
[03:13:58.884]    DbgMCU_CR=0x00000007
[03:13:58.884]    DbgMCU_APB1_Fz=0x00000000
[03:13:58.884]    DbgMCU_APB2_Fz=0x00000000
[03:13:58.884]    TraceClk_Pin=0x00040002
[03:13:58.884]    TraceD0_Pin=0x00040003
[03:13:58.884]    TraceD1_Pin=0x00040004
[03:13:58.884]    TraceD2_Pin=0x00040005
[03:13:58.884]    TraceD3_Pin=0x00040006
[03:13:58.885]  </debugvars>
[03:13:58.885]  
[03:13:58.885]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:13:58.885]    <block atomic="false" info="">
[03:13:58.885]      Sequence("CheckID");
[03:13:58.885]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:13:58.885]          <block atomic="false" info="">
[03:13:58.885]            __var pidr1 = 0;
[03:13:58.885]              // -> [pidr1 <= 0x00000000]
[03:13:58.886]            __var pidr2 = 0;
[03:13:58.886]              // -> [pidr2 <= 0x00000000]
[03:13:58.886]            __var jep106id = 0;
[03:13:58.886]              // -> [jep106id <= 0x00000000]
[03:13:58.886]            __var ROMTableBase = 0;
[03:13:58.886]              // -> [ROMTableBase <= 0x00000000]
[03:13:58.886]            __ap = 0;      // AHB-AP
[03:13:58.886]              // -> [__ap <= 0x00000000]
[03:13:58.886]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:13:58.887]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.887]              // -> [ROMTableBase <= 0xE00FD000]
[03:13:58.887]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:13:58.888]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.888]              // -> [pidr1 <= 0x00000004]
[03:13:58.888]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:13:58.888]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.888]              // -> [pidr2 <= 0x0000001A]
[03:13:58.888]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:13:58.888]              // -> [jep106id <= 0x00000020]
[03:13:58.889]          </block>
[03:13:58.889]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:13:58.889]            // if-block "jep106id != 0x20"
[03:13:58.889]              // =>  FALSE
[03:13:58.889]            // skip if-block "jep106id != 0x20"
[03:13:58.889]          </control>
[03:13:58.889]        </sequence>
[03:13:58.889]    </block>
[03:13:58.890]  </sequence>
[03:13:58.890]  
[03:13:58.904]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:13:58.904]  
[03:13:58.904]  <debugvars>
[03:13:58.904]    // Pre-defined
[03:13:58.904]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:13:58.904]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:13:58.904]    __dp=0x00000000
[03:13:58.904]    __ap=0x00000000
[03:13:58.905]    __traceout=0x00000001      (SWO Trace)
[03:13:58.905]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:13:58.905]    __FlashAddr=0x00000000
[03:13:58.905]    __FlashLen=0x00000000
[03:13:58.905]    __FlashArg=0x00000000
[03:13:58.905]    __FlashOp=0x00000000
[03:13:58.905]    __Result=0x00000000
[03:13:58.905]    
[03:13:58.905]    // User-defined
[03:13:58.906]    DbgMCU_CR=0x00000007
[03:13:58.906]    DbgMCU_APB1_Fz=0x00000000
[03:13:58.906]    DbgMCU_APB2_Fz=0x00000000
[03:13:58.906]    TraceClk_Pin=0x00040002
[03:13:58.906]    TraceD0_Pin=0x00040003
[03:13:58.906]    TraceD1_Pin=0x00040004
[03:13:58.906]    TraceD2_Pin=0x00040005
[03:13:58.906]    TraceD3_Pin=0x00040006
[03:13:58.907]  </debugvars>
[03:13:58.907]  
[03:13:58.907]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:13:58.907]    <block atomic="false" info="">
[03:13:58.907]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:13:58.908]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.908]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:13:58.908]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.908]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:13:58.909]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.909]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:13:58.909]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.909]    </block>
[03:13:58.910]  </sequence>
[03:13:58.910]  
[03:13:58.925]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:13:58.925]  
[03:13:58.925]  <debugvars>
[03:13:58.925]    // Pre-defined
[03:13:58.925]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:13:58.925]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:13:58.926]    __dp=0x00000000
[03:13:58.926]    __ap=0x00000000
[03:13:58.926]    __traceout=0x00000001      (SWO Trace)
[03:13:58.926]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:13:58.926]    __FlashAddr=0x00000000
[03:13:58.926]    __FlashLen=0x00000000
[03:13:58.926]    __FlashArg=0x00000000
[03:13:58.926]    __FlashOp=0x00000000
[03:13:58.927]    __Result=0x00000000
[03:13:58.927]    
[03:13:58.927]    // User-defined
[03:13:58.927]    DbgMCU_CR=0x00000007
[03:13:58.927]    DbgMCU_APB1_Fz=0x00000000
[03:13:58.927]    DbgMCU_APB2_Fz=0x00000000
[03:13:58.927]    TraceClk_Pin=0x00040002
[03:13:58.927]    TraceD0_Pin=0x00040003
[03:13:58.928]    TraceD1_Pin=0x00040004
[03:13:58.928]    TraceD2_Pin=0x00040005
[03:13:58.928]    TraceD3_Pin=0x00040006
[03:13:58.928]  </debugvars>
[03:13:58.928]  
[03:13:58.928]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:13:58.928]    <block atomic="false" info="">
[03:13:58.928]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:13:58.929]        // -> [traceSWO <= 0x00000001]
[03:13:58.929]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:13:58.929]        // -> [traceTPIU <= 0x00000000]
[03:13:58.929]    </block>
[03:13:58.929]    <control if="traceSWO" while="" timeout="0" info="">
[03:13:58.929]      // if-block "traceSWO"
[03:13:58.929]        // =>  TRUE
[03:13:58.929]      <block atomic="false" info="">
[03:13:58.929]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:13:58.930]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:13:58.930]            <block atomic="false" info="">
[03:13:58.930]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:13:58.930]                // -> [dbgmcu_val <= 0x00000000]
[03:13:58.930]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:13:58.930]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:13:58.930]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:13:58.931]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.931]                // -> [dbgmcu_val <= 0x00000007]
[03:13:58.931]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:13:58.931]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:13:58.931]              Sequence("ConfigureTraceSWOPin");
[03:13:58.932]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:13:58.932]                  <block atomic="false" info="">
[03:13:58.932]                    __var pin     = 0;
[03:13:58.932]                      // -> [pin <= 0x00000000]
[03:13:58.932]                    __var port    = 0;
[03:13:58.932]                      // -> [port <= 0x00000000]
[03:13:58.932]                    __var portAdr = 0;
[03:13:58.932]                      // -> [portAdr <= 0x00000000]
[03:13:58.933]                    __var pos     = 0;
[03:13:58.933]                      // -> [pos <= 0x00000000]
[03:13:58.933]                    __var SWO_Pin = 0x00010003;          // PB3
[03:13:58.933]                      // -> [SWO_Pin <= 0x00010003]
[03:13:58.933]                  </block>
[03:13:58.933]                  <block atomic="false" info="configure SWO">
[03:13:58.933]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:13:58.933]                      // -> [pin <= 0x00000003]
[03:13:58.934]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:13:58.934]                      // -> [port <= 0x00000001]
[03:13:58.934]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:13:58.934]                      // -> [portAdr <= 0x40020400]
[03:13:58.934]                    pos = pin * 2;
[03:13:58.934]                      // -> [pos <= 0x00000006]
[03:13:58.934]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:13:58.935]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.935]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.935]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:13:58.936]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.936]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.936]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:13:58.937]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.937]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.937]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:13:58.938]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.938]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.938]                  </block>
[03:13:58.939]                  <control if="pin <  8" while="" timeout="0" info="">
[03:13:58.939]                    // if-block "pin <  8"
[03:13:58.939]                      // =>  TRUE
[03:13:58.939]                    <block atomic="false" info="">
[03:13:58.939]                      pos = ((pin    ) & 7) * 4;
[03:13:58.939]                        // -> [pos <= 0x0000000C]
[03:13:58.939]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:13:58.940]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.940]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.940]                    </block>
[03:13:58.940]                    // end if-block "pin <  8"
[03:13:58.941]                  </control>
[03:13:58.941]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:13:58.941]                    // if-block "pin >= 8"
[03:13:58.941]                      // =>  FALSE
[03:13:58.941]                    // skip if-block "pin >= 8"
[03:13:58.941]                  </control>
[03:13:58.942]                </sequence>
[03:13:58.942]            </block>
[03:13:58.942]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:13:58.942]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:13:58.942]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.942]            </block>
[03:13:58.943]          </sequence>
[03:13:58.943]      </block>
[03:13:58.943]      // end if-block "traceSWO"
[03:13:58.943]    </control>
[03:13:58.943]    <control if="traceTPIU" while="" timeout="0" info="">
[03:13:58.943]      // if-block "traceTPIU"
[03:13:58.943]        // =>  FALSE
[03:13:58.943]      // skip if-block "traceTPIU"
[03:13:58.943]    </control>
[03:13:58.944]  </sequence>
[03:13:58.944]  
[03:13:58.948]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:13:58.948]  
[03:13:58.948]  <debugvars>
[03:13:58.948]    // Pre-defined
[03:13:58.948]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:13:58.948]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:13:58.948]    __dp=0x00000000
[03:13:58.948]    __ap=0x00000000
[03:13:58.949]    __traceout=0x00000001      (SWO Trace)
[03:13:58.949]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:13:58.949]    __FlashAddr=0x00000000
[03:13:58.949]    __FlashLen=0x00000000
[03:13:58.949]    __FlashArg=0x00000000
[03:13:58.949]    __FlashOp=0x00000000
[03:13:58.949]    __Result=0x00000000
[03:13:58.949]    
[03:13:58.949]    // User-defined
[03:13:58.950]    DbgMCU_CR=0x00000007
[03:13:58.950]    DbgMCU_APB1_Fz=0x00000000
[03:13:58.950]    DbgMCU_APB2_Fz=0x00000000
[03:13:58.950]    TraceClk_Pin=0x00040002
[03:13:58.950]    TraceD0_Pin=0x00040003
[03:13:58.950]    TraceD1_Pin=0x00040004
[03:13:58.950]    TraceD2_Pin=0x00040005
[03:13:58.950]    TraceD3_Pin=0x00040006
[03:13:58.951]  </debugvars>
[03:13:58.951]  
[03:13:58.951]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:13:58.951]    <block atomic="false" info="">
[03:13:58.951]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:13:58.951]        // -> [traceSWO <= 0x00000001]
[03:13:58.951]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:13:58.951]        // -> [traceTPIU <= 0x00000000]
[03:13:58.952]    </block>
[03:13:58.952]    <control if="traceSWO" while="" timeout="0" info="">
[03:13:58.952]      // if-block "traceSWO"
[03:13:58.952]        // =>  TRUE
[03:13:58.952]      <block atomic="false" info="">
[03:13:58.952]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:13:58.952]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:13:58.952]            <block atomic="false" info="">
[03:13:58.953]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:13:58.953]                // -> [dbgmcu_val <= 0x00000000]
[03:13:58.953]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:13:58.953]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:13:58.953]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:13:58.953]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.954]                // -> [dbgmcu_val <= 0x00000007]
[03:13:58.954]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:13:58.954]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:13:58.954]              Sequence("ConfigureTraceSWOPin");
[03:13:58.954]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:13:58.954]                  <block atomic="false" info="">
[03:13:58.954]                    __var pin     = 0;
[03:13:58.954]                      // -> [pin <= 0x00000000]
[03:13:58.955]                    __var port    = 0;
[03:13:58.955]                      // -> [port <= 0x00000000]
[03:13:58.955]                    __var portAdr = 0;
[03:13:58.955]                      // -> [portAdr <= 0x00000000]
[03:13:58.955]                    __var pos     = 0;
[03:13:58.955]                      // -> [pos <= 0x00000000]
[03:13:58.955]                    __var SWO_Pin = 0x00010003;          // PB3
[03:13:58.955]                      // -> [SWO_Pin <= 0x00010003]
[03:13:58.956]                  </block>
[03:13:58.956]                  <block atomic="false" info="configure SWO">
[03:13:58.956]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:13:58.956]                      // -> [pin <= 0x00000003]
[03:13:58.956]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:13:58.956]                      // -> [port <= 0x00000001]
[03:13:58.956]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:13:58.957]                      // -> [portAdr <= 0x40020400]
[03:13:58.957]                    pos = pin * 2;
[03:13:58.957]                      // -> [pos <= 0x00000006]
[03:13:58.957]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:13:58.957]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.958]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.958]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:13:58.958]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.959]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.959]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:13:58.959]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.960]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.960]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:13:58.960]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.961]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.961]                  </block>
[03:13:58.961]                  <control if="pin <  8" while="" timeout="0" info="">
[03:13:58.961]                    // if-block "pin <  8"
[03:13:58.961]                      // =>  TRUE
[03:13:58.961]                    <block atomic="false" info="">
[03:13:58.961]                      pos = ((pin    ) & 7) * 4;
[03:13:58.962]                        // -> [pos <= 0x0000000C]
[03:13:58.962]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:13:58.962]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.962]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.963]                    </block>
[03:13:58.963]                    // end if-block "pin <  8"
[03:13:58.963]                  </control>
[03:13:58.963]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:13:58.963]                    // if-block "pin >= 8"
[03:13:58.963]                      // =>  FALSE
[03:13:58.963]                    // skip if-block "pin >= 8"
[03:13:58.963]                  </control>
[03:13:58.964]                </sequence>
[03:13:58.964]            </block>
[03:13:58.964]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:13:58.964]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:13:58.964]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:58.965]            </block>
[03:13:58.965]          </sequence>
[03:13:58.965]      </block>
[03:13:58.965]      // end if-block "traceSWO"
[03:13:58.965]    </control>
[03:13:58.965]    <control if="traceTPIU" while="" timeout="0" info="">
[03:13:58.965]      // if-block "traceTPIU"
[03:13:58.965]        // =>  FALSE
[03:13:58.966]      // skip if-block "traceTPIU"
[03:13:58.966]    </control>
[03:13:58.966]  </sequence>
[03:13:58.966]  
[03:13:59.180]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:13:59.180]  
[03:13:59.180]  <debugvars>
[03:13:59.180]    // Pre-defined
[03:13:59.180]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:13:59.180]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:13:59.180]    __dp=0x00000000
[03:13:59.180]    __ap=0x00000000
[03:13:59.181]    __traceout=0x00000001      (SWO Trace)
[03:13:59.181]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:13:59.181]    __FlashAddr=0x00000000
[03:13:59.181]    __FlashLen=0x00000000
[03:13:59.181]    __FlashArg=0x00000000
[03:13:59.181]    __FlashOp=0x00000000
[03:13:59.181]    __Result=0x00000000
[03:13:59.181]    
[03:13:59.181]    // User-defined
[03:13:59.182]    DbgMCU_CR=0x00000007
[03:13:59.182]    DbgMCU_APB1_Fz=0x00000000
[03:13:59.182]    DbgMCU_APB2_Fz=0x00000000
[03:13:59.182]    TraceClk_Pin=0x00040002
[03:13:59.182]    TraceD0_Pin=0x00040003
[03:13:59.182]    TraceD1_Pin=0x00040004
[03:13:59.182]    TraceD2_Pin=0x00040005
[03:13:59.182]    TraceD3_Pin=0x00040006
[03:13:59.183]  </debugvars>
[03:13:59.183]  
[03:13:59.183]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:13:59.183]    <block atomic="false" info="">
[03:13:59.183]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:13:59.183]        // -> [traceSWO <= 0x00000001]
[03:13:59.183]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:13:59.183]        // -> [traceTPIU <= 0x00000000]
[03:13:59.183]    </block>
[03:13:59.184]    <control if="traceSWO" while="" timeout="0" info="">
[03:13:59.184]      // if-block "traceSWO"
[03:13:59.184]        // =>  TRUE
[03:13:59.184]      <block atomic="false" info="">
[03:13:59.184]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:13:59.184]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:13:59.184]            <block atomic="false" info="">
[03:13:59.184]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:13:59.185]                // -> [dbgmcu_val <= 0x00000000]
[03:13:59.185]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:13:59.185]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:13:59.185]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:13:59.185]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:13:59.185]                // -> [dbgmcu_val <= 0x00000007]
[03:13:59.186]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:13:59.186]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:13:59.186]              Sequence("ConfigureTraceSWOPin");
[03:13:59.186]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:13:59.186]                  <block atomic="false" info="">
[03:13:59.186]                    __var pin     = 0;
[03:13:59.186]                      // -> [pin <= 0x00000000]
[03:13:59.186]                    __var port    = 0;
[03:13:59.186]                      // -> [port <= 0x00000000]
[03:13:59.187]                    __var portAdr = 0;
[03:13:59.187]                      // -> [portAdr <= 0x00000000]
[03:13:59.187]                    __var pos     = 0;
[03:13:59.187]                      // -> [pos <= 0x00000000]
[03:13:59.187]                    __var SWO_Pin = 0x00010003;          // PB3
[03:13:59.187]                      // -> [SWO_Pin <= 0x00010003]
[03:13:59.187]                  </block>
[03:13:59.187]                  <block atomic="false" info="configure SWO">
[03:13:59.188]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:13:59.188]                      // -> [pin <= 0x00000003]
[03:13:59.188]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:13:59.188]                      // -> [port <= 0x00000001]
[03:13:59.188]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:13:59.188]                      // -> [portAdr <= 0x40020400]
[03:13:59.188]                    pos = pin * 2;
[03:13:59.188]                      // -> [pos <= 0x00000006]
[03:13:59.189]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:13:59.189]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:13:59.189]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:59.189]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:13:59.190]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:13:59.190]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:59.190]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:13:59.191]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:13:59.191]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:59.191]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:13:59.192]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:13:59.192]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:59.192]                  </block>
[03:13:59.193]                  <control if="pin <  8" while="" timeout="0" info="">
[03:13:59.193]                    // if-block "pin <  8"
[03:13:59.193]                      // =>  TRUE
[03:13:59.193]                    <block atomic="false" info="">
[03:13:59.193]                      pos = ((pin    ) & 7) * 4;
[03:13:59.193]                        // -> [pos <= 0x0000000C]
[03:13:59.193]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:13:59.194]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:13:59.194]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:59.194]                    </block>
[03:13:59.194]                    // end if-block "pin <  8"
[03:13:59.194]                  </control>
[03:13:59.195]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:13:59.195]                    // if-block "pin >= 8"
[03:13:59.195]                      // =>  FALSE
[03:13:59.195]                    // skip if-block "pin >= 8"
[03:13:59.195]                  </control>
[03:13:59.195]                </sequence>
[03:13:59.195]            </block>
[03:13:59.196]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:13:59.196]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:13:59.196]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:13:59.196]            </block>
[03:13:59.196]          </sequence>
[03:13:59.197]      </block>
[03:13:59.197]      // end if-block "traceSWO"
[03:13:59.197]    </control>
[03:13:59.197]    <control if="traceTPIU" while="" timeout="0" info="">
[03:13:59.197]      // if-block "traceTPIU"
[03:13:59.197]        // =>  FALSE
[03:13:59.197]      // skip if-block "traceTPIU"
[03:13:59.198]    </control>
[03:13:59.198]  </sequence>
[03:13:59.198]  
[03:14:37.342]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:14:37.342]  
[03:14:37.342]  <debugvars>
[03:14:37.342]    // Pre-defined
[03:14:37.343]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:14:37.343]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:14:37.343]    __dp=0x00000000
[03:14:37.343]    __ap=0x00000000
[03:14:37.343]    __traceout=0x00000001      (SWO Trace)
[03:14:37.344]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:14:37.344]    __FlashAddr=0x00000000
[03:14:37.344]    __FlashLen=0x00000000
[03:14:37.344]    __FlashArg=0x00000000
[03:14:37.344]    __FlashOp=0x00000000
[03:14:37.344]    __Result=0x00000000
[03:14:37.345]    
[03:14:37.345]    // User-defined
[03:14:37.345]    DbgMCU_CR=0x00000007
[03:14:37.345]    DbgMCU_APB1_Fz=0x00000000
[03:14:37.345]    DbgMCU_APB2_Fz=0x00000000
[03:14:37.345]    TraceClk_Pin=0x00040002
[03:14:37.346]    TraceD0_Pin=0x00040003
[03:14:37.346]    TraceD1_Pin=0x00040004
[03:14:37.346]    TraceD2_Pin=0x00040005
[03:14:37.346]    TraceD3_Pin=0x00040006
[03:14:37.346]  </debugvars>
[03:14:37.346]  
[03:14:37.346]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:14:37.347]    <block atomic="false" info="">
[03:14:37.347]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:14:37.347]        // -> [traceSWO <= 0x00000001]
[03:14:37.347]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:14:37.347]        // -> [traceTPIU <= 0x00000000]
[03:14:37.347]    </block>
[03:14:37.348]    <control if="traceSWO" while="" timeout="0" info="">
[03:14:37.348]      // if-block "traceSWO"
[03:14:37.348]        // =>  TRUE
[03:14:37.348]      <block atomic="false" info="">
[03:14:37.348]        Sequence("DisableTraceSWO");
[03:14:37.348]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:14:37.349]            <block atomic="false" info="">
[03:14:37.349]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:14:37.349]                // -> [dbgmcu_val <= 0x00000000]
[03:14:37.349]            </block>
[03:14:37.349]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:14:37.349]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:14:37.350]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:14:37.350]                // -> [dbgmcu_val <= 0x00000007]
[03:14:37.350]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:14:37.351]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:14:37.351]            </block>
[03:14:37.351]          </sequence>
[03:14:37.351]      </block>
[03:14:37.351]      // end if-block "traceSWO"
[03:14:37.352]    </control>
[03:14:37.352]    <control if="traceTPIU" while="" timeout="0" info="">
[03:14:37.352]      // if-block "traceTPIU"
[03:14:37.352]        // =>  FALSE
[03:14:37.352]      // skip if-block "traceTPIU"
[03:14:37.352]    </control>
[03:14:37.353]  </sequence>
[03:14:37.353]  
[03:19:24.132]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:19:24.132]  
[03:19:24.132]  <debugvars>
[03:19:24.132]    // Pre-defined
[03:19:24.132]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:19:24.133]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:19:24.133]    __dp=0x00000000
[03:19:24.133]    __ap=0x00000000
[03:19:24.133]    __traceout=0x00000001      (SWO Trace)
[03:19:24.133]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:19:24.133]    __FlashAddr=0x00000000
[03:19:24.133]    __FlashLen=0x00000000
[03:19:24.133]    __FlashArg=0x00000000
[03:19:24.134]    __FlashOp=0x00000000
[03:19:24.134]    __Result=0x00000000
[03:19:24.134]    
[03:19:24.134]    // User-defined
[03:19:24.134]    DbgMCU_CR=0x00000007
[03:19:24.134]    DbgMCU_APB1_Fz=0x00000000
[03:19:24.134]    DbgMCU_APB2_Fz=0x00000000
[03:19:24.134]    TraceClk_Pin=0x00040002
[03:19:24.134]    TraceD0_Pin=0x00040003
[03:19:24.135]    TraceD1_Pin=0x00040004
[03:19:24.135]    TraceD2_Pin=0x00040005
[03:19:24.135]    TraceD3_Pin=0x00040006
[03:19:24.135]  </debugvars>
[03:19:24.135]  
[03:19:24.135]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:19:24.135]    <block atomic="false" info="">
[03:19:24.135]      Sequence("CheckID");
[03:19:24.136]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:19:24.136]          <block atomic="false" info="">
[03:19:24.136]            __var pidr1 = 0;
[03:19:24.136]              // -> [pidr1 <= 0x00000000]
[03:19:24.136]            __var pidr2 = 0;
[03:19:24.136]              // -> [pidr2 <= 0x00000000]
[03:19:24.136]            __var jep106id = 0;
[03:19:24.137]              // -> [jep106id <= 0x00000000]
[03:19:24.137]            __var ROMTableBase = 0;
[03:19:24.137]              // -> [ROMTableBase <= 0x00000000]
[03:19:24.137]            __ap = 0;      // AHB-AP
[03:19:24.137]              // -> [__ap <= 0x00000000]
[03:19:24.137]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:19:24.138]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:19:24.138]              // -> [ROMTableBase <= 0xE00FD000]
[03:19:24.138]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:19:24.138]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:19:24.138]              // -> [pidr1 <= 0x00000004]
[03:19:24.139]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:19:24.139]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:19:24.139]              // -> [pidr2 <= 0x0000001A]
[03:19:24.139]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:19:24.139]              // -> [jep106id <= 0x00000020]
[03:19:24.140]          </block>
[03:19:24.140]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:19:24.140]            // if-block "jep106id != 0x20"
[03:19:24.140]              // =>  FALSE
[03:19:24.140]            // skip if-block "jep106id != 0x20"
[03:19:24.140]          </control>
[03:19:24.140]        </sequence>
[03:19:24.140]    </block>
[03:19:24.141]  </sequence>
[03:19:24.141]  
[03:19:24.155]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:19:24.155]  
[03:19:24.155]  <debugvars>
[03:19:24.155]    // Pre-defined
[03:19:24.155]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:19:24.156]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:19:24.156]    __dp=0x00000000
[03:19:24.156]    __ap=0x00000000
[03:19:24.156]    __traceout=0x00000001      (SWO Trace)
[03:19:24.156]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:19:24.156]    __FlashAddr=0x00000000
[03:19:24.156]    __FlashLen=0x00000000
[03:19:24.156]    __FlashArg=0x00000000
[03:19:24.157]    __FlashOp=0x00000000
[03:19:24.157]    __Result=0x00000000
[03:19:24.157]    
[03:19:24.157]    // User-defined
[03:19:24.157]    DbgMCU_CR=0x00000007
[03:19:24.157]    DbgMCU_APB1_Fz=0x00000000
[03:19:24.157]    DbgMCU_APB2_Fz=0x00000000
[03:19:24.157]    TraceClk_Pin=0x00040002
[03:19:24.157]    TraceD0_Pin=0x00040003
[03:19:24.157]    TraceD1_Pin=0x00040004
[03:19:24.158]    TraceD2_Pin=0x00040005
[03:19:24.158]    TraceD3_Pin=0x00040006
[03:19:24.158]  </debugvars>
[03:19:24.158]  
[03:19:24.158]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:19:24.158]    <block atomic="false" info="">
[03:19:24.158]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:19:24.159]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:24.159]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:19:24.159]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:24.160]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:19:24.160]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:24.160]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:19:24.161]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:24.161]    </block>
[03:19:24.161]  </sequence>
[03:19:24.161]  
[03:19:55.076]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:19:55.076]  
[03:19:55.077]  <debugvars>
[03:19:55.077]    // Pre-defined
[03:19:55.077]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:19:55.077]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:19:55.077]    __dp=0x00000000
[03:19:55.078]    __ap=0x00000000
[03:19:55.078]    __traceout=0x00000001      (SWO Trace)
[03:19:55.078]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:19:55.078]    __FlashAddr=0x00000000
[03:19:55.078]    __FlashLen=0x00000000
[03:19:55.078]    __FlashArg=0x00000000
[03:19:55.079]    __FlashOp=0x00000000
[03:19:55.079]    __Result=0x00000000
[03:19:55.079]    
[03:19:55.079]    // User-defined
[03:19:55.079]    DbgMCU_CR=0x00000007
[03:19:55.079]    DbgMCU_APB1_Fz=0x00000000
[03:19:55.079]    DbgMCU_APB2_Fz=0x00000000
[03:19:55.080]    TraceClk_Pin=0x00040002
[03:19:55.080]    TraceD0_Pin=0x00040003
[03:19:55.080]    TraceD1_Pin=0x00040004
[03:19:55.080]    TraceD2_Pin=0x00040005
[03:19:55.080]    TraceD3_Pin=0x00040006
[03:19:55.080]  </debugvars>
[03:19:55.081]  
[03:19:55.081]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:19:55.081]    <block atomic="false" info="">
[03:19:55.081]      Sequence("CheckID");
[03:19:55.081]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:19:55.081]          <block atomic="false" info="">
[03:19:55.082]            __var pidr1 = 0;
[03:19:55.082]              // -> [pidr1 <= 0x00000000]
[03:19:55.082]            __var pidr2 = 0;
[03:19:55.082]              // -> [pidr2 <= 0x00000000]
[03:19:55.082]            __var jep106id = 0;
[03:19:55.082]              // -> [jep106id <= 0x00000000]
[03:19:55.083]            __var ROMTableBase = 0;
[03:19:55.083]              // -> [ROMTableBase <= 0x00000000]
[03:19:55.083]            __ap = 0;      // AHB-AP
[03:19:55.083]              // -> [__ap <= 0x00000000]
[03:19:55.083]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:19:55.084]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.084]              // -> [ROMTableBase <= 0xE00FD000]
[03:19:55.084]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:19:55.085]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.085]              // -> [pidr1 <= 0x00000004]
[03:19:55.085]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:19:55.085]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.086]              // -> [pidr2 <= 0x0000001A]
[03:19:55.086]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:19:55.086]              // -> [jep106id <= 0x00000020]
[03:19:55.086]          </block>
[03:19:55.086]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:19:55.086]            // if-block "jep106id != 0x20"
[03:19:55.086]              // =>  FALSE
[03:19:55.087]            // skip if-block "jep106id != 0x20"
[03:19:55.087]          </control>
[03:19:55.087]        </sequence>
[03:19:55.087]    </block>
[03:19:55.087]  </sequence>
[03:19:55.087]  
[03:19:55.101]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:19:55.101]  
[03:19:55.102]  <debugvars>
[03:19:55.102]    // Pre-defined
[03:19:55.102]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:19:55.102]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:19:55.102]    __dp=0x00000000
[03:19:55.102]    __ap=0x00000000
[03:19:55.103]    __traceout=0x00000001      (SWO Trace)
[03:19:55.103]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:19:55.103]    __FlashAddr=0x00000000
[03:19:55.103]    __FlashLen=0x00000000
[03:19:55.103]    __FlashArg=0x00000000
[03:19:55.103]    __FlashOp=0x00000000
[03:19:55.104]    __Result=0x00000000
[03:19:55.104]    
[03:19:55.104]    // User-defined
[03:19:55.104]    DbgMCU_CR=0x00000007
[03:19:55.104]    DbgMCU_APB1_Fz=0x00000000
[03:19:55.104]    DbgMCU_APB2_Fz=0x00000000
[03:19:55.104]    TraceClk_Pin=0x00040002
[03:19:55.105]    TraceD0_Pin=0x00040003
[03:19:55.105]    TraceD1_Pin=0x00040004
[03:19:55.105]    TraceD2_Pin=0x00040005
[03:19:55.105]    TraceD3_Pin=0x00040006
[03:19:55.105]  </debugvars>
[03:19:55.105]  
[03:19:55.106]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:19:55.106]    <block atomic="false" info="">
[03:19:55.106]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:19:55.107]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.107]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:19:55.107]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.107]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:19:55.108]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.108]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:19:55.109]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.109]    </block>
[03:19:55.109]  </sequence>
[03:19:55.109]  
[03:19:55.125]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:19:55.125]  
[03:19:55.125]  <debugvars>
[03:19:55.126]    // Pre-defined
[03:19:55.126]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:19:55.126]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:19:55.126]    __dp=0x00000000
[03:19:55.126]    __ap=0x00000000
[03:19:55.126]    __traceout=0x00000001      (SWO Trace)
[03:19:55.127]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:19:55.127]    __FlashAddr=0x00000000
[03:19:55.127]    __FlashLen=0x00000000
[03:19:55.127]    __FlashArg=0x00000000
[03:19:55.127]    __FlashOp=0x00000000
[03:19:55.127]    __Result=0x00000000
[03:19:55.128]    
[03:19:55.128]    // User-defined
[03:19:55.128]    DbgMCU_CR=0x00000007
[03:19:55.128]    DbgMCU_APB1_Fz=0x00000000
[03:19:55.128]    DbgMCU_APB2_Fz=0x00000000
[03:19:55.128]    TraceClk_Pin=0x00040002
[03:19:55.128]    TraceD0_Pin=0x00040003
[03:19:55.129]    TraceD1_Pin=0x00040004
[03:19:55.129]    TraceD2_Pin=0x00040005
[03:19:55.129]    TraceD3_Pin=0x00040006
[03:19:55.129]  </debugvars>
[03:19:55.129]  
[03:19:55.129]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:19:55.130]    <block atomic="false" info="">
[03:19:55.130]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:19:55.130]        // -> [traceSWO <= 0x00000001]
[03:19:55.130]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:19:55.130]        // -> [traceTPIU <= 0x00000000]
[03:19:55.130]    </block>
[03:19:55.131]    <control if="traceSWO" while="" timeout="0" info="">
[03:19:55.131]      // if-block "traceSWO"
[03:19:55.131]        // =>  TRUE
[03:19:55.131]      <block atomic="false" info="">
[03:19:55.131]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:19:55.131]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:19:55.132]            <block atomic="false" info="">
[03:19:55.132]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:19:55.132]                // -> [dbgmcu_val <= 0x00000000]
[03:19:55.132]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:19:55.132]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:19:55.132]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:19:55.133]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.133]                // -> [dbgmcu_val <= 0x00000007]
[03:19:55.133]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:19:55.133]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:19:55.134]              Sequence("ConfigureTraceSWOPin");
[03:19:55.134]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:19:55.134]                  <block atomic="false" info="">
[03:19:55.134]                    __var pin     = 0;
[03:19:55.134]                      // -> [pin <= 0x00000000]
[03:19:55.134]                    __var port    = 0;
[03:19:55.135]                      // -> [port <= 0x00000000]
[03:19:55.135]                    __var portAdr = 0;
[03:19:55.135]                      // -> [portAdr <= 0x00000000]
[03:19:55.135]                    __var pos     = 0;
[03:19:55.135]                      // -> [pos <= 0x00000000]
[03:19:55.135]                    __var SWO_Pin = 0x00010003;          // PB3
[03:19:55.135]                      // -> [SWO_Pin <= 0x00010003]
[03:19:55.136]                  </block>
[03:19:55.136]                  <block atomic="false" info="configure SWO">
[03:19:55.136]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:19:55.136]                      // -> [pin <= 0x00000003]
[03:19:55.136]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:19:55.136]                      // -> [port <= 0x00000001]
[03:19:55.136]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:19:55.137]                      // -> [portAdr <= 0x40020400]
[03:19:55.137]                    pos = pin * 2;
[03:19:55.137]                      // -> [pos <= 0x00000006]
[03:19:55.137]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:19:55.137]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.138]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.138]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:19:55.138]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.139]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.139]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:19:55.139]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.140]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.140]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:19:55.140]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.141]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.141]                  </block>
[03:19:55.141]                  <control if="pin <  8" while="" timeout="0" info="">
[03:19:55.141]                    // if-block "pin <  8"
[03:19:55.141]                      // =>  TRUE
[03:19:55.141]                    <block atomic="false" info="">
[03:19:55.141]                      pos = ((pin    ) & 7) * 4;
[03:19:55.142]                        // -> [pos <= 0x0000000C]
[03:19:55.142]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:19:55.142]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.143]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.143]                    </block>
[03:19:55.143]                    // end if-block "pin <  8"
[03:19:55.143]                  </control>
[03:19:55.143]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:19:55.143]                    // if-block "pin >= 8"
[03:19:55.143]                      // =>  FALSE
[03:19:55.144]                    // skip if-block "pin >= 8"
[03:19:55.144]                  </control>
[03:19:55.144]                </sequence>
[03:19:55.144]            </block>
[03:19:55.144]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:19:55.144]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:19:55.145]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.145]            </block>
[03:19:55.145]          </sequence>
[03:19:55.145]      </block>
[03:19:55.145]      // end if-block "traceSWO"
[03:19:55.145]    </control>
[03:19:55.145]    <control if="traceTPIU" while="" timeout="0" info="">
[03:19:55.145]      // if-block "traceTPIU"
[03:19:55.145]        // =>  FALSE
[03:19:55.146]      // skip if-block "traceTPIU"
[03:19:55.146]    </control>
[03:19:55.146]  </sequence>
[03:19:55.146]  
[03:19:55.149]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:19:55.149]  
[03:19:55.150]  <debugvars>
[03:19:55.150]    // Pre-defined
[03:19:55.150]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:19:55.150]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:19:55.150]    __dp=0x00000000
[03:19:55.151]    __ap=0x00000000
[03:19:55.151]    __traceout=0x00000001      (SWO Trace)
[03:19:55.151]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:19:55.151]    __FlashAddr=0x00000000
[03:19:55.151]    __FlashLen=0x00000000
[03:19:55.151]    __FlashArg=0x00000000
[03:19:55.152]    __FlashOp=0x00000000
[03:19:55.152]    __Result=0x00000000
[03:19:55.152]    
[03:19:55.152]    // User-defined
[03:19:55.152]    DbgMCU_CR=0x00000007
[03:19:55.152]    DbgMCU_APB1_Fz=0x00000000
[03:19:55.153]    DbgMCU_APB2_Fz=0x00000000
[03:19:55.153]    TraceClk_Pin=0x00040002
[03:19:55.153]    TraceD0_Pin=0x00040003
[03:19:55.153]    TraceD1_Pin=0x00040004
[03:19:55.153]    TraceD2_Pin=0x00040005
[03:19:55.153]    TraceD3_Pin=0x00040006
[03:19:55.154]  </debugvars>
[03:19:55.154]  
[03:19:55.154]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:19:55.154]    <block atomic="false" info="">
[03:19:55.154]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:19:55.154]        // -> [traceSWO <= 0x00000001]
[03:19:55.154]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:19:55.155]        // -> [traceTPIU <= 0x00000000]
[03:19:55.155]    </block>
[03:19:55.155]    <control if="traceSWO" while="" timeout="0" info="">
[03:19:55.155]      // if-block "traceSWO"
[03:19:55.155]        // =>  TRUE
[03:19:55.155]      <block atomic="false" info="">
[03:19:55.155]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:19:55.156]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:19:55.156]            <block atomic="false" info="">
[03:19:55.156]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:19:55.156]                // -> [dbgmcu_val <= 0x00000000]
[03:19:55.156]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:19:55.156]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:19:55.156]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:19:55.157]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.157]                // -> [dbgmcu_val <= 0x00000007]
[03:19:55.157]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:19:55.157]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:19:55.157]              Sequence("ConfigureTraceSWOPin");
[03:19:55.158]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:19:55.158]                  <block atomic="false" info="">
[03:19:55.158]                    __var pin     = 0;
[03:19:55.158]                      // -> [pin <= 0x00000000]
[03:19:55.158]                    __var port    = 0;
[03:19:55.158]                      // -> [port <= 0x00000000]
[03:19:55.158]                    __var portAdr = 0;
[03:19:55.158]                      // -> [portAdr <= 0x00000000]
[03:19:55.159]                    __var pos     = 0;
[03:19:55.159]                      // -> [pos <= 0x00000000]
[03:19:55.159]                    __var SWO_Pin = 0x00010003;          // PB3
[03:19:55.159]                      // -> [SWO_Pin <= 0x00010003]
[03:19:55.159]                  </block>
[03:19:55.159]                  <block atomic="false" info="configure SWO">
[03:19:55.159]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:19:55.160]                      // -> [pin <= 0x00000003]
[03:19:55.160]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:19:55.160]                      // -> [port <= 0x00000001]
[03:19:55.160]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:19:55.160]                      // -> [portAdr <= 0x40020400]
[03:19:55.160]                    pos = pin * 2;
[03:19:55.160]                      // -> [pos <= 0x00000006]
[03:19:55.161]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:19:55.161]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.161]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.162]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:19:55.162]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.162]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.162]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:19:55.163]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.163]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.164]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:19:55.164]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.164]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.164]                  </block>
[03:19:55.165]                  <control if="pin <  8" while="" timeout="0" info="">
[03:19:55.165]                    // if-block "pin <  8"
[03:19:55.165]                      // =>  TRUE
[03:19:55.165]                    <block atomic="false" info="">
[03:19:55.165]                      pos = ((pin    ) & 7) * 4;
[03:19:55.165]                        // -> [pos <= 0x0000000C]
[03:19:55.165]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:19:55.166]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.166]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.167]                    </block>
[03:19:55.167]                    // end if-block "pin <  8"
[03:19:55.167]                  </control>
[03:19:55.167]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:19:55.167]                    // if-block "pin >= 8"
[03:19:55.167]                      // =>  FALSE
[03:19:55.167]                    // skip if-block "pin >= 8"
[03:19:55.168]                  </control>
[03:19:55.168]                </sequence>
[03:19:55.168]            </block>
[03:19:55.168]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:19:55.168]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:19:55.169]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.169]            </block>
[03:19:55.169]          </sequence>
[03:19:55.169]      </block>
[03:19:55.169]      // end if-block "traceSWO"
[03:19:55.169]    </control>
[03:19:55.169]    <control if="traceTPIU" while="" timeout="0" info="">
[03:19:55.170]      // if-block "traceTPIU"
[03:19:55.170]        // =>  FALSE
[03:19:55.170]      // skip if-block "traceTPIU"
[03:19:55.170]    </control>
[03:19:55.170]  </sequence>
[03:19:55.170]  
[03:19:55.388]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:19:55.388]  
[03:19:55.388]  <debugvars>
[03:19:55.388]    // Pre-defined
[03:19:55.389]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:19:55.389]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:19:55.389]    __dp=0x00000000
[03:19:55.389]    __ap=0x00000000
[03:19:55.389]    __traceout=0x00000001      (SWO Trace)
[03:19:55.389]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:19:55.390]    __FlashAddr=0x00000000
[03:19:55.390]    __FlashLen=0x00000000
[03:19:55.390]    __FlashArg=0x00000000
[03:19:55.390]    __FlashOp=0x00000000
[03:19:55.390]    __Result=0x00000000
[03:19:55.391]    
[03:19:55.391]    // User-defined
[03:19:55.391]    DbgMCU_CR=0x00000007
[03:19:55.391]    DbgMCU_APB1_Fz=0x00000000
[03:19:55.391]    DbgMCU_APB2_Fz=0x00000000
[03:19:55.391]    TraceClk_Pin=0x00040002
[03:19:55.391]    TraceD0_Pin=0x00040003
[03:19:55.392]    TraceD1_Pin=0x00040004
[03:19:55.392]    TraceD2_Pin=0x00040005
[03:19:55.392]    TraceD3_Pin=0x00040006
[03:19:55.392]  </debugvars>
[03:19:55.392]  
[03:19:55.392]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:19:55.393]    <block atomic="false" info="">
[03:19:55.393]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:19:55.393]        // -> [traceSWO <= 0x00000001]
[03:19:55.393]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:19:55.393]        // -> [traceTPIU <= 0x00000000]
[03:19:55.393]    </block>
[03:19:55.394]    <control if="traceSWO" while="" timeout="0" info="">
[03:19:55.394]      // if-block "traceSWO"
[03:19:55.394]        // =>  TRUE
[03:19:55.394]      <block atomic="false" info="">
[03:19:55.394]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:19:55.394]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:19:55.395]            <block atomic="false" info="">
[03:19:55.395]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:19:55.395]                // -> [dbgmcu_val <= 0x00000000]
[03:19:55.395]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:19:55.395]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:19:55.395]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:19:55.396]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.396]                // -> [dbgmcu_val <= 0x00000007]
[03:19:55.396]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:19:55.396]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:19:55.396]              Sequence("ConfigureTraceSWOPin");
[03:19:55.396]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:19:55.397]                  <block atomic="false" info="">
[03:19:55.397]                    __var pin     = 0;
[03:19:55.397]                      // -> [pin <= 0x00000000]
[03:19:55.397]                    __var port    = 0;
[03:19:55.397]                      // -> [port <= 0x00000000]
[03:19:55.397]                    __var portAdr = 0;
[03:19:55.397]                      // -> [portAdr <= 0x00000000]
[03:19:55.398]                    __var pos     = 0;
[03:19:55.398]                      // -> [pos <= 0x00000000]
[03:19:55.398]                    __var SWO_Pin = 0x00010003;          // PB3
[03:19:55.398]                      // -> [SWO_Pin <= 0x00010003]
[03:19:55.398]                  </block>
[03:19:55.398]                  <block atomic="false" info="configure SWO">
[03:19:55.398]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:19:55.398]                      // -> [pin <= 0x00000003]
[03:19:55.399]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:19:55.399]                      // -> [port <= 0x00000001]
[03:19:55.399]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:19:55.399]                      // -> [portAdr <= 0x40020400]
[03:19:55.399]                    pos = pin * 2;
[03:19:55.399]                      // -> [pos <= 0x00000006]
[03:19:55.400]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:19:55.400]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.401]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.401]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:19:55.401]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.402]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.402]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:19:55.402]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.403]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.403]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:19:55.403]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.404]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.404]                  </block>
[03:19:55.404]                  <control if="pin <  8" while="" timeout="0" info="">
[03:19:55.404]                    // if-block "pin <  8"
[03:19:55.404]                      // =>  TRUE
[03:19:55.404]                    <block atomic="false" info="">
[03:19:55.404]                      pos = ((pin    ) & 7) * 4;
[03:19:55.404]                        // -> [pos <= 0x0000000C]
[03:19:55.404]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:19:55.405]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.405]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.405]                    </block>
[03:19:55.405]                    // end if-block "pin <  8"
[03:19:55.406]                  </control>
[03:19:55.406]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:19:55.406]                    // if-block "pin >= 8"
[03:19:55.406]                      // =>  FALSE
[03:19:55.406]                    // skip if-block "pin >= 8"
[03:19:55.406]                  </control>
[03:19:55.406]                </sequence>
[03:19:55.406]            </block>
[03:19:55.406]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:19:55.407]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:19:55.407]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:55.407]            </block>
[03:19:55.407]          </sequence>
[03:19:55.407]      </block>
[03:19:55.407]      // end if-block "traceSWO"
[03:19:55.408]    </control>
[03:19:55.408]    <control if="traceTPIU" while="" timeout="0" info="">
[03:19:55.408]      // if-block "traceTPIU"
[03:19:55.408]        // =>  FALSE
[03:19:55.408]      // skip if-block "traceTPIU"
[03:19:55.408]    </control>
[03:19:55.408]  </sequence>
[03:19:55.408]  
[03:22:25.007]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:22:25.007]  
[03:22:25.008]  <debugvars>
[03:22:25.008]    // Pre-defined
[03:22:25.008]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:22:25.009]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:22:25.009]    __dp=0x00000000
[03:22:25.009]    __ap=0x00000000
[03:22:25.009]    __traceout=0x00000001      (SWO Trace)
[03:22:25.009]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:22:25.010]    __FlashAddr=0x00000000
[03:22:25.010]    __FlashLen=0x00000000
[03:22:25.010]    __FlashArg=0x00000000
[03:22:25.010]    __FlashOp=0x00000000
[03:22:25.010]    __Result=0x00000000
[03:22:25.010]    
[03:22:25.010]    // User-defined
[03:22:25.011]    DbgMCU_CR=0x00000007
[03:22:25.011]    DbgMCU_APB1_Fz=0x00000000
[03:22:25.011]    DbgMCU_APB2_Fz=0x00000000
[03:22:25.011]    TraceClk_Pin=0x00040002
[03:22:25.011]    TraceD0_Pin=0x00040003
[03:22:25.012]    TraceD1_Pin=0x00040004
[03:22:25.012]    TraceD2_Pin=0x00040005
[03:22:25.012]    TraceD3_Pin=0x00040006
[03:22:25.012]  </debugvars>
[03:22:25.012]  
[03:22:25.012]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:22:25.013]    <block atomic="false" info="">
[03:22:25.013]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:22:25.013]        // -> [traceSWO <= 0x00000001]
[03:22:25.013]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:22:25.013]        // -> [traceTPIU <= 0x00000000]
[03:22:25.014]    </block>
[03:22:25.014]    <control if="traceSWO" while="" timeout="0" info="">
[03:22:25.014]      // if-block "traceSWO"
[03:22:25.014]        // =>  TRUE
[03:22:25.014]      <block atomic="false" info="">
[03:22:25.014]        Sequence("DisableTraceSWO");
[03:22:25.015]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:22:25.015]            <block atomic="false" info="">
[03:22:25.015]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:22:25.015]                // -> [dbgmcu_val <= 0x00000000]
[03:22:25.015]            </block>
[03:22:25.015]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:22:25.016]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:22:25.016]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:22:25.016]                // -> [dbgmcu_val <= 0x00000007]
[03:22:25.016]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:22:25.017]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:22:25.017]            </block>
[03:22:25.017]          </sequence>
[03:22:25.017]      </block>
[03:22:25.017]      // end if-block "traceSWO"
[03:22:25.018]    </control>
[03:22:25.018]    <control if="traceTPIU" while="" timeout="0" info="">
[03:22:25.018]      // if-block "traceTPIU"
[03:22:25.018]        // =>  FALSE
[03:22:25.018]      // skip if-block "traceTPIU"
[03:22:25.019]    </control>
[03:22:25.019]  </sequence>
[03:22:25.019]  
