/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : C:\Users\gonza\STM32Cube\Repository\STM32Cube_FW_F7_V1.14.0 modificado\Projects\STM32746G-Discovery\Examples\BSP\MDK-ARM\Project_Sequences_0015.log
 *  Created     : 03:04:32 (07/05/2020)
 *  Device      : STM32F746NGHx
 *  PDSC File   : C:\Users\gonza\AppData\Local\Arm\Packs\Keil\STM32F7xx_DFP\2.12.0\Keil.STM32F7xx_DFP.pdsc
 *  Config File : C:\Users\gonza\STM32Cube\Repository\STM32Cube_FW_F7_V1.14.0 modificado\Projects\STM32746G-Discovery\Examples\BSP\MDK-ARM\DebugConfig\STM32746G_DISCOVERY_STM32F746NGHx_2.0.0.dbgconf
 *
 */

[03:04:32.223]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:04:32.223]  
[03:04:32.223]  <debugvars>
[03:04:32.224]    // Pre-defined
[03:04:32.224]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:32.224]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:04:32.224]    __dp=0x00000000
[03:04:32.224]    __ap=0x00000000
[03:04:32.225]    __traceout=0x00000001      (SWO Trace)
[03:04:32.225]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:32.226]    __FlashAddr=0x00000000
[03:04:32.226]    __FlashLen=0x00000000
[03:04:32.226]    __FlashArg=0x00000000
[03:04:32.226]    __FlashOp=0x00000000
[03:04:32.226]    __Result=0x00000000
[03:04:32.227]    
[03:04:32.227]    // User-defined
[03:04:32.227]    DbgMCU_CR=0x00000007
[03:04:32.227]    DbgMCU_APB1_Fz=0x00000000
[03:04:32.228]    DbgMCU_APB2_Fz=0x00000000
[03:04:32.228]    TraceClk_Pin=0x00040002
[03:04:32.229]    TraceD0_Pin=0x00040003
[03:04:32.229]    TraceD1_Pin=0x00040004
[03:04:32.229]    TraceD2_Pin=0x00040005
[03:04:32.229]    TraceD3_Pin=0x00040006
[03:04:32.229]  </debugvars>
[03:04:32.230]  
[03:04:32.230]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:04:32.231]    <block atomic="false" info="">
[03:04:32.231]      Sequence("CheckID");
[03:04:32.231]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:04:32.231]          <block atomic="false" info="">
[03:04:32.231]            __var pidr1 = 0;
[03:04:32.231]              // -> [pidr1 <= 0x00000000]
[03:04:32.232]            __var pidr2 = 0;
[03:04:32.232]              // -> [pidr2 <= 0x00000000]
[03:04:32.232]            __var jep106id = 0;
[03:04:32.233]              // -> [jep106id <= 0x00000000]
[03:04:32.233]            __var ROMTableBase = 0;
[03:04:32.233]              // -> [ROMTableBase <= 0x00000000]
[03:04:32.233]            __ap = 0;      // AHB-AP
[03:04:32.233]              // -> [__ap <= 0x00000000]
[03:04:32.234]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:04:32.234]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:04:32.235]              // -> [ROMTableBase <= 0xE00FD000]
[03:04:32.235]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:04:32.236]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:04:32.236]              // -> [pidr1 <= 0x00000004]
[03:04:32.236]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:04:32.237]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:04:32.238]              // -> [pidr2 <= 0x0000001A]
[03:04:32.238]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:04:32.238]              // -> [jep106id <= 0x00000020]
[03:04:32.239]          </block>
[03:04:32.239]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:04:32.239]            // if-block "jep106id != 0x20"
[03:04:32.239]              // =>  FALSE
[03:04:32.240]            // skip if-block "jep106id != 0x20"
[03:04:32.241]          </control>
[03:04:32.241]        </sequence>
[03:04:32.241]    </block>
[03:04:32.241]  </sequence>
[03:04:32.242]  
[03:04:32.256]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:04:32.256]  
[03:04:32.257]  <debugvars>
[03:04:32.257]    // Pre-defined
[03:04:32.258]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:32.258]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:04:32.258]    __dp=0x00000000
[03:04:32.258]    __ap=0x00000000
[03:04:32.258]    __traceout=0x00000001      (SWO Trace)
[03:04:32.259]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:32.259]    __FlashAddr=0x00000000
[03:04:32.259]    __FlashLen=0x00000000
[03:04:32.259]    __FlashArg=0x00000000
[03:04:32.260]    __FlashOp=0x00000000
[03:04:32.260]    __Result=0x00000000
[03:04:32.261]    
[03:04:32.261]    // User-defined
[03:04:32.261]    DbgMCU_CR=0x00000007
[03:04:32.261]    DbgMCU_APB1_Fz=0x00000000
[03:04:32.261]    DbgMCU_APB2_Fz=0x00000000
[03:04:32.261]    TraceClk_Pin=0x00040002
[03:04:32.261]    TraceD0_Pin=0x00040003
[03:04:32.261]    TraceD1_Pin=0x00040004
[03:04:32.262]    TraceD2_Pin=0x00040005
[03:04:32.262]    TraceD3_Pin=0x00040006
[03:04:32.262]  </debugvars>
[03:04:32.262]  
[03:04:32.263]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:04:32.263]    <block atomic="false" info="">
[03:04:32.264]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:04:32.264]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:04:32.264]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:04:32.265]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:04:32.265]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:04:32.266]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:04:32.266]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:04:32.267]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:04:32.267]    </block>
[03:04:32.267]  </sequence>
[03:04:32.267]  
[03:05:03.109]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:05:03.109]  
[03:05:03.110]  <debugvars>
[03:05:03.110]    // Pre-defined
[03:05:03.110]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:03.111]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:05:03.111]    __dp=0x00000000
[03:05:03.111]    __ap=0x00000000
[03:05:03.112]    __traceout=0x00000001      (SWO Trace)
[03:05:03.114]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:03.115]    __FlashAddr=0x00000000
[03:05:03.118]    __FlashLen=0x00000000
[03:05:03.119]    __FlashArg=0x00000000
[03:05:03.120]    __FlashOp=0x00000000
[03:05:03.120]    __Result=0x00000000
[03:05:03.120]    
[03:05:03.120]    // User-defined
[03:05:03.121]    DbgMCU_CR=0x00000007
[03:05:03.121]    DbgMCU_APB1_Fz=0x00000000
[03:05:03.121]    DbgMCU_APB2_Fz=0x00000000
[03:05:03.122]    TraceClk_Pin=0x00040002
[03:05:03.123]    TraceD0_Pin=0x00040003
[03:05:03.123]    TraceD1_Pin=0x00040004
[03:05:03.123]    TraceD2_Pin=0x00040005
[03:05:03.124]    TraceD3_Pin=0x00040006
[03:05:03.124]  </debugvars>
[03:05:03.124]  
[03:05:03.124]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:05:03.125]    <block atomic="false" info="">
[03:05:03.125]      Sequence("CheckID");
[03:05:03.125]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:05:03.125]          <block atomic="false" info="">
[03:05:03.126]            __var pidr1 = 0;
[03:05:03.126]              // -> [pidr1 <= 0x00000000]
[03:05:03.126]            __var pidr2 = 0;
[03:05:03.126]              // -> [pidr2 <= 0x00000000]
[03:05:03.127]            __var jep106id = 0;
[03:05:03.127]              // -> [jep106id <= 0x00000000]
[03:05:03.127]            __var ROMTableBase = 0;
[03:05:03.127]              // -> [ROMTableBase <= 0x00000000]
[03:05:03.127]            __ap = 0;      // AHB-AP
[03:05:03.127]              // -> [__ap <= 0x00000000]
[03:05:03.128]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:05:03.128]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.128]              // -> [ROMTableBase <= 0xE00FD000]
[03:05:03.129]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:05:03.129]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.129]              // -> [pidr1 <= 0x00000004]
[03:05:03.129]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:05:03.130]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.131]              // -> [pidr2 <= 0x0000001A]
[03:05:03.131]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:05:03.131]              // -> [jep106id <= 0x00000020]
[03:05:03.132]          </block>
[03:05:03.132]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:05:03.132]            // if-block "jep106id != 0x20"
[03:05:03.132]              // =>  FALSE
[03:05:03.134]            // skip if-block "jep106id != 0x20"
[03:05:03.136]          </control>
[03:05:03.136]        </sequence>
[03:05:03.140]    </block>
[03:05:03.141]  </sequence>
[03:05:03.141]  
[03:05:03.156]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:05:03.156]  
[03:05:03.156]  <debugvars>
[03:05:03.157]    // Pre-defined
[03:05:03.157]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:03.157]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:05:03.158]    __dp=0x00000000
[03:05:03.158]    __ap=0x00000000
[03:05:03.158]    __traceout=0x00000001      (SWO Trace)
[03:05:03.158]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:03.159]    __FlashAddr=0x00000000
[03:05:03.159]    __FlashLen=0x00000000
[03:05:03.160]    __FlashArg=0x00000000
[03:05:03.160]    __FlashOp=0x00000000
[03:05:03.161]    __Result=0x00000000
[03:05:03.161]    
[03:05:03.161]    // User-defined
[03:05:03.161]    DbgMCU_CR=0x00000007
[03:05:03.161]    DbgMCU_APB1_Fz=0x00000000
[03:05:03.161]    DbgMCU_APB2_Fz=0x00000000
[03:05:03.162]    TraceClk_Pin=0x00040002
[03:05:03.162]    TraceD0_Pin=0x00040003
[03:05:03.162]    TraceD1_Pin=0x00040004
[03:05:03.162]    TraceD2_Pin=0x00040005
[03:05:03.163]    TraceD3_Pin=0x00040006
[03:05:03.164]  </debugvars>
[03:05:03.165]  
[03:05:03.165]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:05:03.165]    <block atomic="false" info="">
[03:05:03.165]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:05:03.166]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.166]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:05:03.167]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.167]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:05:03.167]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.168]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:05:03.168]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.169]    </block>
[03:05:03.169]  </sequence>
[03:05:03.172]  
[03:05:03.188]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:05:03.188]  
[03:05:03.227]  <debugvars>
[03:05:03.227]    // Pre-defined
[03:05:03.227]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:03.228]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:05:03.228]    __dp=0x00000000
[03:05:03.228]    __ap=0x00000000
[03:05:03.228]    __traceout=0x00000001      (SWO Trace)
[03:05:03.229]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:03.229]    __FlashAddr=0x00000000
[03:05:03.229]    __FlashLen=0x00000000
[03:05:03.229]    __FlashArg=0x00000000
[03:05:03.230]    __FlashOp=0x00000000
[03:05:03.230]    __Result=0x00000000
[03:05:03.230]    
[03:05:03.230]    // User-defined
[03:05:03.230]    DbgMCU_CR=0x00000007
[03:05:03.231]    DbgMCU_APB1_Fz=0x00000000
[03:05:03.231]    DbgMCU_APB2_Fz=0x00000000
[03:05:03.231]    TraceClk_Pin=0x00040002
[03:05:03.231]    TraceD0_Pin=0x00040003
[03:05:03.232]    TraceD1_Pin=0x00040004
[03:05:03.232]    TraceD2_Pin=0x00040005
[03:05:03.232]    TraceD3_Pin=0x00040006
[03:05:03.232]  </debugvars>
[03:05:03.232]  
[03:05:03.232]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:05:03.233]    <block atomic="false" info="">
[03:05:03.233]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:05:03.233]        // -> [traceSWO <= 0x00000001]
[03:05:03.233]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:05:03.233]        // -> [traceTPIU <= 0x00000000]
[03:05:03.233]    </block>
[03:05:03.233]    <control if="traceSWO" while="" timeout="0" info="">
[03:05:03.233]      // if-block "traceSWO"
[03:05:03.233]        // =>  TRUE
[03:05:03.234]      <block atomic="false" info="">
[03:05:03.234]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:05:03.234]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:05:03.234]            <block atomic="false" info="">
[03:05:03.234]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:05:03.234]                // -> [dbgmcu_val <= 0x00000000]
[03:05:03.234]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:05:03.235]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:05:03.235]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:05:03.235]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.235]                // -> [dbgmcu_val <= 0x00000007]
[03:05:03.235]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:05:03.235]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:05:03.236]              Sequence("ConfigureTraceSWOPin");
[03:05:03.236]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:05:03.236]                  <block atomic="false" info="">
[03:05:03.236]                    __var pin     = 0;
[03:05:03.236]                      // -> [pin <= 0x00000000]
[03:05:03.236]                    __var port    = 0;
[03:05:03.236]                      // -> [port <= 0x00000000]
[03:05:03.237]                    __var portAdr = 0;
[03:05:03.237]                      // -> [portAdr <= 0x00000000]
[03:05:03.237]                    __var pos     = 0;
[03:05:03.237]                      // -> [pos <= 0x00000000]
[03:05:03.237]                    __var SWO_Pin = 0x00010003;          // PB3
[03:05:03.237]                      // -> [SWO_Pin <= 0x00010003]
[03:05:03.238]                  </block>
[03:05:03.238]                  <block atomic="false" info="configure SWO">
[03:05:03.238]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:05:03.238]                      // -> [pin <= 0x00000003]
[03:05:03.238]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:05:03.239]                      // -> [port <= 0x00000001]
[03:05:03.239]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:05:03.239]                      // -> [portAdr <= 0x40020400]
[03:05:03.239]                    pos = pin * 2;
[03:05:03.239]                      // -> [pos <= 0x00000006]
[03:05:03.239]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:05:03.240]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.241]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.241]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:05:03.242]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.242]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.242]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:05:03.243]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.243]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.245]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:05:03.245]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.245]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.246]                  </block>
[03:05:03.246]                  <control if="pin <  8" while="" timeout="0" info="">
[03:05:03.246]                    // if-block "pin <  8"
[03:05:03.246]                      // =>  TRUE
[03:05:03.246]                    <block atomic="false" info="">
[03:05:03.246]                      pos = ((pin    ) & 7) * 4;
[03:05:03.246]                        // -> [pos <= 0x0000000C]
[03:05:03.246]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:05:03.247]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.247]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.247]                    </block>
[03:05:03.247]                    // end if-block "pin <  8"
[03:05:03.248]                  </control>
[03:05:03.248]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:05:03.248]                    // if-block "pin >= 8"
[03:05:03.248]                      // =>  FALSE
[03:05:03.248]                    // skip if-block "pin >= 8"
[03:05:03.248]                  </control>
[03:05:03.248]                </sequence>
[03:05:03.249]            </block>
[03:05:03.249]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:05:03.249]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:05:03.250]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.250]            </block>
[03:05:03.250]          </sequence>
[03:05:03.250]      </block>
[03:05:03.250]      // end if-block "traceSWO"
[03:05:03.251]    </control>
[03:05:03.251]    <control if="traceTPIU" while="" timeout="0" info="">
[03:05:03.251]      // if-block "traceTPIU"
[03:05:03.251]        // =>  FALSE
[03:05:03.251]      // skip if-block "traceTPIU"
[03:05:03.251]    </control>
[03:05:03.251]  </sequence>
[03:05:03.252]  
[03:05:03.255]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:05:03.255]  
[03:05:03.256]  <debugvars>
[03:05:03.256]    // Pre-defined
[03:05:03.256]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:03.257]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:05:03.257]    __dp=0x00000000
[03:05:03.258]    __ap=0x00000000
[03:05:03.259]    __traceout=0x00000001      (SWO Trace)
[03:05:03.259]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:03.262]    __FlashAddr=0x00000000
[03:05:03.262]    __FlashLen=0x00000000
[03:05:03.262]    __FlashArg=0x00000000
[03:05:03.262]    __FlashOp=0x00000000
[03:05:03.262]    __Result=0x00000000
[03:05:03.263]    
[03:05:03.263]    // User-defined
[03:05:03.263]    DbgMCU_CR=0x00000007
[03:05:03.263]    DbgMCU_APB1_Fz=0x00000000
[03:05:03.263]    DbgMCU_APB2_Fz=0x00000000
[03:05:03.263]    TraceClk_Pin=0x00040002
[03:05:03.263]    TraceD0_Pin=0x00040003
[03:05:03.264]    TraceD1_Pin=0x00040004
[03:05:03.264]    TraceD2_Pin=0x00040005
[03:05:03.264]    TraceD3_Pin=0x00040006
[03:05:03.264]  </debugvars>
[03:05:03.265]  
[03:05:03.265]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:05:03.265]    <block atomic="false" info="">
[03:05:03.265]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:05:03.266]        // -> [traceSWO <= 0x00000001]
[03:05:03.266]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:05:03.266]        // -> [traceTPIU <= 0x00000000]
[03:05:03.266]    </block>
[03:05:03.266]    <control if="traceSWO" while="" timeout="0" info="">
[03:05:03.267]      // if-block "traceSWO"
[03:05:03.267]        // =>  TRUE
[03:05:03.267]      <block atomic="false" info="">
[03:05:03.267]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:05:03.267]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:05:03.267]            <block atomic="false" info="">
[03:05:03.267]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:05:03.268]                // -> [dbgmcu_val <= 0x00000000]
[03:05:03.268]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:05:03.268]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:05:03.268]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:05:03.268]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.269]                // -> [dbgmcu_val <= 0x00000007]
[03:05:03.269]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:05:03.269]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:05:03.269]              Sequence("ConfigureTraceSWOPin");
[03:05:03.269]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:05:03.269]                  <block atomic="false" info="">
[03:05:03.270]                    __var pin     = 0;
[03:05:03.270]                      // -> [pin <= 0x00000000]
[03:05:03.270]                    __var port    = 0;
[03:05:03.270]                      // -> [port <= 0x00000000]
[03:05:03.270]                    __var portAdr = 0;
[03:05:03.270]                      // -> [portAdr <= 0x00000000]
[03:05:03.271]                    __var pos     = 0;
[03:05:03.271]                      // -> [pos <= 0x00000000]
[03:05:03.271]                    __var SWO_Pin = 0x00010003;          // PB3
[03:05:03.271]                      // -> [SWO_Pin <= 0x00010003]
[03:05:03.272]                  </block>
[03:05:03.272]                  <block atomic="false" info="configure SWO">
[03:05:03.272]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:05:03.272]                      // -> [pin <= 0x00000003]
[03:05:03.272]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:05:03.273]                      // -> [port <= 0x00000001]
[03:05:03.273]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:05:03.273]                      // -> [portAdr <= 0x40020400]
[03:05:03.273]                    pos = pin * 2;
[03:05:03.273]                      // -> [pos <= 0x00000006]
[03:05:03.273]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:05:03.274]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.274]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.275]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:05:03.276]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.276]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.276]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:05:03.277]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.277]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.278]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:05:03.278]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.279]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.279]                  </block>
[03:05:03.279]                  <control if="pin <  8" while="" timeout="0" info="">
[03:05:03.279]                    // if-block "pin <  8"
[03:05:03.279]                      // =>  TRUE
[03:05:03.279]                    <block atomic="false" info="">
[03:05:03.280]                      pos = ((pin    ) & 7) * 4;
[03:05:03.280]                        // -> [pos <= 0x0000000C]
[03:05:03.280]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:05:03.280]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.281]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.281]                    </block>
[03:05:03.281]                    // end if-block "pin <  8"
[03:05:03.282]                  </control>
[03:05:03.282]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:05:03.282]                    // if-block "pin >= 8"
[03:05:03.282]                      // =>  FALSE
[03:05:03.282]                    // skip if-block "pin >= 8"
[03:05:03.282]                  </control>
[03:05:03.282]                </sequence>
[03:05:03.282]            </block>
[03:05:03.283]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:05:03.283]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:05:03.283]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.284]            </block>
[03:05:03.284]          </sequence>
[03:05:03.284]      </block>
[03:05:03.284]      // end if-block "traceSWO"
[03:05:03.284]    </control>
[03:05:03.285]    <control if="traceTPIU" while="" timeout="0" info="">
[03:05:03.285]      // if-block "traceTPIU"
[03:05:03.285]        // =>  FALSE
[03:05:03.285]      // skip if-block "traceTPIU"
[03:05:03.285]    </control>
[03:05:03.285]  </sequence>
[03:05:03.285]  
[03:05:03.498]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:05:03.498]  
[03:05:03.498]  <debugvars>
[03:05:03.499]    // Pre-defined
[03:05:03.499]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:03.499]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:05:03.499]    __dp=0x00000000
[03:05:03.500]    __ap=0x00000000
[03:05:03.500]    __traceout=0x00000001      (SWO Trace)
[03:05:03.500]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:03.500]    __FlashAddr=0x00000000
[03:05:03.500]    __FlashLen=0x00000000
[03:05:03.500]    __FlashArg=0x00000000
[03:05:03.501]    __FlashOp=0x00000000
[03:05:03.501]    __Result=0x00000000
[03:05:03.501]    
[03:05:03.501]    // User-defined
[03:05:03.501]    DbgMCU_CR=0x00000007
[03:05:03.502]    DbgMCU_APB1_Fz=0x00000000
[03:05:03.502]    DbgMCU_APB2_Fz=0x00000000
[03:05:03.502]    TraceClk_Pin=0x00040002
[03:05:03.502]    TraceD0_Pin=0x00040003
[03:05:03.503]    TraceD1_Pin=0x00040004
[03:05:03.503]    TraceD2_Pin=0x00040005
[03:05:03.503]    TraceD3_Pin=0x00040006
[03:05:03.503]  </debugvars>
[03:05:03.503]  
[03:05:03.505]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:05:03.505]    <block atomic="false" info="">
[03:05:03.505]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:05:03.505]        // -> [traceSWO <= 0x00000001]
[03:05:03.506]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:05:03.506]        // -> [traceTPIU <= 0x00000000]
[03:05:03.506]    </block>
[03:05:03.506]    <control if="traceSWO" while="" timeout="0" info="">
[03:05:03.506]      // if-block "traceSWO"
[03:05:03.507]        // =>  TRUE
[03:05:03.507]      <block atomic="false" info="">
[03:05:03.507]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:05:03.507]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:05:03.507]            <block atomic="false" info="">
[03:05:03.507]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:05:03.508]                // -> [dbgmcu_val <= 0x00000000]
[03:05:03.509]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:05:03.511]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:05:03.511]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:05:03.512]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.512]                // -> [dbgmcu_val <= 0x00000007]
[03:05:03.512]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:05:03.513]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:05:03.513]              Sequence("ConfigureTraceSWOPin");
[03:05:03.513]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:05:03.513]                  <block atomic="false" info="">
[03:05:03.513]                    __var pin     = 0;
[03:05:03.514]                      // -> [pin <= 0x00000000]
[03:05:03.514]                    __var port    = 0;
[03:05:03.514]                      // -> [port <= 0x00000000]
[03:05:03.514]                    __var portAdr = 0;
[03:05:03.514]                      // -> [portAdr <= 0x00000000]
[03:05:03.515]                    __var pos     = 0;
[03:05:03.515]                      // -> [pos <= 0x00000000]
[03:05:03.515]                    __var SWO_Pin = 0x00010003;          // PB3
[03:05:03.515]                      // -> [SWO_Pin <= 0x00010003]
[03:05:03.515]                  </block>
[03:05:03.516]                  <block atomic="false" info="configure SWO">
[03:05:03.516]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:05:03.516]                      // -> [pin <= 0x00000003]
[03:05:03.516]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:05:03.516]                      // -> [port <= 0x00000001]
[03:05:03.517]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:05:03.517]                      // -> [portAdr <= 0x40020400]
[03:05:03.517]                    pos = pin * 2;
[03:05:03.517]                      // -> [pos <= 0x00000006]
[03:05:03.517]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:05:03.518]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.519]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.519]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:05:03.520]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.520]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.521]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:05:03.521]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.522]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.522]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:05:03.522]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.524]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.524]                  </block>
[03:05:03.524]                  <control if="pin <  8" while="" timeout="0" info="">
[03:05:03.524]                    // if-block "pin <  8"
[03:05:03.524]                      // =>  TRUE
[03:05:03.525]                    <block atomic="false" info="">
[03:05:03.525]                      pos = ((pin    ) & 7) * 4;
[03:05:03.525]                        // -> [pos <= 0x0000000C]
[03:05:03.525]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:05:03.526]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.527]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.527]                    </block>
[03:05:03.528]                    // end if-block "pin <  8"
[03:05:03.528]                  </control>
[03:05:03.528]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:05:03.528]                    // if-block "pin >= 8"
[03:05:03.528]                      // =>  FALSE
[03:05:03.529]                    // skip if-block "pin >= 8"
[03:05:03.529]                  </control>
[03:05:03.529]                </sequence>
[03:05:03.529]            </block>
[03:05:03.529]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:05:03.529]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:05:03.530]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:03.530]            </block>
[03:05:03.530]          </sequence>
[03:05:03.530]      </block>
[03:05:03.531]      // end if-block "traceSWO"
[03:05:03.531]    </control>
[03:05:03.531]    <control if="traceTPIU" while="" timeout="0" info="">
[03:05:03.531]      // if-block "traceTPIU"
[03:05:03.531]        // =>  FALSE
[03:05:03.531]      // skip if-block "traceTPIU"
[03:05:03.531]    </control>
[03:05:03.532]  </sequence>
[03:05:03.532]  
[03:05:36.818]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:05:36.818]  
[03:05:36.818]  <debugvars>
[03:05:36.818]    // Pre-defined
[03:05:36.818]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:36.819]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:05:36.819]    __dp=0x00000000
[03:05:36.819]    __ap=0x00000000
[03:05:36.819]    __traceout=0x00000001      (SWO Trace)
[03:05:36.819]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:36.820]    __FlashAddr=0x00000000
[03:05:36.820]    __FlashLen=0x00000000
[03:05:36.820]    __FlashArg=0x00000000
[03:05:36.820]    __FlashOp=0x00000000
[03:05:36.820]    __Result=0x00000000
[03:05:36.820]    
[03:05:36.820]    // User-defined
[03:05:36.820]    DbgMCU_CR=0x00000007
[03:05:36.821]    DbgMCU_APB1_Fz=0x00000000
[03:05:36.821]    DbgMCU_APB2_Fz=0x00000000
[03:05:36.821]    TraceClk_Pin=0x00040002
[03:05:36.821]    TraceD0_Pin=0x00040003
[03:05:36.821]    TraceD1_Pin=0x00040004
[03:05:36.822]    TraceD2_Pin=0x00040005
[03:05:36.822]    TraceD3_Pin=0x00040006
[03:05:36.822]  </debugvars>
[03:05:36.822]  
[03:05:36.822]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:05:36.822]    <block atomic="false" info="">
[03:05:36.823]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:05:36.823]        // -> [traceSWO <= 0x00000001]
[03:05:36.823]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:05:36.823]        // -> [traceTPIU <= 0x00000000]
[03:05:36.823]    </block>
[03:05:36.823]    <control if="traceSWO" while="" timeout="0" info="">
[03:05:36.823]      // if-block "traceSWO"
[03:05:36.824]        // =>  TRUE
[03:05:36.824]      <block atomic="false" info="">
[03:05:36.824]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:05:36.824]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:05:36.825]            <block atomic="false" info="">
[03:05:36.825]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:05:36.825]                // -> [dbgmcu_val <= 0x00000000]
[03:05:36.825]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:05:36.825]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:05:36.825]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:05:36.826]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:05:36.826]                // -> [dbgmcu_val <= 0x00000007]
[03:05:36.826]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:05:36.826]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:05:36.827]              Sequence("ConfigureTraceSWOPin");
[03:05:36.827]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:05:36.827]                  <block atomic="false" info="">
[03:05:36.827]                    __var pin     = 0;
[03:05:36.827]                      // -> [pin <= 0x00000000]
[03:05:36.827]                    __var port    = 0;
[03:05:36.827]                      // -> [port <= 0x00000000]
[03:05:36.828]                    __var portAdr = 0;
[03:05:36.828]                      // -> [portAdr <= 0x00000000]
[03:05:36.828]                    __var pos     = 0;
[03:05:36.828]                      // -> [pos <= 0x00000000]
[03:05:36.828]                    __var SWO_Pin = 0x00010003;          // PB3
[03:05:36.828]                      // -> [SWO_Pin <= 0x00010003]
[03:05:36.828]                  </block>
[03:05:36.828]                  <block atomic="false" info="configure SWO">
[03:05:36.829]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:05:36.829]                      // -> [pin <= 0x00000003]
[03:05:36.829]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:05:36.829]                      // -> [port <= 0x00000001]
[03:05:36.829]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:05:36.829]                      // -> [portAdr <= 0x40020400]
[03:05:36.829]                    pos = pin * 2;
[03:05:36.830]                      // -> [pos <= 0x00000006]
[03:05:36.830]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:05:36.830]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:05:36.831]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:36.831]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:05:36.831]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:05:36.832]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:36.832]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:05:36.832]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:05:36.833]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:36.833]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:05:36.833]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:05:36.834]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:36.834]                  </block>
[03:05:36.834]                  <control if="pin <  8" while="" timeout="0" info="">
[03:05:36.834]                    // if-block "pin <  8"
[03:05:36.834]                      // =>  TRUE
[03:05:36.834]                    <block atomic="false" info="">
[03:05:36.834]                      pos = ((pin    ) & 7) * 4;
[03:05:36.834]                        // -> [pos <= 0x0000000C]
[03:05:36.835]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:05:36.835]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:05:36.836]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:36.836]                    </block>
[03:05:36.836]                    // end if-block "pin <  8"
[03:05:36.836]                  </control>
[03:05:36.836]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:05:36.836]                    // if-block "pin >= 8"
[03:05:36.836]                      // =>  FALSE
[03:05:36.837]                    // skip if-block "pin >= 8"
[03:05:36.837]                  </control>
[03:05:36.837]                </sequence>
[03:05:36.837]            </block>
[03:05:36.837]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:05:36.837]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:05:36.838]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:05:36.838]            </block>
[03:05:36.838]          </sequence>
[03:05:36.838]      </block>
[03:05:36.838]      // end if-block "traceSWO"
[03:05:36.838]    </control>
[03:05:36.838]    <control if="traceTPIU" while="" timeout="0" info="">
[03:05:36.839]      // if-block "traceTPIU"
[03:05:36.839]        // =>  FALSE
[03:05:36.839]      // skip if-block "traceTPIU"
[03:05:36.839]    </control>
[03:05:36.839]  </sequence>
[03:05:36.839]  
[03:06:02.770]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:06:02.770]  
[03:06:02.771]  <debugvars>
[03:06:02.771]    // Pre-defined
[03:06:02.771]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:02.772]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:06:02.772]    __dp=0x00000000
[03:06:02.772]    __ap=0x00000000
[03:06:02.772]    __traceout=0x00000001      (SWO Trace)
[03:06:02.772]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:02.773]    __FlashAddr=0x00000000
[03:06:02.773]    __FlashLen=0x00000000
[03:06:02.773]    __FlashArg=0x00000000
[03:06:02.773]    __FlashOp=0x00000000
[03:06:02.773]    __Result=0x00000000
[03:06:02.773]    
[03:06:02.773]    // User-defined
[03:06:02.774]    DbgMCU_CR=0x00000007
[03:06:02.774]    DbgMCU_APB1_Fz=0x00000000
[03:06:02.774]    DbgMCU_APB2_Fz=0x00000000
[03:06:02.774]    TraceClk_Pin=0x00040002
[03:06:02.774]    TraceD0_Pin=0x00040003
[03:06:02.775]    TraceD1_Pin=0x00040004
[03:06:02.775]    TraceD2_Pin=0x00040005
[03:06:02.775]    TraceD3_Pin=0x00040006
[03:06:02.775]  </debugvars>
[03:06:02.775]  
[03:06:02.775]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:06:02.775]    <block atomic="false" info="">
[03:06:02.776]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:06:02.776]        // -> [traceSWO <= 0x00000001]
[03:06:02.776]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:06:02.776]        // -> [traceTPIU <= 0x00000000]
[03:06:02.776]    </block>
[03:06:02.777]    <control if="traceSWO" while="" timeout="0" info="">
[03:06:02.777]      // if-block "traceSWO"
[03:06:02.777]        // =>  TRUE
[03:06:02.777]      <block atomic="false" info="">
[03:06:02.777]        Sequence("DisableTraceSWO");
[03:06:02.777]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:06:02.777]            <block atomic="false" info="">
[03:06:02.778]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:06:02.778]                // -> [dbgmcu_val <= 0x00000000]
[03:06:02.778]            </block>
[03:06:02.778]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:06:02.778]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:06:02.779]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:06:02.779]                // -> [dbgmcu_val <= 0x00000007]
[03:06:02.779]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:06:02.779]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:02.780]            </block>
[03:06:02.780]          </sequence>
[03:06:02.780]      </block>
[03:06:02.780]      // end if-block "traceSWO"
[03:06:02.780]    </control>
[03:06:02.780]    <control if="traceTPIU" while="" timeout="0" info="">
[03:06:02.780]      // if-block "traceTPIU"
[03:06:02.780]        // =>  FALSE
[03:06:02.780]      // skip if-block "traceTPIU"
[03:06:02.781]    </control>
[03:06:02.781]  </sequence>
[03:06:02.781]  
[03:06:11.502]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:06:11.502]  
[03:06:11.502]  <debugvars>
[03:06:11.502]    // Pre-defined
[03:06:11.503]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:11.503]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:06:11.503]    __dp=0x00000000
[03:06:11.503]    __ap=0x00000000
[03:06:11.503]    __traceout=0x00000001      (SWO Trace)
[03:06:11.504]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:11.504]    __FlashAddr=0x00000000
[03:06:11.504]    __FlashLen=0x00000000
[03:06:11.504]    __FlashArg=0x00000000
[03:06:11.504]    __FlashOp=0x00000000
[03:06:11.505]    __Result=0x00000000
[03:06:11.505]    
[03:06:11.505]    // User-defined
[03:06:11.505]    DbgMCU_CR=0x00000007
[03:06:11.505]    DbgMCU_APB1_Fz=0x00000000
[03:06:11.505]    DbgMCU_APB2_Fz=0x00000000
[03:06:11.506]    TraceClk_Pin=0x00040002
[03:06:11.506]    TraceD0_Pin=0x00040003
[03:06:11.506]    TraceD1_Pin=0x00040004
[03:06:11.506]    TraceD2_Pin=0x00040005
[03:06:11.506]    TraceD3_Pin=0x00040006
[03:06:11.507]  </debugvars>
[03:06:11.507]  
[03:06:11.507]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:06:11.507]    <block atomic="false" info="">
[03:06:11.507]      Sequence("CheckID");
[03:06:11.508]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:06:11.508]          <block atomic="false" info="">
[03:06:11.508]            __var pidr1 = 0;
[03:06:11.508]              // -> [pidr1 <= 0x00000000]
[03:06:11.508]            __var pidr2 = 0;
[03:06:11.509]              // -> [pidr2 <= 0x00000000]
[03:06:11.509]            __var jep106id = 0;
[03:06:11.509]              // -> [jep106id <= 0x00000000]
[03:06:11.509]            __var ROMTableBase = 0;
[03:06:11.509]              // -> [ROMTableBase <= 0x00000000]
[03:06:11.509]            __ap = 0;      // AHB-AP
[03:06:11.510]              // -> [__ap <= 0x00000000]
[03:06:11.510]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:06:11.510]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:06:11.511]              // -> [ROMTableBase <= 0xE00FD000]
[03:06:11.511]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:06:11.511]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:06:11.512]              // -> [pidr1 <= 0x00000004]
[03:06:11.512]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:06:11.512]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:06:11.512]              // -> [pidr2 <= 0x0000001A]
[03:06:11.513]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:06:11.513]              // -> [jep106id <= 0x00000020]
[03:06:11.513]          </block>
[03:06:11.513]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:06:11.513]            // if-block "jep106id != 0x20"
[03:06:11.514]              // =>  FALSE
[03:06:11.514]            // skip if-block "jep106id != 0x20"
[03:06:11.514]          </control>
[03:06:11.514]        </sequence>
[03:06:11.514]    </block>
[03:06:11.514]  </sequence>
[03:06:11.515]  
[03:06:11.530]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:06:11.530]  
[03:06:11.530]  <debugvars>
[03:06:11.530]    // Pre-defined
[03:06:11.531]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:11.531]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:06:11.531]    __dp=0x00000000
[03:06:11.531]    __ap=0x00000000
[03:06:11.531]    __traceout=0x00000001      (SWO Trace)
[03:06:11.531]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:11.532]    __FlashAddr=0x00000000
[03:06:11.532]    __FlashLen=0x00000000
[03:06:11.532]    __FlashArg=0x00000000
[03:06:11.532]    __FlashOp=0x00000000
[03:06:11.532]    __Result=0x00000000
[03:06:11.533]    
[03:06:11.533]    // User-defined
[03:06:11.533]    DbgMCU_CR=0x00000007
[03:06:11.533]    DbgMCU_APB1_Fz=0x00000000
[03:06:11.533]    DbgMCU_APB2_Fz=0x00000000
[03:06:11.533]    TraceClk_Pin=0x00040002
[03:06:11.534]    TraceD0_Pin=0x00040003
[03:06:11.534]    TraceD1_Pin=0x00040004
[03:06:11.534]    TraceD2_Pin=0x00040005
[03:06:11.534]    TraceD3_Pin=0x00040006
[03:06:11.534]  </debugvars>
[03:06:11.534]  
[03:06:11.535]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:06:11.535]    <block atomic="false" info="">
[03:06:11.535]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:06:11.535]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:11.536]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:06:11.536]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:11.536]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:06:11.537]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:11.537]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:06:11.538]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:11.538]    </block>
[03:06:11.538]  </sequence>
[03:06:11.538]  
[03:06:42.452]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:06:42.452]  
[03:06:42.452]  <debugvars>
[03:06:42.453]    // Pre-defined
[03:06:42.453]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:42.453]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:06:42.453]    __dp=0x00000000
[03:06:42.453]    __ap=0x00000000
[03:06:42.453]    __traceout=0x00000001      (SWO Trace)
[03:06:42.454]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:42.454]    __FlashAddr=0x00000000
[03:06:42.454]    __FlashLen=0x00000000
[03:06:42.454]    __FlashArg=0x00000000
[03:06:42.454]    __FlashOp=0x00000000
[03:06:42.454]    __Result=0x00000000
[03:06:42.454]    
[03:06:42.454]    // User-defined
[03:06:42.455]    DbgMCU_CR=0x00000007
[03:06:42.455]    DbgMCU_APB1_Fz=0x00000000
[03:06:42.455]    DbgMCU_APB2_Fz=0x00000000
[03:06:42.455]    TraceClk_Pin=0x00040002
[03:06:42.455]    TraceD0_Pin=0x00040003
[03:06:42.456]    TraceD1_Pin=0x00040004
[03:06:42.456]    TraceD2_Pin=0x00040005
[03:06:42.456]    TraceD3_Pin=0x00040006
[03:06:42.456]  </debugvars>
[03:06:42.456]  
[03:06:42.456]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:06:42.456]    <block atomic="false" info="">
[03:06:42.457]      Sequence("CheckID");
[03:06:42.457]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:06:42.457]          <block atomic="false" info="">
[03:06:42.457]            __var pidr1 = 0;
[03:06:42.457]              // -> [pidr1 <= 0x00000000]
[03:06:42.457]            __var pidr2 = 0;
[03:06:42.458]              // -> [pidr2 <= 0x00000000]
[03:06:42.458]            __var jep106id = 0;
[03:06:42.458]              // -> [jep106id <= 0x00000000]
[03:06:42.458]            __var ROMTableBase = 0;
[03:06:42.458]              // -> [ROMTableBase <= 0x00000000]
[03:06:42.458]            __ap = 0;      // AHB-AP
[03:06:42.459]              // -> [__ap <= 0x00000000]
[03:06:42.459]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:06:42.459]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.459]              // -> [ROMTableBase <= 0xE00FD000]
[03:06:42.459]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:06:42.460]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.460]              // -> [pidr1 <= 0x00000004]
[03:06:42.460]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:06:42.461]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.461]              // -> [pidr2 <= 0x0000001A]
[03:06:42.461]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:06:42.461]              // -> [jep106id <= 0x00000020]
[03:06:42.461]          </block>
[03:06:42.461]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:06:42.461]            // if-block "jep106id != 0x20"
[03:06:42.462]              // =>  FALSE
[03:06:42.462]            // skip if-block "jep106id != 0x20"
[03:06:42.462]          </control>
[03:06:42.462]        </sequence>
[03:06:42.462]    </block>
[03:06:42.462]  </sequence>
[03:06:42.462]  
[03:06:42.478]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:06:42.478]  
[03:06:42.478]  <debugvars>
[03:06:42.478]    // Pre-defined
[03:06:42.478]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:42.478]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:06:42.479]    __dp=0x00000000
[03:06:42.479]    __ap=0x00000000
[03:06:42.479]    __traceout=0x00000001      (SWO Trace)
[03:06:42.479]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:42.479]    __FlashAddr=0x00000000
[03:06:42.480]    __FlashLen=0x00000000
[03:06:42.480]    __FlashArg=0x00000000
[03:06:42.480]    __FlashOp=0x00000000
[03:06:42.480]    __Result=0x00000000
[03:06:42.481]    
[03:06:42.481]    // User-defined
[03:06:42.481]    DbgMCU_CR=0x00000007
[03:06:42.481]    DbgMCU_APB1_Fz=0x00000000
[03:06:42.481]    DbgMCU_APB2_Fz=0x00000000
[03:06:42.481]    TraceClk_Pin=0x00040002
[03:06:42.481]    TraceD0_Pin=0x00040003
[03:06:42.482]    TraceD1_Pin=0x00040004
[03:06:42.482]    TraceD2_Pin=0x00040005
[03:06:42.482]    TraceD3_Pin=0x00040006
[03:06:42.482]  </debugvars>
[03:06:42.482]  
[03:06:42.483]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:06:42.483]    <block atomic="false" info="">
[03:06:42.483]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:06:42.484]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.484]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:06:42.485]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.485]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:06:42.486]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.486]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:06:42.486]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.487]    </block>
[03:06:42.487]  </sequence>
[03:06:42.487]  
[03:06:42.503]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:06:42.503]  
[03:06:42.503]  <debugvars>
[03:06:42.504]    // Pre-defined
[03:06:42.504]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:42.504]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:06:42.504]    __dp=0x00000000
[03:06:42.504]    __ap=0x00000000
[03:06:42.505]    __traceout=0x00000001      (SWO Trace)
[03:06:42.505]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:42.505]    __FlashAddr=0x00000000
[03:06:42.505]    __FlashLen=0x00000000
[03:06:42.505]    __FlashArg=0x00000000
[03:06:42.506]    __FlashOp=0x00000000
[03:06:42.506]    __Result=0x00000000
[03:06:42.506]    
[03:06:42.506]    // User-defined
[03:06:42.506]    DbgMCU_CR=0x00000007
[03:06:42.507]    DbgMCU_APB1_Fz=0x00000000
[03:06:42.507]    DbgMCU_APB2_Fz=0x00000000
[03:06:42.507]    TraceClk_Pin=0x00040002
[03:06:42.507]    TraceD0_Pin=0x00040003
[03:06:42.507]    TraceD1_Pin=0x00040004
[03:06:42.507]    TraceD2_Pin=0x00040005
[03:06:42.508]    TraceD3_Pin=0x00040006
[03:06:42.508]  </debugvars>
[03:06:42.508]  
[03:06:42.508]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:06:42.509]    <block atomic="false" info="">
[03:06:42.509]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:06:42.509]        // -> [traceSWO <= 0x00000001]
[03:06:42.509]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:06:42.509]        // -> [traceTPIU <= 0x00000000]
[03:06:42.510]    </block>
[03:06:42.510]    <control if="traceSWO" while="" timeout="0" info="">
[03:06:42.510]      // if-block "traceSWO"
[03:06:42.510]        // =>  TRUE
[03:06:42.510]      <block atomic="false" info="">
[03:06:42.510]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:06:42.511]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:06:42.511]            <block atomic="false" info="">
[03:06:42.511]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:06:42.511]                // -> [dbgmcu_val <= 0x00000000]
[03:06:42.511]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:06:42.512]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:06:42.512]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:06:42.512]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.513]                // -> [dbgmcu_val <= 0x00000007]
[03:06:42.513]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:06:42.513]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:06:42.513]              Sequence("ConfigureTraceSWOPin");
[03:06:42.513]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:06:42.514]                  <block atomic="false" info="">
[03:06:42.514]                    __var pin     = 0;
[03:06:42.514]                      // -> [pin <= 0x00000000]
[03:06:42.514]                    __var port    = 0;
[03:06:42.514]                      // -> [port <= 0x00000000]
[03:06:42.514]                    __var portAdr = 0;
[03:06:42.515]                      // -> [portAdr <= 0x00000000]
[03:06:42.515]                    __var pos     = 0;
[03:06:42.515]                      // -> [pos <= 0x00000000]
[03:06:42.515]                    __var SWO_Pin = 0x00010003;          // PB3
[03:06:42.515]                      // -> [SWO_Pin <= 0x00010003]
[03:06:42.516]                  </block>
[03:06:42.516]                  <block atomic="false" info="configure SWO">
[03:06:42.516]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:06:42.516]                      // -> [pin <= 0x00000003]
[03:06:42.516]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:06:42.516]                      // -> [port <= 0x00000001]
[03:06:42.517]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:06:42.517]                      // -> [portAdr <= 0x40020400]
[03:06:42.517]                    pos = pin * 2;
[03:06:42.517]                      // -> [pos <= 0x00000006]
[03:06:42.517]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:06:42.518]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.519]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.519]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:06:42.519]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.520]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.520]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:06:42.521]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.522]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.523]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:06:42.523]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.524]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.524]                  </block>
[03:06:42.524]                  <control if="pin <  8" while="" timeout="0" info="">
[03:06:42.524]                    // if-block "pin <  8"
[03:06:42.524]                      // =>  TRUE
[03:06:42.524]                    <block atomic="false" info="">
[03:06:42.525]                      pos = ((pin    ) & 7) * 4;
[03:06:42.525]                        // -> [pos <= 0x0000000C]
[03:06:42.525]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:06:42.525]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.526]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.526]                    </block>
[03:06:42.526]                    // end if-block "pin <  8"
[03:06:42.527]                  </control>
[03:06:42.527]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:06:42.527]                    // if-block "pin >= 8"
[03:06:42.527]                      // =>  FALSE
[03:06:42.527]                    // skip if-block "pin >= 8"
[03:06:42.527]                  </control>
[03:06:42.528]                </sequence>
[03:06:42.528]            </block>
[03:06:42.528]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:06:42.528]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:06:42.529]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.529]            </block>
[03:06:42.529]          </sequence>
[03:06:42.529]      </block>
[03:06:42.529]      // end if-block "traceSWO"
[03:06:42.530]    </control>
[03:06:42.530]    <control if="traceTPIU" while="" timeout="0" info="">
[03:06:42.530]      // if-block "traceTPIU"
[03:06:42.530]        // =>  FALSE
[03:06:42.530]      // skip if-block "traceTPIU"
[03:06:42.531]    </control>
[03:06:42.531]  </sequence>
[03:06:42.531]  
[03:06:42.534]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:06:42.534]  
[03:06:42.535]  <debugvars>
[03:06:42.535]    // Pre-defined
[03:06:42.535]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:42.535]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:06:42.535]    __dp=0x00000000
[03:06:42.536]    __ap=0x00000000
[03:06:42.536]    __traceout=0x00000001      (SWO Trace)
[03:06:42.536]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:42.536]    __FlashAddr=0x00000000
[03:06:42.536]    __FlashLen=0x00000000
[03:06:42.537]    __FlashArg=0x00000000
[03:06:42.537]    __FlashOp=0x00000000
[03:06:42.537]    __Result=0x00000000
[03:06:42.537]    
[03:06:42.537]    // User-defined
[03:06:42.537]    DbgMCU_CR=0x00000007
[03:06:42.538]    DbgMCU_APB1_Fz=0x00000000
[03:06:42.538]    DbgMCU_APB2_Fz=0x00000000
[03:06:42.538]    TraceClk_Pin=0x00040002
[03:06:42.538]    TraceD0_Pin=0x00040003
[03:06:42.538]    TraceD1_Pin=0x00040004
[03:06:42.538]    TraceD2_Pin=0x00040005
[03:06:42.539]    TraceD3_Pin=0x00040006
[03:06:42.539]  </debugvars>
[03:06:42.539]  
[03:06:42.539]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:06:42.539]    <block atomic="false" info="">
[03:06:42.539]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:06:42.540]        // -> [traceSWO <= 0x00000001]
[03:06:42.540]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:06:42.540]        // -> [traceTPIU <= 0x00000000]
[03:06:42.540]    </block>
[03:06:42.540]    <control if="traceSWO" while="" timeout="0" info="">
[03:06:42.540]      // if-block "traceSWO"
[03:06:42.541]        // =>  TRUE
[03:06:42.541]      <block atomic="false" info="">
[03:06:42.541]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:06:42.541]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:06:42.541]            <block atomic="false" info="">
[03:06:42.541]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:06:42.542]                // -> [dbgmcu_val <= 0x00000000]
[03:06:42.542]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:06:42.542]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:06:42.542]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:06:42.542]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.543]                // -> [dbgmcu_val <= 0x00000007]
[03:06:42.543]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:06:42.543]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:06:42.543]              Sequence("ConfigureTraceSWOPin");
[03:06:42.543]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:06:42.543]                  <block atomic="false" info="">
[03:06:42.543]                    __var pin     = 0;
[03:06:42.544]                      // -> [pin <= 0x00000000]
[03:06:42.544]                    __var port    = 0;
[03:06:42.544]                      // -> [port <= 0x00000000]
[03:06:42.544]                    __var portAdr = 0;
[03:06:42.544]                      // -> [portAdr <= 0x00000000]
[03:06:42.544]                    __var pos     = 0;
[03:06:42.545]                      // -> [pos <= 0x00000000]
[03:06:42.545]                    __var SWO_Pin = 0x00010003;          // PB3
[03:06:42.545]                      // -> [SWO_Pin <= 0x00010003]
[03:06:42.545]                  </block>
[03:06:42.545]                  <block atomic="false" info="configure SWO">
[03:06:42.545]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:06:42.545]                      // -> [pin <= 0x00000003]
[03:06:42.546]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:06:42.546]                      // -> [port <= 0x00000001]
[03:06:42.546]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:06:42.546]                      // -> [portAdr <= 0x40020400]
[03:06:42.546]                    pos = pin * 2;
[03:06:42.546]                      // -> [pos <= 0x00000006]
[03:06:42.547]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:06:42.547]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.548]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.548]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:06:42.548]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.549]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.549]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:06:42.549]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.550]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.550]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:06:42.550]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.551]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.551]                  </block>
[03:06:42.551]                  <control if="pin <  8" while="" timeout="0" info="">
[03:06:42.551]                    // if-block "pin <  8"
[03:06:42.551]                      // =>  TRUE
[03:06:42.551]                    <block atomic="false" info="">
[03:06:42.551]                      pos = ((pin    ) & 7) * 4;
[03:06:42.552]                        // -> [pos <= 0x0000000C]
[03:06:42.552]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:06:42.552]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.553]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.553]                    </block>
[03:06:42.553]                    // end if-block "pin <  8"
[03:06:42.553]                  </control>
[03:06:42.553]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:06:42.553]                    // if-block "pin >= 8"
[03:06:42.553]                      // =>  FALSE
[03:06:42.554]                    // skip if-block "pin >= 8"
[03:06:42.554]                  </control>
[03:06:42.554]                </sequence>
[03:06:42.554]            </block>
[03:06:42.554]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:06:42.555]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:06:42.555]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.555]            </block>
[03:06:42.555]          </sequence>
[03:06:42.555]      </block>
[03:06:42.556]      // end if-block "traceSWO"
[03:06:42.556]    </control>
[03:06:42.556]    <control if="traceTPIU" while="" timeout="0" info="">
[03:06:42.556]      // if-block "traceTPIU"
[03:06:42.556]        // =>  FALSE
[03:06:42.556]      // skip if-block "traceTPIU"
[03:06:42.557]    </control>
[03:06:42.557]  </sequence>
[03:06:42.557]  
[03:06:42.773]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:06:42.773]  
[03:06:42.773]  <debugvars>
[03:06:42.774]    // Pre-defined
[03:06:42.774]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:42.774]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:06:42.774]    __dp=0x00000000
[03:06:42.774]    __ap=0x00000000
[03:06:42.774]    __traceout=0x00000001      (SWO Trace)
[03:06:42.775]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:42.775]    __FlashAddr=0x00000000
[03:06:42.775]    __FlashLen=0x00000000
[03:06:42.775]    __FlashArg=0x00000000
[03:06:42.775]    __FlashOp=0x00000000
[03:06:42.775]    __Result=0x00000000
[03:06:42.776]    
[03:06:42.776]    // User-defined
[03:06:42.776]    DbgMCU_CR=0x00000007
[03:06:42.776]    DbgMCU_APB1_Fz=0x00000000
[03:06:42.776]    DbgMCU_APB2_Fz=0x00000000
[03:06:42.776]    TraceClk_Pin=0x00040002
[03:06:42.777]    TraceD0_Pin=0x00040003
[03:06:42.777]    TraceD1_Pin=0x00040004
[03:06:42.777]    TraceD2_Pin=0x00040005
[03:06:42.777]    TraceD3_Pin=0x00040006
[03:06:42.777]  </debugvars>
[03:06:42.777]  
[03:06:42.778]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:06:42.778]    <block atomic="false" info="">
[03:06:42.778]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:06:42.778]        // -> [traceSWO <= 0x00000001]
[03:06:42.778]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:06:42.778]        // -> [traceTPIU <= 0x00000000]
[03:06:42.779]    </block>
[03:06:42.779]    <control if="traceSWO" while="" timeout="0" info="">
[03:06:42.779]      // if-block "traceSWO"
[03:06:42.779]        // =>  TRUE
[03:06:42.779]      <block atomic="false" info="">
[03:06:42.779]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:06:42.780]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:06:42.780]            <block atomic="false" info="">
[03:06:42.780]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:06:42.780]                // -> [dbgmcu_val <= 0x00000000]
[03:06:42.780]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:06:42.780]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:06:42.780]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:06:42.781]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.781]                // -> [dbgmcu_val <= 0x00000007]
[03:06:42.781]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:06:42.781]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:06:42.781]              Sequence("ConfigureTraceSWOPin");
[03:06:42.781]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:06:42.782]                  <block atomic="false" info="">
[03:06:42.782]                    __var pin     = 0;
[03:06:42.782]                      // -> [pin <= 0x00000000]
[03:06:42.782]                    __var port    = 0;
[03:06:42.782]                      // -> [port <= 0x00000000]
[03:06:42.782]                    __var portAdr = 0;
[03:06:42.782]                      // -> [portAdr <= 0x00000000]
[03:06:42.782]                    __var pos     = 0;
[03:06:42.782]                      // -> [pos <= 0x00000000]
[03:06:42.782]                    __var SWO_Pin = 0x00010003;          // PB3
[03:06:42.783]                      // -> [SWO_Pin <= 0x00010003]
[03:06:42.783]                  </block>
[03:06:42.783]                  <block atomic="false" info="configure SWO">
[03:06:42.783]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:06:42.783]                      // -> [pin <= 0x00000003]
[03:06:42.783]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:06:42.783]                      // -> [port <= 0x00000001]
[03:06:42.784]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:06:42.784]                      // -> [portAdr <= 0x40020400]
[03:06:42.784]                    pos = pin * 2;
[03:06:42.784]                      // -> [pos <= 0x00000006]
[03:06:42.784]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:06:42.785]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.785]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.785]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:06:42.786]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.786]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.786]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:06:42.787]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.787]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.787]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:06:42.788]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.788]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.788]                  </block>
[03:06:42.788]                  <control if="pin <  8" while="" timeout="0" info="">
[03:06:42.788]                    // if-block "pin <  8"
[03:06:42.788]                      // =>  TRUE
[03:06:42.789]                    <block atomic="false" info="">
[03:06:42.789]                      pos = ((pin    ) & 7) * 4;
[03:06:42.789]                        // -> [pos <= 0x0000000C]
[03:06:42.789]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:06:42.790]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.790]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.790]                    </block>
[03:06:42.790]                    // end if-block "pin <  8"
[03:06:42.790]                  </control>
[03:06:42.791]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:06:42.791]                    // if-block "pin >= 8"
[03:06:42.791]                      // =>  FALSE
[03:06:42.791]                    // skip if-block "pin >= 8"
[03:06:42.791]                  </control>
[03:06:42.791]                </sequence>
[03:06:42.791]            </block>
[03:06:42.792]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:06:42.792]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:06:42.792]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:06:42.792]            </block>
[03:06:42.792]          </sequence>
[03:06:42.793]      </block>
[03:06:42.793]      // end if-block "traceSWO"
[03:06:42.793]    </control>
[03:06:42.793]    <control if="traceTPIU" while="" timeout="0" info="">
[03:06:42.793]      // if-block "traceTPIU"
[03:06:42.794]        // =>  FALSE
[03:06:42.794]      // skip if-block "traceTPIU"
[03:06:42.794]    </control>
[03:06:42.794]  </sequence>
[03:06:42.795]  
[03:07:34.335]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:07:34.335]  
[03:07:34.335]  <debugvars>
[03:07:34.336]    // Pre-defined
[03:07:34.336]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:07:34.336]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:07:34.336]    __dp=0x00000000
[03:07:34.336]    __ap=0x00000000
[03:07:34.336]    __traceout=0x00000001      (SWO Trace)
[03:07:34.336]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:07:34.337]    __FlashAddr=0x00000000
[03:07:34.337]    __FlashLen=0x00000000
[03:07:34.337]    __FlashArg=0x00000000
[03:07:34.337]    __FlashOp=0x00000000
[03:07:34.337]    __Result=0x00000000
[03:07:34.337]    
[03:07:34.337]    // User-defined
[03:07:34.338]    DbgMCU_CR=0x00000007
[03:07:34.338]    DbgMCU_APB1_Fz=0x00000000
[03:07:34.338]    DbgMCU_APB2_Fz=0x00000000
[03:07:34.338]    TraceClk_Pin=0x00040002
[03:07:34.338]    TraceD0_Pin=0x00040003
[03:07:34.338]    TraceD1_Pin=0x00040004
[03:07:34.339]    TraceD2_Pin=0x00040005
[03:07:34.339]    TraceD3_Pin=0x00040006
[03:07:34.339]  </debugvars>
[03:07:34.339]  
[03:07:34.339]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:07:34.339]    <block atomic="false" info="">
[03:07:34.339]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:07:34.339]        // -> [traceSWO <= 0x00000001]
[03:07:34.340]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:07:34.340]        // -> [traceTPIU <= 0x00000000]
[03:07:34.340]    </block>
[03:07:34.340]    <control if="traceSWO" while="" timeout="0" info="">
[03:07:34.340]      // if-block "traceSWO"
[03:07:34.340]        // =>  TRUE
[03:07:34.341]      <block atomic="false" info="">
[03:07:34.341]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:07:34.341]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:07:34.341]            <block atomic="false" info="">
[03:07:34.341]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:07:34.341]                // -> [dbgmcu_val <= 0x00000000]
[03:07:34.341]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:07:34.342]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:07:34.342]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:07:34.342]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:07:34.343]                // -> [dbgmcu_val <= 0x00000007]
[03:07:34.343]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:07:34.343]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:07:34.343]              Sequence("ConfigureTraceSWOPin");
[03:07:34.343]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:07:34.344]                  <block atomic="false" info="">
[03:07:34.344]                    __var pin     = 0;
[03:07:34.344]                      // -> [pin <= 0x00000000]
[03:07:34.344]                    __var port    = 0;
[03:07:34.344]                      // -> [port <= 0x00000000]
[03:07:34.344]                    __var portAdr = 0;
[03:07:34.344]                      // -> [portAdr <= 0x00000000]
[03:07:34.345]                    __var pos     = 0;
[03:07:34.345]                      // -> [pos <= 0x00000000]
[03:07:34.345]                    __var SWO_Pin = 0x00010003;          // PB3
[03:07:34.345]                      // -> [SWO_Pin <= 0x00010003]
[03:07:34.345]                  </block>
[03:07:34.345]                  <block atomic="false" info="configure SWO">
[03:07:34.345]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:07:34.345]                      // -> [pin <= 0x00000003]
[03:07:34.345]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:07:34.346]                      // -> [port <= 0x00000001]
[03:07:34.346]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:07:34.346]                      // -> [portAdr <= 0x40020400]
[03:07:34.346]                    pos = pin * 2;
[03:07:34.346]                      // -> [pos <= 0x00000006]
[03:07:34.346]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:07:34.347]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:07:34.347]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:07:34.347]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:07:34.348]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:07:34.348]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:07:34.348]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:07:34.349]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:07:34.349]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:07:34.349]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:07:34.350]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:07:34.350]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:07:34.350]                  </block>
[03:07:34.350]                  <control if="pin <  8" while="" timeout="0" info="">
[03:07:34.351]                    // if-block "pin <  8"
[03:07:34.351]                      // =>  TRUE
[03:07:34.351]                    <block atomic="false" info="">
[03:07:34.351]                      pos = ((pin    ) & 7) * 4;
[03:07:34.351]                        // -> [pos <= 0x0000000C]
[03:07:34.351]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:07:34.352]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:07:34.352]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:07:34.352]                    </block>
[03:07:34.352]                    // end if-block "pin <  8"
[03:07:34.352]                  </control>
[03:07:34.353]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:07:34.353]                    // if-block "pin >= 8"
[03:07:34.353]                      // =>  FALSE
[03:07:34.353]                    // skip if-block "pin >= 8"
[03:07:34.353]                  </control>
[03:07:34.353]                </sequence>
[03:07:34.354]            </block>
[03:07:34.354]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:07:34.354]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:07:34.354]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:07:34.354]            </block>
[03:07:34.354]          </sequence>
[03:07:34.355]      </block>
[03:07:34.355]      // end if-block "traceSWO"
[03:07:34.355]    </control>
[03:07:34.355]    <control if="traceTPIU" while="" timeout="0" info="">
[03:07:34.355]      // if-block "traceTPIU"
[03:07:34.356]        // =>  FALSE
[03:07:34.356]      // skip if-block "traceTPIU"
[03:07:34.356]    </control>
[03:07:34.356]  </sequence>
[03:07:34.356]  
[03:09:38.951]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:09:38.951]  
[03:09:38.951]  <debugvars>
[03:09:38.952]    // Pre-defined
[03:09:38.952]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:09:38.952]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:09:38.952]    __dp=0x00000000
[03:09:38.952]    __ap=0x00000000
[03:09:38.952]    __traceout=0x00000001      (SWO Trace)
[03:09:38.953]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:09:38.953]    __FlashAddr=0x00000000
[03:09:38.953]    __FlashLen=0x00000000
[03:09:38.953]    __FlashArg=0x00000000
[03:09:38.953]    __FlashOp=0x00000000
[03:09:38.953]    __Result=0x00000000
[03:09:38.954]    
[03:09:38.954]    // User-defined
[03:09:38.954]    DbgMCU_CR=0x00000007
[03:09:38.954]    DbgMCU_APB1_Fz=0x00000000
[03:09:38.954]    DbgMCU_APB2_Fz=0x00000000
[03:09:38.954]    TraceClk_Pin=0x00040002
[03:09:38.954]    TraceD0_Pin=0x00040003
[03:09:38.955]    TraceD1_Pin=0x00040004
[03:09:38.955]    TraceD2_Pin=0x00040005
[03:09:38.955]    TraceD3_Pin=0x00040006
[03:09:38.955]  </debugvars>
[03:09:38.955]  
[03:09:38.955]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:09:38.955]    <block atomic="false" info="">
[03:09:38.956]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:09:38.956]        // -> [traceSWO <= 0x00000001]
[03:09:38.956]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:09:38.956]        // -> [traceTPIU <= 0x00000000]
[03:09:38.956]    </block>
[03:09:38.956]    <control if="traceSWO" while="" timeout="0" info="">
[03:09:38.956]      // if-block "traceSWO"
[03:09:38.956]        // =>  TRUE
[03:09:38.956]      <block atomic="false" info="">
[03:09:38.957]        Sequence("DisableTraceSWO");
[03:09:38.957]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:09:38.957]            <block atomic="false" info="">
[03:09:38.957]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:09:38.957]                // -> [dbgmcu_val <= 0x00000000]
[03:09:38.957]            </block>
[03:09:38.957]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:09:38.958]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:09:38.958]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:09:38.958]                // -> [dbgmcu_val <= 0x00000007]
[03:09:38.958]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:09:38.959]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:38.959]            </block>
[03:09:38.959]          </sequence>
[03:09:38.959]      </block>
[03:09:38.959]      // end if-block "traceSWO"
[03:09:38.960]    </control>
[03:09:38.960]    <control if="traceTPIU" while="" timeout="0" info="">
[03:09:38.960]      // if-block "traceTPIU"
[03:09:38.960]        // =>  FALSE
[03:09:38.960]      // skip if-block "traceTPIU"
[03:09:38.960]    </control>
[03:09:38.960]  </sequence>
[03:09:38.960]  
[03:10:08.428]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:10:08.428]  
[03:10:08.429]  <debugvars>
[03:10:08.429]    // Pre-defined
[03:10:08.429]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:08.429]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:10:08.429]    __dp=0x00000000
[03:10:08.430]    __ap=0x00000000
[03:10:08.430]    __traceout=0x00000001      (SWO Trace)
[03:10:08.430]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:08.430]    __FlashAddr=0x00000000
[03:10:08.430]    __FlashLen=0x00000000
[03:10:08.431]    __FlashArg=0x00000000
[03:10:08.431]    __FlashOp=0x00000000
[03:10:08.431]    __Result=0x00000000
[03:10:08.431]    
[03:10:08.431]    // User-defined
[03:10:08.431]    DbgMCU_CR=0x00000007
[03:10:08.432]    DbgMCU_APB1_Fz=0x00000000
[03:10:08.432]    DbgMCU_APB2_Fz=0x00000000
[03:10:08.432]    TraceClk_Pin=0x00040002
[03:10:08.432]    TraceD0_Pin=0x00040003
[03:10:08.432]    TraceD1_Pin=0x00040004
[03:10:08.433]    TraceD2_Pin=0x00040005
[03:10:08.433]    TraceD3_Pin=0x00040006
[03:10:08.433]  </debugvars>
[03:10:08.433]  
[03:10:08.433]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:10:08.434]    <block atomic="false" info="">
[03:10:08.434]      Sequence("CheckID");
[03:10:08.434]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:10:08.434]          <block atomic="false" info="">
[03:10:08.434]            __var pidr1 = 0;
[03:10:08.434]              // -> [pidr1 <= 0x00000000]
[03:10:08.434]            __var pidr2 = 0;
[03:10:08.435]              // -> [pidr2 <= 0x00000000]
[03:10:08.435]            __var jep106id = 0;
[03:10:08.435]              // -> [jep106id <= 0x00000000]
[03:10:08.435]            __var ROMTableBase = 0;
[03:10:08.435]              // -> [ROMTableBase <= 0x00000000]
[03:10:08.435]            __ap = 0;      // AHB-AP
[03:10:08.435]              // -> [__ap <= 0x00000000]
[03:10:08.436]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:10:08.436]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:10:08.436]              // -> [ROMTableBase <= 0xE00FD000]
[03:10:08.436]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:10:08.437]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:10:08.437]              // -> [pidr1 <= 0x00000004]
[03:10:08.437]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:10:08.437]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:10:08.438]              // -> [pidr2 <= 0x0000001A]
[03:10:08.438]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:10:08.438]              // -> [jep106id <= 0x00000020]
[03:10:08.438]          </block>
[03:10:08.438]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:10:08.439]            // if-block "jep106id != 0x20"
[03:10:08.439]              // =>  FALSE
[03:10:08.439]            // skip if-block "jep106id != 0x20"
[03:10:08.439]          </control>
[03:10:08.439]        </sequence>
[03:10:08.439]    </block>
[03:10:08.439]  </sequence>
[03:10:08.439]  
[03:10:08.455]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:10:08.455]  
[03:10:08.455]  <debugvars>
[03:10:08.455]    // Pre-defined
[03:10:08.455]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:08.455]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:10:08.456]    __dp=0x00000000
[03:10:08.456]    __ap=0x00000000
[03:10:08.456]    __traceout=0x00000001      (SWO Trace)
[03:10:08.456]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:08.456]    __FlashAddr=0x00000000
[03:10:08.456]    __FlashLen=0x00000000
[03:10:08.457]    __FlashArg=0x00000000
[03:10:08.457]    __FlashOp=0x00000000
[03:10:08.457]    __Result=0x00000000
[03:10:08.457]    
[03:10:08.457]    // User-defined
[03:10:08.457]    DbgMCU_CR=0x00000007
[03:10:08.457]    DbgMCU_APB1_Fz=0x00000000
[03:10:08.458]    DbgMCU_APB2_Fz=0x00000000
[03:10:08.458]    TraceClk_Pin=0x00040002
[03:10:08.458]    TraceD0_Pin=0x00040003
[03:10:08.458]    TraceD1_Pin=0x00040004
[03:10:08.458]    TraceD2_Pin=0x00040005
[03:10:08.459]    TraceD3_Pin=0x00040006
[03:10:08.459]  </debugvars>
[03:10:08.459]  
[03:10:08.459]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:10:08.459]    <block atomic="false" info="">
[03:10:08.460]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:10:08.460]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:08.460]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:10:08.461]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:08.461]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:10:08.462]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:08.462]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:10:08.463]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:08.463]    </block>
[03:10:08.463]  </sequence>
[03:10:08.463]  
[03:10:39.507]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:10:39.507]  
[03:10:39.507]  <debugvars>
[03:10:39.507]    // Pre-defined
[03:10:39.507]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:39.507]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:10:39.508]    __dp=0x00000000
[03:10:39.508]    __ap=0x00000000
[03:10:39.508]    __traceout=0x00000001      (SWO Trace)
[03:10:39.508]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:39.508]    __FlashAddr=0x00000000
[03:10:39.508]    __FlashLen=0x00000000
[03:10:39.508]    __FlashArg=0x00000000
[03:10:39.509]    __FlashOp=0x00000000
[03:10:39.509]    __Result=0x00000000
[03:10:39.509]    
[03:10:39.509]    // User-defined
[03:10:39.509]    DbgMCU_CR=0x00000007
[03:10:39.509]    DbgMCU_APB1_Fz=0x00000000
[03:10:39.510]    DbgMCU_APB2_Fz=0x00000000
[03:10:39.510]    TraceClk_Pin=0x00040002
[03:10:39.510]    TraceD0_Pin=0x00040003
[03:10:39.510]    TraceD1_Pin=0x00040004
[03:10:39.510]    TraceD2_Pin=0x00040005
[03:10:39.510]    TraceD3_Pin=0x00040006
[03:10:39.510]  </debugvars>
[03:10:39.511]  
[03:10:39.511]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:10:39.511]    <block atomic="false" info="">
[03:10:39.511]      Sequence("CheckID");
[03:10:39.511]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:10:39.511]          <block atomic="false" info="">
[03:10:39.512]            __var pidr1 = 0;
[03:10:39.512]              // -> [pidr1 <= 0x00000000]
[03:10:39.512]            __var pidr2 = 0;
[03:10:39.512]              // -> [pidr2 <= 0x00000000]
[03:10:39.512]            __var jep106id = 0;
[03:10:39.512]              // -> [jep106id <= 0x00000000]
[03:10:39.513]            __var ROMTableBase = 0;
[03:10:39.513]              // -> [ROMTableBase <= 0x00000000]
[03:10:39.513]            __ap = 0;      // AHB-AP
[03:10:39.513]              // -> [__ap <= 0x00000000]
[03:10:39.513]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:10:39.513]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.514]              // -> [ROMTableBase <= 0xE00FD000]
[03:10:39.514]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:10:39.514]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.514]              // -> [pidr1 <= 0x00000004]
[03:10:39.515]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:10:39.515]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.515]              // -> [pidr2 <= 0x0000001A]
[03:10:39.515]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:10:39.515]              // -> [jep106id <= 0x00000020]
[03:10:39.516]          </block>
[03:10:39.516]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:10:39.516]            // if-block "jep106id != 0x20"
[03:10:39.516]              // =>  FALSE
[03:10:39.516]            // skip if-block "jep106id != 0x20"
[03:10:39.516]          </control>
[03:10:39.516]        </sequence>
[03:10:39.516]    </block>
[03:10:39.517]  </sequence>
[03:10:39.517]  
[03:10:39.531]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:10:39.531]  
[03:10:39.532]  <debugvars>
[03:10:39.532]    // Pre-defined
[03:10:39.532]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:39.532]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:10:39.532]    __dp=0x00000000
[03:10:39.532]    __ap=0x00000000
[03:10:39.533]    __traceout=0x00000001      (SWO Trace)
[03:10:39.533]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:39.533]    __FlashAddr=0x00000000
[03:10:39.533]    __FlashLen=0x00000000
[03:10:39.533]    __FlashArg=0x00000000
[03:10:39.533]    __FlashOp=0x00000000
[03:10:39.534]    __Result=0x00000000
[03:10:39.534]    
[03:10:39.534]    // User-defined
[03:10:39.534]    DbgMCU_CR=0x00000007
[03:10:39.534]    DbgMCU_APB1_Fz=0x00000000
[03:10:39.535]    DbgMCU_APB2_Fz=0x00000000
[03:10:39.535]    TraceClk_Pin=0x00040002
[03:10:39.535]    TraceD0_Pin=0x00040003
[03:10:39.535]    TraceD1_Pin=0x00040004
[03:10:39.535]    TraceD2_Pin=0x00040005
[03:10:39.535]    TraceD3_Pin=0x00040006
[03:10:39.536]  </debugvars>
[03:10:39.536]  
[03:10:39.536]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:10:39.536]    <block atomic="false" info="">
[03:10:39.536]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:10:39.537]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.537]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:10:39.538]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.538]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:10:39.538]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.538]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:10:39.539]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.539]    </block>
[03:10:39.539]  </sequence>
[03:10:39.539]  
[03:10:39.556]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:10:39.556]  
[03:10:39.556]  <debugvars>
[03:10:39.556]    // Pre-defined
[03:10:39.556]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:39.557]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:10:39.557]    __dp=0x00000000
[03:10:39.557]    __ap=0x00000000
[03:10:39.557]    __traceout=0x00000001      (SWO Trace)
[03:10:39.557]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:39.558]    __FlashAddr=0x00000000
[03:10:39.558]    __FlashLen=0x00000000
[03:10:39.558]    __FlashArg=0x00000000
[03:10:39.558]    __FlashOp=0x00000000
[03:10:39.558]    __Result=0x00000000
[03:10:39.558]    
[03:10:39.558]    // User-defined
[03:10:39.559]    DbgMCU_CR=0x00000007
[03:10:39.559]    DbgMCU_APB1_Fz=0x00000000
[03:10:39.559]    DbgMCU_APB2_Fz=0x00000000
[03:10:39.559]    TraceClk_Pin=0x00040002
[03:10:39.559]    TraceD0_Pin=0x00040003
[03:10:39.560]    TraceD1_Pin=0x00040004
[03:10:39.560]    TraceD2_Pin=0x00040005
[03:10:39.560]    TraceD3_Pin=0x00040006
[03:10:39.560]  </debugvars>
[03:10:39.560]  
[03:10:39.561]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:10:39.561]    <block atomic="false" info="">
[03:10:39.561]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:10:39.561]        // -> [traceSWO <= 0x00000001]
[03:10:39.561]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:10:39.561]        // -> [traceTPIU <= 0x00000000]
[03:10:39.562]    </block>
[03:10:39.562]    <control if="traceSWO" while="" timeout="0" info="">
[03:10:39.562]      // if-block "traceSWO"
[03:10:39.562]        // =>  TRUE
[03:10:39.562]      <block atomic="false" info="">
[03:10:39.562]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:10:39.563]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:10:39.563]            <block atomic="false" info="">
[03:10:39.563]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:10:39.563]                // -> [dbgmcu_val <= 0x00000000]
[03:10:39.563]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:10:39.563]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:10:39.564]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:10:39.564]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.564]                // -> [dbgmcu_val <= 0x00000007]
[03:10:39.565]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:10:39.565]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:10:39.565]              Sequence("ConfigureTraceSWOPin");
[03:10:39.565]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:10:39.565]                  <block atomic="false" info="">
[03:10:39.565]                    __var pin     = 0;
[03:10:39.566]                      // -> [pin <= 0x00000000]
[03:10:39.566]                    __var port    = 0;
[03:10:39.566]                      // -> [port <= 0x00000000]
[03:10:39.566]                    __var portAdr = 0;
[03:10:39.566]                      // -> [portAdr <= 0x00000000]
[03:10:39.566]                    __var pos     = 0;
[03:10:39.567]                      // -> [pos <= 0x00000000]
[03:10:39.567]                    __var SWO_Pin = 0x00010003;          // PB3
[03:10:39.567]                      // -> [SWO_Pin <= 0x00010003]
[03:10:39.567]                  </block>
[03:10:39.567]                  <block atomic="false" info="configure SWO">
[03:10:39.567]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:10:39.568]                      // -> [pin <= 0x00000003]
[03:10:39.568]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:10:39.568]                      // -> [port <= 0x00000001]
[03:10:39.568]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:10:39.568]                      // -> [portAdr <= 0x40020400]
[03:10:39.568]                    pos = pin * 2;
[03:10:39.568]                      // -> [pos <= 0x00000006]
[03:10:39.569]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:10:39.569]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.570]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.570]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:10:39.570]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.571]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.571]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:10:39.571]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.572]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.572]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:10:39.572]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.573]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.573]                  </block>
[03:10:39.573]                  <control if="pin <  8" while="" timeout="0" info="">
[03:10:39.573]                    // if-block "pin <  8"
[03:10:39.573]                      // =>  TRUE
[03:10:39.573]                    <block atomic="false" info="">
[03:10:39.573]                      pos = ((pin    ) & 7) * 4;
[03:10:39.573]                        // -> [pos <= 0x0000000C]
[03:10:39.574]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:10:39.574]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.575]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.575]                    </block>
[03:10:39.575]                    // end if-block "pin <  8"
[03:10:39.575]                  </control>
[03:10:39.575]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:10:39.575]                    // if-block "pin >= 8"
[03:10:39.575]                      // =>  FALSE
[03:10:39.576]                    // skip if-block "pin >= 8"
[03:10:39.576]                  </control>
[03:10:39.576]                </sequence>
[03:10:39.576]            </block>
[03:10:39.576]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:10:39.576]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:10:39.577]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.577]            </block>
[03:10:39.577]          </sequence>
[03:10:39.577]      </block>
[03:10:39.577]      // end if-block "traceSWO"
[03:10:39.577]    </control>
[03:10:39.578]    <control if="traceTPIU" while="" timeout="0" info="">
[03:10:39.578]      // if-block "traceTPIU"
[03:10:39.578]        // =>  FALSE
[03:10:39.578]      // skip if-block "traceTPIU"
[03:10:39.578]    </control>
[03:10:39.578]  </sequence>
[03:10:39.578]  
[03:10:39.582]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:10:39.582]  
[03:10:39.582]  <debugvars>
[03:10:39.582]    // Pre-defined
[03:10:39.582]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:39.583]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:10:39.583]    __dp=0x00000000
[03:10:39.583]    __ap=0x00000000
[03:10:39.583]    __traceout=0x00000001      (SWO Trace)
[03:10:39.583]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:39.583]    __FlashAddr=0x00000000
[03:10:39.583]    __FlashLen=0x00000000
[03:10:39.584]    __FlashArg=0x00000000
[03:10:39.584]    __FlashOp=0x00000000
[03:10:39.584]    __Result=0x00000000
[03:10:39.584]    
[03:10:39.584]    // User-defined
[03:10:39.584]    DbgMCU_CR=0x00000007
[03:10:39.584]    DbgMCU_APB1_Fz=0x00000000
[03:10:39.584]    DbgMCU_APB2_Fz=0x00000000
[03:10:39.585]    TraceClk_Pin=0x00040002
[03:10:39.585]    TraceD0_Pin=0x00040003
[03:10:39.585]    TraceD1_Pin=0x00040004
[03:10:39.585]    TraceD2_Pin=0x00040005
[03:10:39.585]    TraceD3_Pin=0x00040006
[03:10:39.585]  </debugvars>
[03:10:39.585]  
[03:10:39.585]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:10:39.586]    <block atomic="false" info="">
[03:10:39.586]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:10:39.586]        // -> [traceSWO <= 0x00000001]
[03:10:39.586]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:10:39.586]        // -> [traceTPIU <= 0x00000000]
[03:10:39.586]    </block>
[03:10:39.586]    <control if="traceSWO" while="" timeout="0" info="">
[03:10:39.586]      // if-block "traceSWO"
[03:10:39.587]        // =>  TRUE
[03:10:39.587]      <block atomic="false" info="">
[03:10:39.587]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:10:39.587]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:10:39.587]            <block atomic="false" info="">
[03:10:39.587]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:10:39.587]                // -> [dbgmcu_val <= 0x00000000]
[03:10:39.587]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:10:39.590]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:10:39.590]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:10:39.590]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.591]                // -> [dbgmcu_val <= 0x00000007]
[03:10:39.591]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:10:39.591]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:10:39.591]              Sequence("ConfigureTraceSWOPin");
[03:10:39.591]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:10:39.591]                  <block atomic="false" info="">
[03:10:39.592]                    __var pin     = 0;
[03:10:39.592]                      // -> [pin <= 0x00000000]
[03:10:39.592]                    __var port    = 0;
[03:10:39.592]                      // -> [port <= 0x00000000]
[03:10:39.592]                    __var portAdr = 0;
[03:10:39.592]                      // -> [portAdr <= 0x00000000]
[03:10:39.592]                    __var pos     = 0;
[03:10:39.592]                      // -> [pos <= 0x00000000]
[03:10:39.593]                    __var SWO_Pin = 0x00010003;          // PB3
[03:10:39.593]                      // -> [SWO_Pin <= 0x00010003]
[03:10:39.593]                  </block>
[03:10:39.593]                  <block atomic="false" info="configure SWO">
[03:10:39.593]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:10:39.593]                      // -> [pin <= 0x00000003]
[03:10:39.594]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:10:39.594]                      // -> [port <= 0x00000001]
[03:10:39.594]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:10:39.594]                      // -> [portAdr <= 0x40020400]
[03:10:39.594]                    pos = pin * 2;
[03:10:39.594]                      // -> [pos <= 0x00000006]
[03:10:39.594]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:10:39.595]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.595]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.595]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:10:39.596]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.596]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.597]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:10:39.597]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.598]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.598]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:10:39.598]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.599]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.599]                  </block>
[03:10:39.599]                  <control if="pin <  8" while="" timeout="0" info="">
[03:10:39.599]                    // if-block "pin <  8"
[03:10:39.599]                      // =>  TRUE
[03:10:39.599]                    <block atomic="false" info="">
[03:10:39.599]                      pos = ((pin    ) & 7) * 4;
[03:10:39.599]                        // -> [pos <= 0x0000000C]
[03:10:39.600]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:10:39.600]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.601]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.601]                    </block>
[03:10:39.601]                    // end if-block "pin <  8"
[03:10:39.601]                  </control>
[03:10:39.601]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:10:39.601]                    // if-block "pin >= 8"
[03:10:39.601]                      // =>  FALSE
[03:10:39.601]                    // skip if-block "pin >= 8"
[03:10:39.601]                  </control>
[03:10:39.602]                </sequence>
[03:10:39.602]            </block>
[03:10:39.602]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:10:39.602]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:10:39.602]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.603]            </block>
[03:10:39.603]          </sequence>
[03:10:39.603]      </block>
[03:10:39.603]      // end if-block "traceSWO"
[03:10:39.603]    </control>
[03:10:39.603]    <control if="traceTPIU" while="" timeout="0" info="">
[03:10:39.603]      // if-block "traceTPIU"
[03:10:39.603]        // =>  FALSE
[03:10:39.604]      // skip if-block "traceTPIU"
[03:10:39.605]    </control>
[03:10:39.605]  </sequence>
[03:10:39.605]  
[03:10:39.824]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:10:39.824]  
[03:10:39.824]  <debugvars>
[03:10:39.824]    // Pre-defined
[03:10:39.824]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:10:39.825]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:10:39.825]    __dp=0x00000000
[03:10:39.825]    __ap=0x00000000
[03:10:39.825]    __traceout=0x00000001      (SWO Trace)
[03:10:39.825]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:10:39.826]    __FlashAddr=0x00000000
[03:10:39.826]    __FlashLen=0x00000000
[03:10:39.826]    __FlashArg=0x00000000
[03:10:39.826]    __FlashOp=0x00000000
[03:10:39.826]    __Result=0x00000000
[03:10:39.826]    
[03:10:39.826]    // User-defined
[03:10:39.827]    DbgMCU_CR=0x00000007
[03:10:39.827]    DbgMCU_APB1_Fz=0x00000000
[03:10:39.827]    DbgMCU_APB2_Fz=0x00000000
[03:10:39.827]    TraceClk_Pin=0x00040002
[03:10:39.827]    TraceD0_Pin=0x00040003
[03:10:39.828]    TraceD1_Pin=0x00040004
[03:10:39.828]    TraceD2_Pin=0x00040005
[03:10:39.828]    TraceD3_Pin=0x00040006
[03:10:39.828]  </debugvars>
[03:10:39.828]  
[03:10:39.828]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:10:39.829]    <block atomic="false" info="">
[03:10:39.829]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:10:39.829]        // -> [traceSWO <= 0x00000001]
[03:10:39.829]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:10:39.829]        // -> [traceTPIU <= 0x00000000]
[03:10:39.829]    </block>
[03:10:39.829]    <control if="traceSWO" while="" timeout="0" info="">
[03:10:39.830]      // if-block "traceSWO"
[03:10:39.830]        // =>  TRUE
[03:10:39.830]      <block atomic="false" info="">
[03:10:39.830]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:10:39.830]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:10:39.830]            <block atomic="false" info="">
[03:10:39.831]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:10:39.831]                // -> [dbgmcu_val <= 0x00000000]
[03:10:39.831]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:10:39.831]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:10:39.831]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:10:39.831]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.832]                // -> [dbgmcu_val <= 0x00000007]
[03:10:39.832]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:10:39.832]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:10:39.832]              Sequence("ConfigureTraceSWOPin");
[03:10:39.832]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:10:39.832]                  <block atomic="false" info="">
[03:10:39.832]                    __var pin     = 0;
[03:10:39.833]                      // -> [pin <= 0x00000000]
[03:10:39.833]                    __var port    = 0;
[03:10:39.833]                      // -> [port <= 0x00000000]
[03:10:39.833]                    __var portAdr = 0;
[03:10:39.833]                      // -> [portAdr <= 0x00000000]
[03:10:39.833]                    __var pos     = 0;
[03:10:39.833]                      // -> [pos <= 0x00000000]
[03:10:39.833]                    __var SWO_Pin = 0x00010003;          // PB3
[03:10:39.834]                      // -> [SWO_Pin <= 0x00010003]
[03:10:39.834]                  </block>
[03:10:39.834]                  <block atomic="false" info="configure SWO">
[03:10:39.834]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:10:39.834]                      // -> [pin <= 0x00000003]
[03:10:39.834]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:10:39.835]                      // -> [port <= 0x00000001]
[03:10:39.835]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:10:39.835]                      // -> [portAdr <= 0x40020400]
[03:10:39.835]                    pos = pin * 2;
[03:10:39.835]                      // -> [pos <= 0x00000006]
[03:10:39.835]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:10:39.836]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.836]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.837]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:10:39.837]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.837]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.837]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:10:39.838]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.838]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.838]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:10:39.839]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.839]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.839]                  </block>
[03:10:39.840]                  <control if="pin <  8" while="" timeout="0" info="">
[03:10:39.840]                    // if-block "pin <  8"
[03:10:39.840]                      // =>  TRUE
[03:10:39.840]                    <block atomic="false" info="">
[03:10:39.840]                      pos = ((pin    ) & 7) * 4;
[03:10:39.840]                        // -> [pos <= 0x0000000C]
[03:10:39.840]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:10:39.841]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.841]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.841]                    </block>
[03:10:39.841]                    // end if-block "pin <  8"
[03:10:39.842]                  </control>
[03:10:39.842]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:10:39.842]                    // if-block "pin >= 8"
[03:10:39.842]                      // =>  FALSE
[03:10:39.842]                    // skip if-block "pin >= 8"
[03:10:39.842]                  </control>
[03:10:39.842]                </sequence>
[03:10:39.843]            </block>
[03:10:39.843]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:10:39.843]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:10:39.843]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:10:39.843]            </block>
[03:10:39.843]          </sequence>
[03:10:39.844]      </block>
[03:10:39.844]      // end if-block "traceSWO"
[03:10:39.844]    </control>
[03:10:39.844]    <control if="traceTPIU" while="" timeout="0" info="">
[03:10:39.844]      // if-block "traceTPIU"
[03:10:39.844]        // =>  FALSE
[03:10:39.844]      // skip if-block "traceTPIU"
[03:10:39.845]    </control>
[03:10:39.845]  </sequence>
[03:10:39.845]  
[03:11:27.720]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:11:27.720]  
[03:11:27.764]  <debugvars>
[03:11:27.765]    // Pre-defined
[03:11:27.765]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:11:27.765]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:11:27.766]    __dp=0x00000000
[03:11:27.766]    __ap=0x00000000
[03:11:27.766]    __traceout=0x00000001      (SWO Trace)
[03:11:27.766]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:11:27.767]    __FlashAddr=0x00000000
[03:11:27.767]    __FlashLen=0x00000000
[03:11:27.767]    __FlashArg=0x00000000
[03:11:27.767]    __FlashOp=0x00000000
[03:11:27.767]    __Result=0x00000000
[03:11:27.768]    
[03:11:27.768]    // User-defined
[03:11:27.768]    DbgMCU_CR=0x00000007
[03:11:27.768]    DbgMCU_APB1_Fz=0x00000000
[03:11:27.768]    DbgMCU_APB2_Fz=0x00000000
[03:11:27.769]    TraceClk_Pin=0x00040002
[03:11:27.769]    TraceD0_Pin=0x00040003
[03:11:27.769]    TraceD1_Pin=0x00040004
[03:11:27.769]    TraceD2_Pin=0x00040005
[03:11:27.769]    TraceD3_Pin=0x00040006
[03:11:27.770]  </debugvars>
[03:11:27.770]  
[03:11:27.770]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:11:27.770]    <block atomic="false" info="">
[03:11:27.770]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:11:27.770]        // -> [traceSWO <= 0x00000001]
[03:11:27.771]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:11:27.771]        // -> [traceTPIU <= 0x00000000]
[03:11:27.771]    </block>
[03:11:27.771]    <control if="traceSWO" while="" timeout="0" info="">
[03:11:27.771]      // if-block "traceSWO"
[03:11:27.772]        // =>  TRUE
[03:11:27.772]      <block atomic="false" info="">
[03:11:27.772]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:11:27.772]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:11:27.772]            <block atomic="false" info="">
[03:11:27.773]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:11:27.773]                // -> [dbgmcu_val <= 0x00000000]
[03:11:27.773]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:11:27.773]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:11:27.773]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:11:27.774]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:11:27.774]                // -> [dbgmcu_val <= 0x00000007]
[03:11:27.774]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:11:27.774]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:11:27.775]              Sequence("ConfigureTraceSWOPin");
[03:11:27.775]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:11:27.775]                  <block atomic="false" info="">
[03:11:27.775]                    __var pin     = 0;
[03:11:27.775]                      // -> [pin <= 0x00000000]
[03:11:27.775]                    __var port    = 0;
[03:11:27.776]                      // -> [port <= 0x00000000]
[03:11:27.776]                    __var portAdr = 0;
[03:11:27.776]                      // -> [portAdr <= 0x00000000]
[03:11:27.776]                    __var pos     = 0;
[03:11:27.776]                      // -> [pos <= 0x00000000]
[03:11:27.777]                    __var SWO_Pin = 0x00010003;          // PB3
[03:11:27.777]                      // -> [SWO_Pin <= 0x00010003]
[03:11:27.777]                  </block>
[03:11:27.777]                  <block atomic="false" info="configure SWO">
[03:11:27.777]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:11:27.777]                      // -> [pin <= 0x00000003]
[03:11:27.778]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:11:27.778]                      // -> [port <= 0x00000001]
[03:11:27.778]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:11:27.778]                      // -> [portAdr <= 0x40020400]
[03:11:27.778]                    pos = pin * 2;
[03:11:27.778]                      // -> [pos <= 0x00000006]
[03:11:27.778]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:11:27.779]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:11:27.779]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:11:27.779]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:11:27.781]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:11:27.781]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:11:27.781]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:11:27.782]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:11:27.782]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:11:27.782]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:11:27.783]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:11:27.783]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:11:27.783]                  </block>
[03:11:27.784]                  <control if="pin <  8" while="" timeout="0" info="">
[03:11:27.784]                    // if-block "pin <  8"
[03:11:27.784]                      // =>  TRUE
[03:11:27.784]                    <block atomic="false" info="">
[03:11:27.784]                      pos = ((pin    ) & 7) * 4;
[03:11:27.785]                        // -> [pos <= 0x0000000C]
[03:11:27.785]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:11:27.785]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:11:27.786]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:11:27.786]                    </block>
[03:11:27.786]                    // end if-block "pin <  8"
[03:11:27.786]                  </control>
[03:11:27.786]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:11:27.787]                    // if-block "pin >= 8"
[03:11:27.787]                      // =>  FALSE
[03:11:27.787]                    // skip if-block "pin >= 8"
[03:11:27.787]                  </control>
[03:11:27.787]                </sequence>
[03:11:27.787]            </block>
[03:11:27.787]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:11:27.788]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:11:27.788]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:11:27.788]            </block>
[03:11:27.789]          </sequence>
[03:11:27.789]      </block>
[03:11:27.789]      // end if-block "traceSWO"
[03:11:27.789]    </control>
[03:11:27.789]    <control if="traceTPIU" while="" timeout="0" info="">
[03:11:27.789]      // if-block "traceTPIU"
[03:11:27.789]        // =>  FALSE
[03:11:27.790]      // skip if-block "traceTPIU"
[03:11:27.790]    </control>
[03:11:27.790]  </sequence>
[03:11:27.790]  
[03:12:13.772]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:12:13.772]  
[03:12:13.775]  <debugvars>
[03:12:13.775]    // Pre-defined
[03:12:13.776]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:12:13.776]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:12:13.776]    __dp=0x00000000
[03:12:13.776]    __ap=0x00000000
[03:12:13.776]    __traceout=0x00000001      (SWO Trace)
[03:12:13.776]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:12:13.777]    __FlashAddr=0x00000000
[03:12:13.777]    __FlashLen=0x00000000
[03:12:13.777]    __FlashArg=0x00000000
[03:12:13.777]    __FlashOp=0x00000000
[03:12:13.777]    __Result=0x00000000
[03:12:13.778]    
[03:12:13.778]    // User-defined
[03:12:13.778]    DbgMCU_CR=0x00000007
[03:12:13.778]    DbgMCU_APB1_Fz=0x00000000
[03:12:13.778]    DbgMCU_APB2_Fz=0x00000000
[03:12:13.779]    TraceClk_Pin=0x00040002
[03:12:13.779]    TraceD0_Pin=0x00040003
[03:12:13.779]    TraceD1_Pin=0x00040004
[03:12:13.779]    TraceD2_Pin=0x00040005
[03:12:13.779]    TraceD3_Pin=0x00040006
[03:12:13.779]  </debugvars>
[03:12:13.779]  
[03:12:13.780]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:12:13.780]    <block atomic="false" info="">
[03:12:13.780]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:12:13.780]        // -> [traceSWO <= 0x00000001]
[03:12:13.780]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:12:13.780]        // -> [traceTPIU <= 0x00000000]
[03:12:13.781]    </block>
[03:12:13.781]    <control if="traceSWO" while="" timeout="0" info="">
[03:12:13.781]      // if-block "traceSWO"
[03:12:13.781]        // =>  TRUE
[03:12:13.781]      <block atomic="false" info="">
[03:12:13.782]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:12:13.782]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:12:13.782]            <block atomic="false" info="">
[03:12:13.782]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:12:13.782]                // -> [dbgmcu_val <= 0x00000000]
[03:12:13.782]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:12:13.783]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:12:13.783]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:12:13.783]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:12:13.783]                // -> [dbgmcu_val <= 0x00000007]
[03:12:13.784]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:12:13.784]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:12:13.784]              Sequence("ConfigureTraceSWOPin");
[03:12:13.784]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:12:13.784]                  <block atomic="false" info="">
[03:12:13.785]                    __var pin     = 0;
[03:12:13.785]                      // -> [pin <= 0x00000000]
[03:12:13.785]                    __var port    = 0;
[03:12:13.785]                      // -> [port <= 0x00000000]
[03:12:13.785]                    __var portAdr = 0;
[03:12:13.786]                      // -> [portAdr <= 0x00000000]
[03:12:13.786]                    __var pos     = 0;
[03:12:13.786]                      // -> [pos <= 0x00000000]
[03:12:13.786]                    __var SWO_Pin = 0x00010003;          // PB3
[03:12:13.786]                      // -> [SWO_Pin <= 0x00010003]
[03:12:13.786]                  </block>
[03:12:13.787]                  <block atomic="false" info="configure SWO">
[03:12:13.787]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:12:13.787]                      // -> [pin <= 0x00000003]
[03:12:13.787]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:12:13.787]                      // -> [port <= 0x00000001]
[03:12:13.787]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:12:13.788]                      // -> [portAdr <= 0x40020400]
[03:12:13.788]                    pos = pin * 2;
[03:12:13.788]                      // -> [pos <= 0x00000006]
[03:12:13.788]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:12:13.789]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:12:13.789]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:13.789]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:12:13.790]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:12:13.790]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:13.790]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:12:13.791]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:12:13.791]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:13.792]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:12:13.792]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:12:13.792]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:13.793]                  </block>
[03:12:13.793]                  <control if="pin <  8" while="" timeout="0" info="">
[03:12:13.793]                    // if-block "pin <  8"
[03:12:13.793]                      // =>  TRUE
[03:12:13.793]                    <block atomic="false" info="">
[03:12:13.793]                      pos = ((pin    ) & 7) * 4;
[03:12:13.793]                        // -> [pos <= 0x0000000C]
[03:12:13.794]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:12:13.794]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:12:13.794]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:13.795]                    </block>
[03:12:13.795]                    // end if-block "pin <  8"
[03:12:13.795]                  </control>
[03:12:13.795]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:12:13.795]                    // if-block "pin >= 8"
[03:12:13.795]                      // =>  FALSE
[03:12:13.795]                    // skip if-block "pin >= 8"
[03:12:13.795]                  </control>
[03:12:13.795]                </sequence>
[03:12:13.796]            </block>
[03:12:13.796]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:12:13.796]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:12:13.796]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:12:13.796]            </block>
[03:12:13.797]          </sequence>
[03:12:13.797]      </block>
[03:12:13.797]      // end if-block "traceSWO"
[03:12:13.797]    </control>
[03:12:13.797]    <control if="traceTPIU" while="" timeout="0" info="">
[03:12:13.797]      // if-block "traceTPIU"
[03:12:13.797]        // =>  FALSE
[03:12:13.797]      // skip if-block "traceTPIU"
[03:12:13.797]    </control>
[03:12:13.798]  </sequence>
[03:12:13.798]  
[03:17:36.781]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:17:36.781]  
[03:17:36.781]  <debugvars>
[03:17:36.782]    // Pre-defined
[03:17:36.782]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:17:36.782]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:17:36.782]    __dp=0x00000000
[03:17:36.782]    __ap=0x00000000
[03:17:36.782]    __traceout=0x00000001      (SWO Trace)
[03:17:36.783]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:17:36.783]    __FlashAddr=0x00000000
[03:17:36.783]    __FlashLen=0x00000000
[03:17:36.783]    __FlashArg=0x00000000
[03:17:36.783]    __FlashOp=0x00000000
[03:17:36.783]    __Result=0x00000000
[03:17:36.784]    
[03:17:36.784]    // User-defined
[03:17:36.784]    DbgMCU_CR=0x00000007
[03:17:36.784]    DbgMCU_APB1_Fz=0x00000000
[03:17:36.784]    DbgMCU_APB2_Fz=0x00000000
[03:17:36.784]    TraceClk_Pin=0x00040002
[03:17:36.784]    TraceD0_Pin=0x00040003
[03:17:36.784]    TraceD1_Pin=0x00040004
[03:17:36.784]    TraceD2_Pin=0x00040005
[03:17:36.785]    TraceD3_Pin=0x00040006
[03:17:36.785]  </debugvars>
[03:17:36.785]  
[03:17:36.785]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:17:36.785]    <block atomic="false" info="">
[03:17:36.785]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:17:36.785]        // -> [traceSWO <= 0x00000001]
[03:17:36.786]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:17:36.786]        // -> [traceTPIU <= 0x00000000]
[03:17:36.786]    </block>
[03:17:36.786]    <control if="traceSWO" while="" timeout="0" info="">
[03:17:36.786]      // if-block "traceSWO"
[03:17:36.786]        // =>  TRUE
[03:17:36.786]      <block atomic="false" info="">
[03:17:36.787]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:17:36.787]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:17:36.787]            <block atomic="false" info="">
[03:17:36.787]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:17:36.787]                // -> [dbgmcu_val <= 0x00000000]
[03:17:36.787]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:17:36.787]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:17:36.788]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:17:36.788]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:17:36.788]                // -> [dbgmcu_val <= 0x00000007]
[03:17:36.788]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:17:36.789]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:17:36.789]              Sequence("ConfigureTraceSWOPin");
[03:17:36.789]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:17:36.789]                  <block atomic="false" info="">
[03:17:36.789]                    __var pin     = 0;
[03:17:36.789]                      // -> [pin <= 0x00000000]
[03:17:36.789]                    __var port    = 0;
[03:17:36.789]                      // -> [port <= 0x00000000]
[03:17:36.790]                    __var portAdr = 0;
[03:17:36.790]                      // -> [portAdr <= 0x00000000]
[03:17:36.790]                    __var pos     = 0;
[03:17:36.790]                      // -> [pos <= 0x00000000]
[03:17:36.790]                    __var SWO_Pin = 0x00010003;          // PB3
[03:17:36.790]                      // -> [SWO_Pin <= 0x00010003]
[03:17:36.790]                  </block>
[03:17:36.791]                  <block atomic="false" info="configure SWO">
[03:17:36.791]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:17:36.791]                      // -> [pin <= 0x00000003]
[03:17:36.791]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:17:36.791]                      // -> [port <= 0x00000001]
[03:17:36.791]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:17:36.791]                      // -> [portAdr <= 0x40020400]
[03:17:36.792]                    pos = pin * 2;
[03:17:36.792]                      // -> [pos <= 0x00000006]
[03:17:36.792]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:17:36.792]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:17:36.793]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:17:36.793]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:17:36.793]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:17:36.794]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:17:36.794]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:17:36.794]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:17:36.795]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:17:36.795]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:17:36.795]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:17:36.796]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:17:36.796]                  </block>
[03:17:36.796]                  <control if="pin <  8" while="" timeout="0" info="">
[03:17:36.796]                    // if-block "pin <  8"
[03:17:36.796]                      // =>  TRUE
[03:17:36.796]                    <block atomic="false" info="">
[03:17:36.796]                      pos = ((pin    ) & 7) * 4;
[03:17:36.796]                        // -> [pos <= 0x0000000C]
[03:17:36.797]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:17:36.797]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:17:36.797]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:17:36.797]                    </block>
[03:17:36.798]                    // end if-block "pin <  8"
[03:17:36.798]                  </control>
[03:17:36.798]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:17:36.798]                    // if-block "pin >= 8"
[03:17:36.798]                      // =>  FALSE
[03:17:36.798]                    // skip if-block "pin >= 8"
[03:17:36.798]                  </control>
[03:17:36.799]                </sequence>
[03:17:36.799]            </block>
[03:17:36.799]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:17:36.799]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:17:36.799]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:17:36.799]            </block>
[03:17:36.799]          </sequence>
[03:17:36.800]      </block>
[03:17:36.800]      // end if-block "traceSWO"
[03:17:36.800]    </control>
[03:17:36.800]    <control if="traceTPIU" while="" timeout="0" info="">
[03:17:36.800]      // if-block "traceTPIU"
[03:17:36.800]        // =>  FALSE
[03:17:36.800]      // skip if-block "traceTPIU"
[03:17:36.800]    </control>
[03:17:36.801]  </sequence>
[03:17:36.801]  
[03:18:08.954]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:18:08.954]  
[03:18:08.955]  <debugvars>
[03:18:08.955]    // Pre-defined
[03:18:08.955]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:18:08.955]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:18:08.955]    __dp=0x00000000
[03:18:08.955]    __ap=0x00000000
[03:18:08.956]    __traceout=0x00000001      (SWO Trace)
[03:18:08.956]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:18:08.956]    __FlashAddr=0x00000000
[03:18:08.956]    __FlashLen=0x00000000
[03:18:08.956]    __FlashArg=0x00000000
[03:18:08.957]    __FlashOp=0x00000000
[03:18:08.957]    __Result=0x00000000
[03:18:08.957]    
[03:18:08.957]    // User-defined
[03:18:08.957]    DbgMCU_CR=0x00000007
[03:18:08.957]    DbgMCU_APB1_Fz=0x00000000
[03:18:08.958]    DbgMCU_APB2_Fz=0x00000000
[03:18:08.958]    TraceClk_Pin=0x00040002
[03:18:08.958]    TraceD0_Pin=0x00040003
[03:18:08.958]    TraceD1_Pin=0x00040004
[03:18:08.958]    TraceD2_Pin=0x00040005
[03:18:08.958]    TraceD3_Pin=0x00040006
[03:18:08.959]  </debugvars>
[03:18:08.959]  
[03:18:08.959]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:18:08.959]    <block atomic="false" info="">
[03:18:08.959]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:18:08.959]        // -> [traceSWO <= 0x00000001]
[03:18:08.959]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:18:08.960]        // -> [traceTPIU <= 0x00000000]
[03:18:08.960]    </block>
[03:18:08.960]    <control if="traceSWO" while="" timeout="0" info="">
[03:18:08.960]      // if-block "traceSWO"
[03:18:08.960]        // =>  TRUE
[03:18:08.961]      <block atomic="false" info="">
[03:18:08.961]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:18:08.961]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:18:08.961]            <block atomic="false" info="">
[03:18:08.961]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:18:08.961]                // -> [dbgmcu_val <= 0x00000000]
[03:18:08.961]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:18:08.962]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:18:08.962]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:18:08.962]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:18:08.962]                // -> [dbgmcu_val <= 0x00000007]
[03:18:08.962]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:18:08.963]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:18:08.963]              Sequence("ConfigureTraceSWOPin");
[03:18:08.963]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:18:08.963]                  <block atomic="false" info="">
[03:18:08.963]                    __var pin     = 0;
[03:18:08.963]                      // -> [pin <= 0x00000000]
[03:18:08.963]                    __var port    = 0;
[03:18:08.964]                      // -> [port <= 0x00000000]
[03:18:08.964]                    __var portAdr = 0;
[03:18:08.964]                      // -> [portAdr <= 0x00000000]
[03:18:08.964]                    __var pos     = 0;
[03:18:08.964]                      // -> [pos <= 0x00000000]
[03:18:08.964]                    __var SWO_Pin = 0x00010003;          // PB3
[03:18:08.964]                      // -> [SWO_Pin <= 0x00010003]
[03:18:08.964]                  </block>
[03:18:08.965]                  <block atomic="false" info="configure SWO">
[03:18:08.965]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:18:08.965]                      // -> [pin <= 0x00000003]
[03:18:08.965]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:18:08.965]                      // -> [port <= 0x00000001]
[03:18:08.965]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:18:08.965]                      // -> [portAdr <= 0x40020400]
[03:18:08.965]                    pos = pin * 2;
[03:18:08.966]                      // -> [pos <= 0x00000006]
[03:18:08.966]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:18:08.966]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:18:08.966]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:18:08.967]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:18:08.967]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:18:08.967]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:18:08.967]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:18:08.968]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:18:08.968]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:18:08.968]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:18:08.969]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:18:08.969]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:18:08.969]                  </block>
[03:18:08.970]                  <control if="pin <  8" while="" timeout="0" info="">
[03:18:08.970]                    // if-block "pin <  8"
[03:18:08.970]                      // =>  TRUE
[03:18:08.970]                    <block atomic="false" info="">
[03:18:08.970]                      pos = ((pin    ) & 7) * 4;
[03:18:08.970]                        // -> [pos <= 0x0000000C]
[03:18:08.970]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:18:08.971]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:18:08.971]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:18:08.971]                    </block>
[03:18:08.971]                    // end if-block "pin <  8"
[03:18:08.971]                  </control>
[03:18:08.972]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:18:08.972]                    // if-block "pin >= 8"
[03:18:08.972]                      // =>  FALSE
[03:18:08.972]                    // skip if-block "pin >= 8"
[03:18:08.972]                  </control>
[03:18:08.972]                </sequence>
[03:18:08.972]            </block>
[03:18:08.972]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:18:08.972]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:18:08.973]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:18:08.973]            </block>
[03:18:08.973]          </sequence>
[03:18:08.973]      </block>
[03:18:08.974]      // end if-block "traceSWO"
[03:18:08.974]    </control>
[03:18:08.974]    <control if="traceTPIU" while="" timeout="0" info="">
[03:18:08.974]      // if-block "traceTPIU"
[03:18:08.974]        // =>  FALSE
[03:18:08.974]      // skip if-block "traceTPIU"
[03:18:08.974]    </control>
[03:18:08.974]  </sequence>
[03:18:08.975]  
[03:18:19.615]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:18:19.615]  
[03:18:19.615]  <debugvars>
[03:18:19.616]    // Pre-defined
[03:18:19.616]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:18:19.616]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:18:19.616]    __dp=0x00000000
[03:18:19.616]    __ap=0x00000000
[03:18:19.616]    __traceout=0x00000001      (SWO Trace)
[03:18:19.617]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:18:19.617]    __FlashAddr=0x00000000
[03:18:19.617]    __FlashLen=0x00000000
[03:18:19.617]    __FlashArg=0x00000000
[03:18:19.617]    __FlashOp=0x00000000
[03:18:19.617]    __Result=0x00000000
[03:18:19.618]    
[03:18:19.618]    // User-defined
[03:18:19.618]    DbgMCU_CR=0x00000007
[03:18:19.618]    DbgMCU_APB1_Fz=0x00000000
[03:18:19.618]    DbgMCU_APB2_Fz=0x00000000
[03:18:19.618]    TraceClk_Pin=0x00040002
[03:18:19.619]    TraceD0_Pin=0x00040003
[03:18:19.619]    TraceD1_Pin=0x00040004
[03:18:19.619]    TraceD2_Pin=0x00040005
[03:18:19.619]    TraceD3_Pin=0x00040006
[03:18:19.619]  </debugvars>
[03:18:19.619]  
[03:18:19.620]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:18:19.620]    <block atomic="false" info="">
[03:18:19.620]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:18:19.620]        // -> [traceSWO <= 0x00000001]
[03:18:19.620]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:18:19.620]        // -> [traceTPIU <= 0x00000000]
[03:18:19.621]    </block>
[03:18:19.621]    <control if="traceSWO" while="" timeout="0" info="">
[03:18:19.621]      // if-block "traceSWO"
[03:18:19.621]        // =>  TRUE
[03:18:19.621]      <block atomic="false" info="">
[03:18:19.621]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:18:19.622]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:18:19.622]            <block atomic="false" info="">
[03:18:19.622]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:18:19.622]                // -> [dbgmcu_val <= 0x00000000]
[03:18:19.622]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:18:19.623]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:18:19.623]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:18:19.623]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:18:19.623]                // -> [dbgmcu_val <= 0x00000007]
[03:18:19.624]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:18:19.624]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:18:19.624]              Sequence("ConfigureTraceSWOPin");
[03:18:19.624]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:18:19.624]                  <block atomic="false" info="">
[03:18:19.624]                    __var pin     = 0;
[03:18:19.625]                      // -> [pin <= 0x00000000]
[03:18:19.625]                    __var port    = 0;
[03:18:19.625]                      // -> [port <= 0x00000000]
[03:18:19.625]                    __var portAdr = 0;
[03:18:19.625]                      // -> [portAdr <= 0x00000000]
[03:18:19.625]                    __var pos     = 0;
[03:18:19.626]                      // -> [pos <= 0x00000000]
[03:18:19.626]                    __var SWO_Pin = 0x00010003;          // PB3
[03:18:19.626]                      // -> [SWO_Pin <= 0x00010003]
[03:18:19.626]                  </block>
[03:18:19.626]                  <block atomic="false" info="configure SWO">
[03:18:19.626]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:18:19.626]                      // -> [pin <= 0x00000003]
[03:18:19.627]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:18:19.627]                      // -> [port <= 0x00000001]
[03:18:19.627]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:18:19.627]                      // -> [portAdr <= 0x40020400]
[03:18:19.627]                    pos = pin * 2;
[03:18:19.627]                      // -> [pos <= 0x00000006]
[03:18:19.628]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:18:19.628]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:18:19.629]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:18:19.629]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:18:19.629]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:18:19.630]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:18:19.630]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:18:19.630]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:18:19.631]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:18:19.631]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:18:19.631]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:18:19.632]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:18:19.632]                  </block>
[03:18:19.632]                  <control if="pin <  8" while="" timeout="0" info="">
[03:18:19.632]                    // if-block "pin <  8"
[03:18:19.632]                      // =>  TRUE
[03:18:19.633]                    <block atomic="false" info="">
[03:18:19.633]                      pos = ((pin    ) & 7) * 4;
[03:18:19.633]                        // -> [pos <= 0x0000000C]
[03:18:19.633]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:18:19.633]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:18:19.634]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:18:19.634]                    </block>
[03:18:19.634]                    // end if-block "pin <  8"
[03:18:19.634]                  </control>
[03:18:19.635]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:18:19.635]                    // if-block "pin >= 8"
[03:18:19.635]                      // =>  FALSE
[03:18:19.635]                    // skip if-block "pin >= 8"
[03:18:19.635]                  </control>
[03:18:19.635]                </sequence>
[03:18:19.636]            </block>
[03:18:19.636]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:18:19.636]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:18:19.636]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:18:19.637]            </block>
[03:18:19.637]          </sequence>
[03:18:19.637]      </block>
[03:18:19.637]      // end if-block "traceSWO"
[03:18:19.637]    </control>
[03:18:19.637]    <control if="traceTPIU" while="" timeout="0" info="">
[03:18:19.637]      // if-block "traceTPIU"
[03:18:19.638]        // =>  FALSE
[03:18:19.638]      // skip if-block "traceTPIU"
[03:18:19.638]    </control>
[03:18:19.638]  </sequence>
[03:18:19.638]  
[03:19:13.560]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:19:13.560]  
[03:19:13.560]  <debugvars>
[03:19:13.561]    // Pre-defined
[03:19:13.561]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:19:13.561]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:19:13.561]    __dp=0x00000000
[03:19:13.561]    __ap=0x00000000
[03:19:13.561]    __traceout=0x00000001      (SWO Trace)
[03:19:13.562]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:19:13.563]    __FlashAddr=0x00000000
[03:19:13.563]    __FlashLen=0x00000000
[03:19:13.563]    __FlashArg=0x00000000
[03:19:13.563]    __FlashOp=0x00000000
[03:19:13.563]    __Result=0x00000000
[03:19:13.563]    
[03:19:13.563]    // User-defined
[03:19:13.564]    DbgMCU_CR=0x00000007
[03:19:13.564]    DbgMCU_APB1_Fz=0x00000000
[03:19:13.564]    DbgMCU_APB2_Fz=0x00000000
[03:19:13.564]    TraceClk_Pin=0x00040002
[03:19:13.564]    TraceD0_Pin=0x00040003
[03:19:13.564]    TraceD1_Pin=0x00040004
[03:19:13.565]    TraceD2_Pin=0x00040005
[03:19:13.565]    TraceD3_Pin=0x00040006
[03:19:13.565]  </debugvars>
[03:19:13.565]  
[03:19:13.565]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:19:13.566]    <block atomic="false" info="">
[03:19:13.566]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:19:13.566]        // -> [traceSWO <= 0x00000001]
[03:19:13.566]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:19:13.566]        // -> [traceTPIU <= 0x00000000]
[03:19:13.566]    </block>
[03:19:13.567]    <control if="traceSWO" while="" timeout="0" info="">
[03:19:13.567]      // if-block "traceSWO"
[03:19:13.567]        // =>  TRUE
[03:19:13.567]      <block atomic="false" info="">
[03:19:13.567]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:19:13.567]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:19:13.567]            <block atomic="false" info="">
[03:19:13.568]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:19:13.568]                // -> [dbgmcu_val <= 0x00000000]
[03:19:13.568]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:19:13.568]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:19:13.568]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:19:13.569]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:19:13.569]                // -> [dbgmcu_val <= 0x00000007]
[03:19:13.569]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:19:13.569]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:19:13.570]              Sequence("ConfigureTraceSWOPin");
[03:19:13.570]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:19:13.570]                  <block atomic="false" info="">
[03:19:13.570]                    __var pin     = 0;
[03:19:13.570]                      // -> [pin <= 0x00000000]
[03:19:13.570]                    __var port    = 0;
[03:19:13.570]                      // -> [port <= 0x00000000]
[03:19:13.571]                    __var portAdr = 0;
[03:19:13.571]                      // -> [portAdr <= 0x00000000]
[03:19:13.571]                    __var pos     = 0;
[03:19:13.571]                      // -> [pos <= 0x00000000]
[03:19:13.571]                    __var SWO_Pin = 0x00010003;          // PB3
[03:19:13.572]                      // -> [SWO_Pin <= 0x00010003]
[03:19:13.572]                  </block>
[03:19:13.572]                  <block atomic="false" info="configure SWO">
[03:19:13.572]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:19:13.572]                      // -> [pin <= 0x00000003]
[03:19:13.572]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:19:13.572]                      // -> [port <= 0x00000001]
[03:19:13.573]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:19:13.573]                      // -> [portAdr <= 0x40020400]
[03:19:13.573]                    pos = pin * 2;
[03:19:13.573]                      // -> [pos <= 0x00000006]
[03:19:13.573]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:19:13.574]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:19:13.574]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:13.574]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:19:13.575]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:19:13.575]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:13.575]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:19:13.576]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:19:13.576]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:13.577]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:19:13.577]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:19:13.578]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:13.578]                  </block>
[03:19:13.578]                  <control if="pin <  8" while="" timeout="0" info="">
[03:19:13.578]                    // if-block "pin <  8"
[03:19:13.578]                      // =>  TRUE
[03:19:13.578]                    <block atomic="false" info="">
[03:19:13.579]                      pos = ((pin    ) & 7) * 4;
[03:19:13.579]                        // -> [pos <= 0x0000000C]
[03:19:13.579]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:19:13.579]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:19:13.580]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:13.580]                    </block>
[03:19:13.580]                    // end if-block "pin <  8"
[03:19:13.580]                  </control>
[03:19:13.580]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:19:13.581]                    // if-block "pin >= 8"
[03:19:13.581]                      // =>  FALSE
[03:19:13.581]                    // skip if-block "pin >= 8"
[03:19:13.581]                  </control>
[03:19:13.581]                </sequence>
[03:19:13.581]            </block>
[03:19:13.581]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:19:13.582]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:19:13.582]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:19:13.582]            </block>
[03:19:13.582]          </sequence>
[03:19:13.582]      </block>
[03:19:13.582]      // end if-block "traceSWO"
[03:19:13.583]    </control>
[03:19:13.583]    <control if="traceTPIU" while="" timeout="0" info="">
[03:19:13.583]      // if-block "traceTPIU"
[03:19:13.583]        // =>  FALSE
[03:19:13.583]      // skip if-block "traceTPIU"
[03:19:13.583]    </control>
[03:19:13.583]  </sequence>
[03:19:13.584]  
[03:22:03.577]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:22:03.577]  
[03:22:03.579]  <debugvars>
[03:22:03.579]    // Pre-defined
[03:22:03.579]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:22:03.579]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:22:03.580]    __dp=0x00000000
[03:22:03.580]    __ap=0x00000000
[03:22:03.580]    __traceout=0x00000001      (SWO Trace)
[03:22:03.581]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:22:03.581]    __FlashAddr=0x00000000
[03:22:03.581]    __FlashLen=0x00000000
[03:22:03.582]    __FlashArg=0x00000000
[03:22:03.582]    __FlashOp=0x00000000
[03:22:03.583]    __Result=0x00000000
[03:22:03.583]    
[03:22:03.583]    // User-defined
[03:22:03.583]    DbgMCU_CR=0x00000007
[03:22:03.585]    DbgMCU_APB1_Fz=0x00000000
[03:22:03.585]    DbgMCU_APB2_Fz=0x00000000
[03:22:03.585]    TraceClk_Pin=0x00040002
[03:22:03.585]    TraceD0_Pin=0x00040003
[03:22:03.585]    TraceD1_Pin=0x00040004
[03:22:03.585]    TraceD2_Pin=0x00040005
[03:22:03.585]    TraceD3_Pin=0x00040006
[03:22:03.585]  </debugvars>
[03:22:03.585]  
[03:22:03.586]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:22:03.586]    <block atomic="false" info="">
[03:22:03.586]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:22:03.586]        // -> [traceSWO <= 0x00000001]
[03:22:03.586]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:22:03.587]        // -> [traceTPIU <= 0x00000000]
[03:22:03.587]    </block>
[03:22:03.587]    <control if="traceSWO" while="" timeout="0" info="">
[03:22:03.587]      // if-block "traceSWO"
[03:22:03.587]        // =>  TRUE
[03:22:03.588]      <block atomic="false" info="">
[03:22:03.588]        Sequence("DisableTraceSWO");
[03:22:03.588]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:22:03.588]            <block atomic="false" info="">
[03:22:03.588]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:22:03.588]                // -> [dbgmcu_val <= 0x00000000]
[03:22:03.589]            </block>
[03:22:03.589]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:22:03.589]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:22:03.589]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:22:03.590]                // -> [dbgmcu_val <= 0x00000007]
[03:22:03.590]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:22:03.590]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:22:03.591]            </block>
[03:22:03.591]          </sequence>
[03:22:03.591]      </block>
[03:22:03.591]      // end if-block "traceSWO"
[03:22:03.591]    </control>
[03:22:03.591]    <control if="traceTPIU" while="" timeout="0" info="">
[03:22:03.592]      // if-block "traceTPIU"
[03:22:03.592]        // =>  FALSE
[03:22:03.592]      // skip if-block "traceTPIU"
[03:22:03.592]    </control>
[03:22:03.592]  </sequence>
[03:22:03.593]  
[03:22:31.361]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:22:31.361]  
[03:22:31.361]  <debugvars>
[03:22:31.361]    // Pre-defined
[03:22:31.361]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:22:31.362]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:22:31.362]    __dp=0x00000000
[03:22:31.362]    __ap=0x00000000
[03:22:31.362]    __traceout=0x00000001      (SWO Trace)
[03:22:31.362]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:22:31.362]    __FlashAddr=0x00000000
[03:22:31.363]    __FlashLen=0x00000000
[03:22:31.363]    __FlashArg=0x00000000
[03:22:31.363]    __FlashOp=0x00000000
[03:22:31.363]    __Result=0x00000000
[03:22:31.363]    
[03:22:31.363]    // User-defined
[03:22:31.363]    DbgMCU_CR=0x00000007
[03:22:31.364]    DbgMCU_APB1_Fz=0x00000000
[03:22:31.364]    DbgMCU_APB2_Fz=0x00000000
[03:22:31.364]    TraceClk_Pin=0x00040002
[03:22:31.364]    TraceD0_Pin=0x00040003
[03:22:31.364]    TraceD1_Pin=0x00040004
[03:22:31.365]    TraceD2_Pin=0x00040005
[03:22:31.365]    TraceD3_Pin=0x00040006
[03:22:31.365]  </debugvars>
[03:22:31.365]  
[03:22:31.365]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:22:31.365]    <block atomic="false" info="">
[03:22:31.366]      Sequence("CheckID");
[03:22:31.366]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:22:31.366]          <block atomic="false" info="">
[03:22:31.366]            __var pidr1 = 0;
[03:22:31.366]              // -> [pidr1 <= 0x00000000]
[03:22:31.366]            __var pidr2 = 0;
[03:22:31.367]              // -> [pidr2 <= 0x00000000]
[03:22:31.367]            __var jep106id = 0;
[03:22:31.367]              // -> [jep106id <= 0x00000000]
[03:22:31.367]            __var ROMTableBase = 0;
[03:22:31.367]              // -> [ROMTableBase <= 0x00000000]
[03:22:31.367]            __ap = 0;      // AHB-AP
[03:22:31.368]              // -> [__ap <= 0x00000000]
[03:22:31.368]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:22:31.368]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:22:31.368]              // -> [ROMTableBase <= 0xE00FD000]
[03:22:31.368]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:22:31.369]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:22:31.369]              // -> [pidr1 <= 0x00000004]
[03:22:31.369]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:22:31.370]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:22:31.370]              // -> [pidr2 <= 0x0000001A]
[03:22:31.370]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:22:31.370]              // -> [jep106id <= 0x00000020]
[03:22:31.370]          </block>
[03:22:31.370]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:22:31.371]            // if-block "jep106id != 0x20"
[03:22:31.371]              // =>  FALSE
[03:22:31.371]            // skip if-block "jep106id != 0x20"
[03:22:31.371]          </control>
[03:22:31.371]        </sequence>
[03:22:31.371]    </block>
[03:22:31.371]  </sequence>
[03:22:31.371]  
[03:22:31.386]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:22:31.386]  
[03:22:31.386]  <debugvars>
[03:22:31.386]    // Pre-defined
[03:22:31.386]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:22:31.386]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:22:31.387]    __dp=0x00000000
[03:22:31.387]    __ap=0x00000000
[03:22:31.387]    __traceout=0x00000001      (SWO Trace)
[03:22:31.387]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:22:31.387]    __FlashAddr=0x00000000
[03:22:31.388]    __FlashLen=0x00000000
[03:22:31.388]    __FlashArg=0x00000000
[03:22:31.388]    __FlashOp=0x00000000
[03:22:31.388]    __Result=0x00000000
[03:22:31.388]    
[03:22:31.388]    // User-defined
[03:22:31.388]    DbgMCU_CR=0x00000007
[03:22:31.389]    DbgMCU_APB1_Fz=0x00000000
[03:22:31.389]    DbgMCU_APB2_Fz=0x00000000
[03:22:31.389]    TraceClk_Pin=0x00040002
[03:22:31.389]    TraceD0_Pin=0x00040003
[03:22:31.389]    TraceD1_Pin=0x00040004
[03:22:31.389]    TraceD2_Pin=0x00040005
[03:22:31.390]    TraceD3_Pin=0x00040006
[03:22:31.390]  </debugvars>
[03:22:31.390]  
[03:22:31.390]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:22:31.390]    <block atomic="false" info="">
[03:22:31.390]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:22:31.391]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:22:31.391]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:22:31.392]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:22:31.392]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:22:31.393]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:22:31.393]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:22:31.393]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:22:31.394]    </block>
[03:22:31.394]  </sequence>
[03:22:31.394]  
[03:23:02.433]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:23:02.433]  
[03:23:02.433]  <debugvars>
[03:23:02.433]    // Pre-defined
[03:23:02.433]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:23:02.434]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:23:02.434]    __dp=0x00000000
[03:23:02.434]    __ap=0x00000000
[03:23:02.434]    __traceout=0x00000001      (SWO Trace)
[03:23:02.434]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:23:02.434]    __FlashAddr=0x00000000
[03:23:02.435]    __FlashLen=0x00000000
[03:23:02.435]    __FlashArg=0x00000000
[03:23:02.435]    __FlashOp=0x00000000
[03:23:02.435]    __Result=0x00000000
[03:23:02.435]    
[03:23:02.435]    // User-defined
[03:23:02.436]    DbgMCU_CR=0x00000007
[03:23:02.436]    DbgMCU_APB1_Fz=0x00000000
[03:23:02.436]    DbgMCU_APB2_Fz=0x00000000
[03:23:02.436]    TraceClk_Pin=0x00040002
[03:23:02.436]    TraceD0_Pin=0x00040003
[03:23:02.436]    TraceD1_Pin=0x00040004
[03:23:02.437]    TraceD2_Pin=0x00040005
[03:23:02.437]    TraceD3_Pin=0x00040006
[03:23:02.437]  </debugvars>
[03:23:02.437]  
[03:23:02.437]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:23:02.437]    <block atomic="false" info="">
[03:23:02.438]      Sequence("CheckID");
[03:23:02.438]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:23:02.438]          <block atomic="false" info="">
[03:23:02.438]            __var pidr1 = 0;
[03:23:02.438]              // -> [pidr1 <= 0x00000000]
[03:23:02.438]            __var pidr2 = 0;
[03:23:02.439]              // -> [pidr2 <= 0x00000000]
[03:23:02.439]            __var jep106id = 0;
[03:23:02.439]              // -> [jep106id <= 0x00000000]
[03:23:02.439]            __var ROMTableBase = 0;
[03:23:02.439]              // -> [ROMTableBase <= 0x00000000]
[03:23:02.439]            __ap = 0;      // AHB-AP
[03:23:02.439]              // -> [__ap <= 0x00000000]
[03:23:02.440]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:23:02.440]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.440]              // -> [ROMTableBase <= 0xE00FD000]
[03:23:02.440]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:23:02.441]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.441]              // -> [pidr1 <= 0x00000004]
[03:23:02.441]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:23:02.441]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.442]              // -> [pidr2 <= 0x0000001A]
[03:23:02.442]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:23:02.442]              // -> [jep106id <= 0x00000020]
[03:23:02.442]          </block>
[03:23:02.442]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:23:02.442]            // if-block "jep106id != 0x20"
[03:23:02.442]              // =>  FALSE
[03:23:02.443]            // skip if-block "jep106id != 0x20"
[03:23:02.443]          </control>
[03:23:02.443]        </sequence>
[03:23:02.443]    </block>
[03:23:02.443]  </sequence>
[03:23:02.443]  
[03:23:02.457]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:23:02.457]  
[03:23:02.458]  <debugvars>
[03:23:02.458]    // Pre-defined
[03:23:02.458]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:23:02.458]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:23:02.458]    __dp=0x00000000
[03:23:02.459]    __ap=0x00000000
[03:23:02.459]    __traceout=0x00000001      (SWO Trace)
[03:23:02.459]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:23:02.459]    __FlashAddr=0x00000000
[03:23:02.459]    __FlashLen=0x00000000
[03:23:02.459]    __FlashArg=0x00000000
[03:23:02.460]    __FlashOp=0x00000000
[03:23:02.460]    __Result=0x00000000
[03:23:02.460]    
[03:23:02.460]    // User-defined
[03:23:02.460]    DbgMCU_CR=0x00000007
[03:23:02.461]    DbgMCU_APB1_Fz=0x00000000
[03:23:02.461]    DbgMCU_APB2_Fz=0x00000000
[03:23:02.461]    TraceClk_Pin=0x00040002
[03:23:02.461]    TraceD0_Pin=0x00040003
[03:23:02.461]    TraceD1_Pin=0x00040004
[03:23:02.462]    TraceD2_Pin=0x00040005
[03:23:02.462]    TraceD3_Pin=0x00040006
[03:23:02.462]  </debugvars>
[03:23:02.462]  
[03:23:02.462]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:23:02.463]    <block atomic="false" info="">
[03:23:02.463]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:23:02.463]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.464]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:23:02.464]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.465]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:23:02.465]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.465]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:23:02.466]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.466]    </block>
[03:23:02.466]  </sequence>
[03:23:02.466]  
[03:23:02.483]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:23:02.483]  
[03:23:02.483]  <debugvars>
[03:23:02.484]    // Pre-defined
[03:23:02.484]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:23:02.484]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:23:02.484]    __dp=0x00000000
[03:23:02.484]    __ap=0x00000000
[03:23:02.485]    __traceout=0x00000001      (SWO Trace)
[03:23:02.485]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:23:02.485]    __FlashAddr=0x00000000
[03:23:02.485]    __FlashLen=0x00000000
[03:23:02.485]    __FlashArg=0x00000000
[03:23:02.486]    __FlashOp=0x00000000
[03:23:02.486]    __Result=0x00000000
[03:23:02.486]    
[03:23:02.486]    // User-defined
[03:23:02.486]    DbgMCU_CR=0x00000007
[03:23:02.486]    DbgMCU_APB1_Fz=0x00000000
[03:23:02.487]    DbgMCU_APB2_Fz=0x00000000
[03:23:02.487]    TraceClk_Pin=0x00040002
[03:23:02.487]    TraceD0_Pin=0x00040003
[03:23:02.487]    TraceD1_Pin=0x00040004
[03:23:02.487]    TraceD2_Pin=0x00040005
[03:23:02.488]    TraceD3_Pin=0x00040006
[03:23:02.488]  </debugvars>
[03:23:02.488]  
[03:23:02.488]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:23:02.488]    <block atomic="false" info="">
[03:23:02.489]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:23:02.489]        // -> [traceSWO <= 0x00000001]
[03:23:02.489]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:23:02.489]        // -> [traceTPIU <= 0x00000000]
[03:23:02.489]    </block>
[03:23:02.489]    <control if="traceSWO" while="" timeout="0" info="">
[03:23:02.490]      // if-block "traceSWO"
[03:23:02.490]        // =>  TRUE
[03:23:02.490]      <block atomic="false" info="">
[03:23:02.490]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:23:02.490]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:23:02.491]            <block atomic="false" info="">
[03:23:02.491]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:23:02.491]                // -> [dbgmcu_val <= 0x00000000]
[03:23:02.491]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:23:02.491]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:23:02.491]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:23:02.492]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.492]                // -> [dbgmcu_val <= 0x00000007]
[03:23:02.492]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:23:02.493]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:23:02.493]              Sequence("ConfigureTraceSWOPin");
[03:23:02.493]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:23:02.493]                  <block atomic="false" info="">
[03:23:02.493]                    __var pin     = 0;
[03:23:02.493]                      // -> [pin <= 0x00000000]
[03:23:02.494]                    __var port    = 0;
[03:23:02.494]                      // -> [port <= 0x00000000]
[03:23:02.494]                    __var portAdr = 0;
[03:23:02.494]                      // -> [portAdr <= 0x00000000]
[03:23:02.494]                    __var pos     = 0;
[03:23:02.494]                      // -> [pos <= 0x00000000]
[03:23:02.495]                    __var SWO_Pin = 0x00010003;          // PB3
[03:23:02.495]                      // -> [SWO_Pin <= 0x00010003]
[03:23:02.495]                  </block>
[03:23:02.495]                  <block atomic="false" info="configure SWO">
[03:23:02.495]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:23:02.495]                      // -> [pin <= 0x00000003]
[03:23:02.495]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:23:02.496]                      // -> [port <= 0x00000001]
[03:23:02.496]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:23:02.496]                      // -> [portAdr <= 0x40020400]
[03:23:02.496]                    pos = pin * 2;
[03:23:02.496]                      // -> [pos <= 0x00000006]
[03:23:02.496]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:23:02.497]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.497]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.498]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:23:02.498]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.498]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.499]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:23:02.499]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.499]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.499]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:23:02.500]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.500]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.500]                  </block>
[03:23:02.501]                  <control if="pin <  8" while="" timeout="0" info="">
[03:23:02.501]                    // if-block "pin <  8"
[03:23:02.501]                      // =>  TRUE
[03:23:02.501]                    <block atomic="false" info="">
[03:23:02.501]                      pos = ((pin    ) & 7) * 4;
[03:23:02.501]                        // -> [pos <= 0x0000000C]
[03:23:02.501]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:23:02.502]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.502]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.503]                    </block>
[03:23:02.503]                    // end if-block "pin <  8"
[03:23:02.503]                  </control>
[03:23:02.503]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:23:02.503]                    // if-block "pin >= 8"
[03:23:02.503]                      // =>  FALSE
[03:23:02.503]                    // skip if-block "pin >= 8"
[03:23:02.503]                  </control>
[03:23:02.504]                </sequence>
[03:23:02.504]            </block>
[03:23:02.504]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:23:02.504]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:23:02.504]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.505]            </block>
[03:23:02.505]          </sequence>
[03:23:02.505]      </block>
[03:23:02.505]      // end if-block "traceSWO"
[03:23:02.505]    </control>
[03:23:02.505]    <control if="traceTPIU" while="" timeout="0" info="">
[03:23:02.505]      // if-block "traceTPIU"
[03:23:02.506]        // =>  FALSE
[03:23:02.506]      // skip if-block "traceTPIU"
[03:23:02.506]    </control>
[03:23:02.506]  </sequence>
[03:23:02.506]  
[03:23:02.510]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:23:02.510]  
[03:23:02.510]  <debugvars>
[03:23:02.510]    // Pre-defined
[03:23:02.510]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:23:02.511]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:23:02.511]    __dp=0x00000000
[03:23:02.511]    __ap=0x00000000
[03:23:02.511]    __traceout=0x00000001      (SWO Trace)
[03:23:02.511]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:23:02.511]    __FlashAddr=0x00000000
[03:23:02.512]    __FlashLen=0x00000000
[03:23:02.512]    __FlashArg=0x00000000
[03:23:02.512]    __FlashOp=0x00000000
[03:23:02.512]    __Result=0x00000000
[03:23:02.512]    
[03:23:02.512]    // User-defined
[03:23:02.513]    DbgMCU_CR=0x00000007
[03:23:02.513]    DbgMCU_APB1_Fz=0x00000000
[03:23:02.513]    DbgMCU_APB2_Fz=0x00000000
[03:23:02.513]    TraceClk_Pin=0x00040002
[03:23:02.513]    TraceD0_Pin=0x00040003
[03:23:02.514]    TraceD1_Pin=0x00040004
[03:23:02.514]    TraceD2_Pin=0x00040005
[03:23:02.514]    TraceD3_Pin=0x00040006
[03:23:02.514]  </debugvars>
[03:23:02.514]  
[03:23:02.515]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:23:02.515]    <block atomic="false" info="">
[03:23:02.515]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:23:02.515]        // -> [traceSWO <= 0x00000001]
[03:23:02.515]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:23:02.516]        // -> [traceTPIU <= 0x00000000]
[03:23:02.516]    </block>
[03:23:02.516]    <control if="traceSWO" while="" timeout="0" info="">
[03:23:02.516]      // if-block "traceSWO"
[03:23:02.516]        // =>  TRUE
[03:23:02.517]      <block atomic="false" info="">
[03:23:02.517]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:23:02.517]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:23:02.517]            <block atomic="false" info="">
[03:23:02.517]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:23:02.517]                // -> [dbgmcu_val <= 0x00000000]
[03:23:02.518]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:23:02.518]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:23:02.518]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:23:02.519]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.519]                // -> [dbgmcu_val <= 0x00000007]
[03:23:02.519]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:23:02.519]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:23:02.519]              Sequence("ConfigureTraceSWOPin");
[03:23:02.519]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:23:02.520]                  <block atomic="false" info="">
[03:23:02.520]                    __var pin     = 0;
[03:23:02.520]                      // -> [pin <= 0x00000000]
[03:23:02.520]                    __var port    = 0;
[03:23:02.520]                      // -> [port <= 0x00000000]
[03:23:02.520]                    __var portAdr = 0;
[03:23:02.521]                      // -> [portAdr <= 0x00000000]
[03:23:02.521]                    __var pos     = 0;
[03:23:02.521]                      // -> [pos <= 0x00000000]
[03:23:02.521]                    __var SWO_Pin = 0x00010003;          // PB3
[03:23:02.521]                      // -> [SWO_Pin <= 0x00010003]
[03:23:02.521]                  </block>
[03:23:02.522]                  <block atomic="false" info="configure SWO">
[03:23:02.522]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:23:02.522]                      // -> [pin <= 0x00000003]
[03:23:02.522]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:23:02.522]                      // -> [port <= 0x00000001]
[03:23:02.522]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:23:02.522]                      // -> [portAdr <= 0x40020400]
[03:23:02.523]                    pos = pin * 2;
[03:23:02.523]                      // -> [pos <= 0x00000006]
[03:23:02.523]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:23:02.523]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.524]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.524]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:23:02.525]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.525]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.525]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:23:02.526]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.526]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.526]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:23:02.527]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.527]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.527]                  </block>
[03:23:02.527]                  <control if="pin <  8" while="" timeout="0" info="">
[03:23:02.528]                    // if-block "pin <  8"
[03:23:02.528]                      // =>  TRUE
[03:23:02.528]                    <block atomic="false" info="">
[03:23:02.528]                      pos = ((pin    ) & 7) * 4;
[03:23:02.528]                        // -> [pos <= 0x0000000C]
[03:23:02.528]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:23:02.529]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.529]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.530]                    </block>
[03:23:02.530]                    // end if-block "pin <  8"
[03:23:02.530]                  </control>
[03:23:02.530]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:23:02.530]                    // if-block "pin >= 8"
[03:23:02.530]                      // =>  FALSE
[03:23:02.530]                    // skip if-block "pin >= 8"
[03:23:02.531]                  </control>
[03:23:02.531]                </sequence>
[03:23:02.531]            </block>
[03:23:02.531]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:23:02.531]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:23:02.532]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.532]            </block>
[03:23:02.532]          </sequence>
[03:23:02.532]      </block>
[03:23:02.532]      // end if-block "traceSWO"
[03:23:02.532]    </control>
[03:23:02.532]    <control if="traceTPIU" while="" timeout="0" info="">
[03:23:02.533]      // if-block "traceTPIU"
[03:23:02.533]        // =>  FALSE
[03:23:02.533]      // skip if-block "traceTPIU"
[03:23:02.533]    </control>
[03:23:02.533]  </sequence>
[03:23:02.533]  
[03:23:02.742]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:23:02.742]  
[03:23:02.742]  <debugvars>
[03:23:02.742]    // Pre-defined
[03:23:02.742]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:23:02.743]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:23:02.743]    __dp=0x00000000
[03:23:02.743]    __ap=0x00000000
[03:23:02.743]    __traceout=0x00000001      (SWO Trace)
[03:23:02.743]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:23:02.744]    __FlashAddr=0x00000000
[03:23:02.744]    __FlashLen=0x00000000
[03:23:02.744]    __FlashArg=0x00000000
[03:23:02.744]    __FlashOp=0x00000000
[03:23:02.744]    __Result=0x00000000
[03:23:02.744]    
[03:23:02.744]    // User-defined
[03:23:02.745]    DbgMCU_CR=0x00000007
[03:23:02.745]    DbgMCU_APB1_Fz=0x00000000
[03:23:02.745]    DbgMCU_APB2_Fz=0x00000000
[03:23:02.745]    TraceClk_Pin=0x00040002
[03:23:02.745]    TraceD0_Pin=0x00040003
[03:23:02.746]    TraceD1_Pin=0x00040004
[03:23:02.746]    TraceD2_Pin=0x00040005
[03:23:02.746]    TraceD3_Pin=0x00040006
[03:23:02.746]  </debugvars>
[03:23:02.746]  
[03:23:02.747]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:23:02.747]    <block atomic="false" info="">
[03:23:02.747]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:23:02.747]        // -> [traceSWO <= 0x00000001]
[03:23:02.747]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:23:02.748]        // -> [traceTPIU <= 0x00000000]
[03:23:02.748]    </block>
[03:23:02.748]    <control if="traceSWO" while="" timeout="0" info="">
[03:23:02.748]      // if-block "traceSWO"
[03:23:02.748]        // =>  TRUE
[03:23:02.748]      <block atomic="false" info="">
[03:23:02.748]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:23:02.749]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:23:02.749]            <block atomic="false" info="">
[03:23:02.749]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:23:02.749]                // -> [dbgmcu_val <= 0x00000000]
[03:23:02.749]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:23:02.749]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:23:02.749]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:23:02.750]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.750]                // -> [dbgmcu_val <= 0x00000007]
[03:23:02.750]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:23:02.750]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:23:02.750]              Sequence("ConfigureTraceSWOPin");
[03:23:02.751]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:23:02.751]                  <block atomic="false" info="">
[03:23:02.751]                    __var pin     = 0;
[03:23:02.751]                      // -> [pin <= 0x00000000]
[03:23:02.751]                    __var port    = 0;
[03:23:02.751]                      // -> [port <= 0x00000000]
[03:23:02.751]                    __var portAdr = 0;
[03:23:02.751]                      // -> [portAdr <= 0x00000000]
[03:23:02.752]                    __var pos     = 0;
[03:23:02.752]                      // -> [pos <= 0x00000000]
[03:23:02.752]                    __var SWO_Pin = 0x00010003;          // PB3
[03:23:02.752]                      // -> [SWO_Pin <= 0x00010003]
[03:23:02.752]                  </block>
[03:23:02.752]                  <block atomic="false" info="configure SWO">
[03:23:02.753]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:23:02.753]                      // -> [pin <= 0x00000003]
[03:23:02.753]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:23:02.753]                      // -> [port <= 0x00000001]
[03:23:02.753]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:23:02.753]                      // -> [portAdr <= 0x40020400]
[03:23:02.753]                    pos = pin * 2;
[03:23:02.753]                      // -> [pos <= 0x00000006]
[03:23:02.754]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:23:02.754]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.754]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.755]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:23:02.755]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.756]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.756]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:23:02.756]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.757]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.757]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:23:02.757]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.758]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.758]                  </block>
[03:23:02.758]                  <control if="pin <  8" while="" timeout="0" info="">
[03:23:02.758]                    // if-block "pin <  8"
[03:23:02.758]                      // =>  TRUE
[03:23:02.758]                    <block atomic="false" info="">
[03:23:02.758]                      pos = ((pin    ) & 7) * 4;
[03:23:02.759]                        // -> [pos <= 0x0000000C]
[03:23:02.759]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:23:02.759]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.760]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.760]                    </block>
[03:23:02.760]                    // end if-block "pin <  8"
[03:23:02.760]                  </control>
[03:23:02.760]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:23:02.760]                    // if-block "pin >= 8"
[03:23:02.760]                      // =>  FALSE
[03:23:02.760]                    // skip if-block "pin >= 8"
[03:23:02.761]                  </control>
[03:23:02.761]                </sequence>
[03:23:02.761]            </block>
[03:23:02.761]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:23:02.761]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:23:02.762]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:23:02.762]            </block>
[03:23:02.762]          </sequence>
[03:23:02.762]      </block>
[03:23:02.762]      // end if-block "traceSWO"
[03:23:02.762]    </control>
[03:23:02.762]    <control if="traceTPIU" while="" timeout="0" info="">
[03:23:02.762]      // if-block "traceTPIU"
[03:23:02.762]        // =>  FALSE
[03:23:02.762]      // skip if-block "traceTPIU"
[03:23:02.763]    </control>
[03:23:02.763]  </sequence>
[03:23:02.763]  
[03:25:28.935]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:25:28.935]  
[03:25:28.936]  <debugvars>
[03:25:28.936]    // Pre-defined
[03:25:28.936]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:25:28.937]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:25:28.937]    __dp=0x00000000
[03:25:28.937]    __ap=0x00000000
[03:25:28.937]    __traceout=0x00000001      (SWO Trace)
[03:25:28.937]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:25:28.938]    __FlashAddr=0x00000000
[03:25:28.938]    __FlashLen=0x00000000
[03:25:28.938]    __FlashArg=0x00000000
[03:25:28.938]    __FlashOp=0x00000000
[03:25:28.938]    __Result=0x00000000
[03:25:28.939]    
[03:25:28.939]    // User-defined
[03:25:28.939]    DbgMCU_CR=0x00000007
[03:25:28.939]    DbgMCU_APB1_Fz=0x00000000
[03:25:28.939]    DbgMCU_APB2_Fz=0x00000000
[03:25:28.940]    TraceClk_Pin=0x00040002
[03:25:28.940]    TraceD0_Pin=0x00040003
[03:25:28.940]    TraceD1_Pin=0x00040004
[03:25:28.940]    TraceD2_Pin=0x00040005
[03:25:28.940]    TraceD3_Pin=0x00040006
[03:25:28.940]  </debugvars>
[03:25:28.941]  
[03:25:28.941]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:25:28.941]    <block atomic="false" info="">
[03:25:28.941]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:25:28.941]        // -> [traceSWO <= 0x00000001]
[03:25:28.942]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:25:28.942]        // -> [traceTPIU <= 0x00000000]
[03:25:28.942]    </block>
[03:25:28.942]    <control if="traceSWO" while="" timeout="0" info="">
[03:25:28.942]      // if-block "traceSWO"
[03:25:28.943]        // =>  TRUE
[03:25:28.943]      <block atomic="false" info="">
[03:25:28.943]        Sequence("DisableTraceSWO");
[03:25:28.943]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:25:28.943]            <block atomic="false" info="">
[03:25:28.943]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:25:28.944]                // -> [dbgmcu_val <= 0x00000000]
[03:25:28.944]            </block>
[03:25:28.944]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:25:28.944]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:25:28.945]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:25:28.945]                // -> [dbgmcu_val <= 0x00000007]
[03:25:28.945]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:25:28.945]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:25:28.946]            </block>
[03:25:28.946]          </sequence>
[03:25:28.946]      </block>
[03:25:28.946]      // end if-block "traceSWO"
[03:25:28.946]    </control>
[03:25:28.946]    <control if="traceTPIU" while="" timeout="0" info="">
[03:25:28.947]      // if-block "traceTPIU"
[03:25:28.947]        // =>  FALSE
[03:25:28.947]      // skip if-block "traceTPIU"
[03:25:28.947]    </control>
[03:25:28.947]  </sequence>
[03:25:28.948]  
[03:25:38.290]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:25:38.290]  
[03:25:38.290]  <debugvars>
[03:25:38.290]    // Pre-defined
[03:25:38.290]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:25:38.290]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:25:38.291]    __dp=0x00000000
[03:25:38.291]    __ap=0x00000000
[03:25:38.291]    __traceout=0x00000001      (SWO Trace)
[03:25:38.291]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:25:38.291]    __FlashAddr=0x00000000
[03:25:38.291]    __FlashLen=0x00000000
[03:25:38.292]    __FlashArg=0x00000000
[03:25:38.292]    __FlashOp=0x00000000
[03:25:38.292]    __Result=0x00000000
[03:25:38.292]    
[03:25:38.292]    // User-defined
[03:25:38.292]    DbgMCU_CR=0x00000007
[03:25:38.293]    DbgMCU_APB1_Fz=0x00000000
[03:25:38.293]    DbgMCU_APB2_Fz=0x00000000
[03:25:38.293]    TraceClk_Pin=0x00040002
[03:25:38.293]    TraceD0_Pin=0x00040003
[03:25:38.293]    TraceD1_Pin=0x00040004
[03:25:38.293]    TraceD2_Pin=0x00040005
[03:25:38.294]    TraceD3_Pin=0x00040006
[03:25:38.294]  </debugvars>
[03:25:38.294]  
[03:25:38.294]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:25:38.294]    <block atomic="false" info="">
[03:25:38.294]      Sequence("CheckID");
[03:25:38.295]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:25:38.295]          <block atomic="false" info="">
[03:25:38.295]            __var pidr1 = 0;
[03:25:38.295]              // -> [pidr1 <= 0x00000000]
[03:25:38.295]            __var pidr2 = 0;
[03:25:38.295]              // -> [pidr2 <= 0x00000000]
[03:25:38.296]            __var jep106id = 0;
[03:25:38.296]              // -> [jep106id <= 0x00000000]
[03:25:38.296]            __var ROMTableBase = 0;
[03:25:38.296]              // -> [ROMTableBase <= 0x00000000]
[03:25:38.296]            __ap = 0;      // AHB-AP
[03:25:38.296]              // -> [__ap <= 0x00000000]
[03:25:38.296]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:25:38.297]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:25:38.297]              // -> [ROMTableBase <= 0xE00FD000]
[03:25:38.297]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:25:38.298]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:25:38.298]              // -> [pidr1 <= 0x00000004]
[03:25:38.298]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:25:38.299]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:25:38.299]              // -> [pidr2 <= 0x0000001A]
[03:25:38.299]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:25:38.299]              // -> [jep106id <= 0x00000020]
[03:25:38.299]          </block>
[03:25:38.299]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:25:38.299]            // if-block "jep106id != 0x20"
[03:25:38.300]              // =>  FALSE
[03:25:38.300]            // skip if-block "jep106id != 0x20"
[03:25:38.300]          </control>
[03:25:38.300]        </sequence>
[03:25:38.300]    </block>
[03:25:38.300]  </sequence>
[03:25:38.300]  
[03:25:38.315]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:25:38.315]  
[03:25:38.315]  <debugvars>
[03:25:38.315]    // Pre-defined
[03:25:38.315]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:25:38.316]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:25:38.316]    __dp=0x00000000
[03:25:38.316]    __ap=0x00000000
[03:25:38.316]    __traceout=0x00000001      (SWO Trace)
[03:25:38.316]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:25:38.317]    __FlashAddr=0x00000000
[03:25:38.317]    __FlashLen=0x00000000
[03:25:38.317]    __FlashArg=0x00000000
[03:25:38.317]    __FlashOp=0x00000000
[03:25:38.317]    __Result=0x00000000
[03:25:38.317]    
[03:25:38.317]    // User-defined
[03:25:38.318]    DbgMCU_CR=0x00000007
[03:25:38.318]    DbgMCU_APB1_Fz=0x00000000
[03:25:38.318]    DbgMCU_APB2_Fz=0x00000000
[03:25:38.318]    TraceClk_Pin=0x00040002
[03:25:38.318]    TraceD0_Pin=0x00040003
[03:25:38.319]    TraceD1_Pin=0x00040004
[03:25:38.319]    TraceD2_Pin=0x00040005
[03:25:38.319]    TraceD3_Pin=0x00040006
[03:25:38.319]  </debugvars>
[03:25:38.319]  
[03:25:38.320]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:25:38.320]    <block atomic="false" info="">
[03:25:38.320]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:25:38.321]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:25:38.321]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:25:38.321]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:25:38.321]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:25:38.322]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:25:38.322]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:25:38.323]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:25:38.323]    </block>
[03:25:38.323]  </sequence>
[03:25:38.323]  
[03:26:09.675]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:26:09.675]  
[03:26:09.675]  <debugvars>
[03:26:09.675]    // Pre-defined
[03:26:09.676]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:09.676]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:26:09.676]    __dp=0x00000000
[03:26:09.676]    __ap=0x00000000
[03:26:09.676]    __traceout=0x00000001      (SWO Trace)
[03:26:09.676]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:09.677]    __FlashAddr=0x00000000
[03:26:09.677]    __FlashLen=0x00000000
[03:26:09.677]    __FlashArg=0x00000000
[03:26:09.677]    __FlashOp=0x00000000
[03:26:09.677]    __Result=0x00000000
[03:26:09.678]    
[03:26:09.678]    // User-defined
[03:26:09.678]    DbgMCU_CR=0x00000007
[03:26:09.678]    DbgMCU_APB1_Fz=0x00000000
[03:26:09.678]    DbgMCU_APB2_Fz=0x00000000
[03:26:09.678]    TraceClk_Pin=0x00040002
[03:26:09.679]    TraceD0_Pin=0x00040003
[03:26:09.679]    TraceD1_Pin=0x00040004
[03:26:09.679]    TraceD2_Pin=0x00040005
[03:26:09.679]    TraceD3_Pin=0x00040006
[03:26:09.679]  </debugvars>
[03:26:09.680]  
[03:26:09.680]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:26:09.680]    <block atomic="false" info="">
[03:26:09.680]      Sequence("CheckID");
[03:26:09.680]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:26:09.680]          <block atomic="false" info="">
[03:26:09.681]            __var pidr1 = 0;
[03:26:09.681]              // -> [pidr1 <= 0x00000000]
[03:26:09.681]            __var pidr2 = 0;
[03:26:09.681]              // -> [pidr2 <= 0x00000000]
[03:26:09.681]            __var jep106id = 0;
[03:26:09.682]              // -> [jep106id <= 0x00000000]
[03:26:09.682]            __var ROMTableBase = 0;
[03:26:09.682]              // -> [ROMTableBase <= 0x00000000]
[03:26:09.682]            __ap = 0;      // AHB-AP
[03:26:09.682]              // -> [__ap <= 0x00000000]
[03:26:09.682]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:26:09.683]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.683]              // -> [ROMTableBase <= 0xE00FD000]
[03:26:09.683]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:26:09.684]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.684]              // -> [pidr1 <= 0x00000004]
[03:26:09.684]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:26:09.685]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.685]              // -> [pidr2 <= 0x0000001A]
[03:26:09.685]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:26:09.685]              // -> [jep106id <= 0x00000020]
[03:26:09.685]          </block>
[03:26:09.685]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:26:09.686]            // if-block "jep106id != 0x20"
[03:26:09.686]              // =>  FALSE
[03:26:09.686]            // skip if-block "jep106id != 0x20"
[03:26:09.686]          </control>
[03:26:09.686]        </sequence>
[03:26:09.686]    </block>
[03:26:09.686]  </sequence>
[03:26:09.687]  
[03:26:09.702]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:26:09.702]  
[03:26:09.702]  <debugvars>
[03:26:09.702]    // Pre-defined
[03:26:09.702]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:09.702]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:26:09.703]    __dp=0x00000000
[03:26:09.703]    __ap=0x00000000
[03:26:09.703]    __traceout=0x00000001      (SWO Trace)
[03:26:09.703]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:09.703]    __FlashAddr=0x00000000
[03:26:09.704]    __FlashLen=0x00000000
[03:26:09.704]    __FlashArg=0x00000000
[03:26:09.704]    __FlashOp=0x00000000
[03:26:09.704]    __Result=0x00000000
[03:26:09.704]    
[03:26:09.704]    // User-defined
[03:26:09.705]    DbgMCU_CR=0x00000007
[03:26:09.705]    DbgMCU_APB1_Fz=0x00000000
[03:26:09.705]    DbgMCU_APB2_Fz=0x00000000
[03:26:09.705]    TraceClk_Pin=0x00040002
[03:26:09.705]    TraceD0_Pin=0x00040003
[03:26:09.706]    TraceD1_Pin=0x00040004
[03:26:09.706]    TraceD2_Pin=0x00040005
[03:26:09.706]    TraceD3_Pin=0x00040006
[03:26:09.706]  </debugvars>
[03:26:09.706]  
[03:26:09.706]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:26:09.706]    <block atomic="false" info="">
[03:26:09.707]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:26:09.707]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.708]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:26:09.708]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.708]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:26:09.709]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.709]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:26:09.709]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.710]    </block>
[03:26:09.710]  </sequence>
[03:26:09.710]  
[03:26:09.727]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:26:09.727]  
[03:26:09.727]  <debugvars>
[03:26:09.727]    // Pre-defined
[03:26:09.727]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:09.728]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:26:09.728]    __dp=0x00000000
[03:26:09.728]    __ap=0x00000000
[03:26:09.728]    __traceout=0x00000001      (SWO Trace)
[03:26:09.728]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:09.728]    __FlashAddr=0x00000000
[03:26:09.729]    __FlashLen=0x00000000
[03:26:09.729]    __FlashArg=0x00000000
[03:26:09.729]    __FlashOp=0x00000000
[03:26:09.729]    __Result=0x00000000
[03:26:09.729]    
[03:26:09.729]    // User-defined
[03:26:09.729]    DbgMCU_CR=0x00000007
[03:26:09.730]    DbgMCU_APB1_Fz=0x00000000
[03:26:09.730]    DbgMCU_APB2_Fz=0x00000000
[03:26:09.730]    TraceClk_Pin=0x00040002
[03:26:09.730]    TraceD0_Pin=0x00040003
[03:26:09.730]    TraceD1_Pin=0x00040004
[03:26:09.731]    TraceD2_Pin=0x00040005
[03:26:09.731]    TraceD3_Pin=0x00040006
[03:26:09.731]  </debugvars>
[03:26:09.731]  
[03:26:09.731]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:26:09.731]    <block atomic="false" info="">
[03:26:09.731]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:26:09.732]        // -> [traceSWO <= 0x00000001]
[03:26:09.732]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:26:09.732]        // -> [traceTPIU <= 0x00000000]
[03:26:09.732]    </block>
[03:26:09.732]    <control if="traceSWO" while="" timeout="0" info="">
[03:26:09.732]      // if-block "traceSWO"
[03:26:09.732]        // =>  TRUE
[03:26:09.733]      <block atomic="false" info="">
[03:26:09.733]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:26:09.733]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:26:09.733]            <block atomic="false" info="">
[03:26:09.733]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:26:09.733]                // -> [dbgmcu_val <= 0x00000000]
[03:26:09.733]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:26:09.734]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:26:09.734]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:26:09.734]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.734]                // -> [dbgmcu_val <= 0x00000007]
[03:26:09.734]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:26:09.734]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:26:09.735]              Sequence("ConfigureTraceSWOPin");
[03:26:09.735]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:26:09.735]                  <block atomic="false" info="">
[03:26:09.735]                    __var pin     = 0;
[03:26:09.735]                      // -> [pin <= 0x00000000]
[03:26:09.735]                    __var port    = 0;
[03:26:09.735]                      // -> [port <= 0x00000000]
[03:26:09.735]                    __var portAdr = 0;
[03:26:09.736]                      // -> [portAdr <= 0x00000000]
[03:26:09.736]                    __var pos     = 0;
[03:26:09.736]                      // -> [pos <= 0x00000000]
[03:26:09.736]                    __var SWO_Pin = 0x00010003;          // PB3
[03:26:09.736]                      // -> [SWO_Pin <= 0x00010003]
[03:26:09.736]                  </block>
[03:26:09.736]                  <block atomic="false" info="configure SWO">
[03:26:09.736]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:26:09.737]                      // -> [pin <= 0x00000003]
[03:26:09.737]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:26:09.737]                      // -> [port <= 0x00000001]
[03:26:09.737]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:26:09.737]                      // -> [portAdr <= 0x40020400]
[03:26:09.737]                    pos = pin * 2;
[03:26:09.737]                      // -> [pos <= 0x00000006]
[03:26:09.738]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:26:09.738]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.739]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.739]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:26:09.739]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.739]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.740]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:26:09.740]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.741]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.741]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:26:09.741]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.742]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.742]                  </block>
[03:26:09.742]                  <control if="pin <  8" while="" timeout="0" info="">
[03:26:09.742]                    // if-block "pin <  8"
[03:26:09.742]                      // =>  TRUE
[03:26:09.742]                    <block atomic="false" info="">
[03:26:09.742]                      pos = ((pin    ) & 7) * 4;
[03:26:09.742]                        // -> [pos <= 0x0000000C]
[03:26:09.742]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:26:09.743]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.743]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.743]                    </block>
[03:26:09.743]                    // end if-block "pin <  8"
[03:26:09.744]                  </control>
[03:26:09.744]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:26:09.744]                    // if-block "pin >= 8"
[03:26:09.744]                      // =>  FALSE
[03:26:09.744]                    // skip if-block "pin >= 8"
[03:26:09.744]                  </control>
[03:26:09.744]                </sequence>
[03:26:09.745]            </block>
[03:26:09.745]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:26:09.745]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:26:09.745]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.745]            </block>
[03:26:09.745]          </sequence>
[03:26:09.745]      </block>
[03:26:09.746]      // end if-block "traceSWO"
[03:26:09.746]    </control>
[03:26:09.746]    <control if="traceTPIU" while="" timeout="0" info="">
[03:26:09.746]      // if-block "traceTPIU"
[03:26:09.746]        // =>  FALSE
[03:26:09.747]      // skip if-block "traceTPIU"
[03:26:09.747]    </control>
[03:26:09.747]  </sequence>
[03:26:09.747]  
[03:26:09.751]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:26:09.751]  
[03:26:09.751]  <debugvars>
[03:26:09.751]    // Pre-defined
[03:26:09.752]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:09.752]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:26:09.752]    __dp=0x00000000
[03:26:09.752]    __ap=0x00000000
[03:26:09.752]    __traceout=0x00000001      (SWO Trace)
[03:26:09.752]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:09.753]    __FlashAddr=0x00000000
[03:26:09.753]    __FlashLen=0x00000000
[03:26:09.753]    __FlashArg=0x00000000
[03:26:09.753]    __FlashOp=0x00000000
[03:26:09.753]    __Result=0x00000000
[03:26:09.754]    
[03:26:09.754]    // User-defined
[03:26:09.754]    DbgMCU_CR=0x00000007
[03:26:09.754]    DbgMCU_APB1_Fz=0x00000000
[03:26:09.754]    DbgMCU_APB2_Fz=0x00000000
[03:26:09.754]    TraceClk_Pin=0x00040002
[03:26:09.755]    TraceD0_Pin=0x00040003
[03:26:09.755]    TraceD1_Pin=0x00040004
[03:26:09.755]    TraceD2_Pin=0x00040005
[03:26:09.755]    TraceD3_Pin=0x00040006
[03:26:09.755]  </debugvars>
[03:26:09.755]  
[03:26:09.756]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:26:09.756]    <block atomic="false" info="">
[03:26:09.756]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:26:09.756]        // -> [traceSWO <= 0x00000001]
[03:26:09.756]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:26:09.756]        // -> [traceTPIU <= 0x00000000]
[03:26:09.757]    </block>
[03:26:09.757]    <control if="traceSWO" while="" timeout="0" info="">
[03:26:09.757]      // if-block "traceSWO"
[03:26:09.757]        // =>  TRUE
[03:26:09.757]      <block atomic="false" info="">
[03:26:09.757]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:26:09.757]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:26:09.757]            <block atomic="false" info="">
[03:26:09.757]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:26:09.757]                // -> [dbgmcu_val <= 0x00000000]
[03:26:09.758]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:26:09.758]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:26:09.758]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:26:09.758]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.758]                // -> [dbgmcu_val <= 0x00000007]
[03:26:09.759]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:26:09.759]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:26:09.759]              Sequence("ConfigureTraceSWOPin");
[03:26:09.759]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:26:09.759]                  <block atomic="false" info="">
[03:26:09.759]                    __var pin     = 0;
[03:26:09.759]                      // -> [pin <= 0x00000000]
[03:26:09.759]                    __var port    = 0;
[03:26:09.760]                      // -> [port <= 0x00000000]
[03:26:09.760]                    __var portAdr = 0;
[03:26:09.760]                      // -> [portAdr <= 0x00000000]
[03:26:09.760]                    __var pos     = 0;
[03:26:09.760]                      // -> [pos <= 0x00000000]
[03:26:09.760]                    __var SWO_Pin = 0x00010003;          // PB3
[03:26:09.760]                      // -> [SWO_Pin <= 0x00010003]
[03:26:09.761]                  </block>
[03:26:09.761]                  <block atomic="false" info="configure SWO">
[03:26:09.761]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:26:09.761]                      // -> [pin <= 0x00000003]
[03:26:09.761]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:26:09.761]                      // -> [port <= 0x00000001]
[03:26:09.761]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:26:09.762]                      // -> [portAdr <= 0x40020400]
[03:26:09.762]                    pos = pin * 2;
[03:26:09.762]                      // -> [pos <= 0x00000006]
[03:26:09.762]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:26:09.762]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.763]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.763]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:26:09.763]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.764]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.764]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:26:09.764]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.765]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.765]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:26:09.765]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.766]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.766]                  </block>
[03:26:09.766]                  <control if="pin <  8" while="" timeout="0" info="">
[03:26:09.766]                    // if-block "pin <  8"
[03:26:09.766]                      // =>  TRUE
[03:26:09.766]                    <block atomic="false" info="">
[03:26:09.767]                      pos = ((pin    ) & 7) * 4;
[03:26:09.767]                        // -> [pos <= 0x0000000C]
[03:26:09.767]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:26:09.767]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.768]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.768]                    </block>
[03:26:09.768]                    // end if-block "pin <  8"
[03:26:09.768]                  </control>
[03:26:09.768]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:26:09.768]                    // if-block "pin >= 8"
[03:26:09.769]                      // =>  FALSE
[03:26:09.769]                    // skip if-block "pin >= 8"
[03:26:09.769]                  </control>
[03:26:09.769]                </sequence>
[03:26:09.769]            </block>
[03:26:09.769]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:26:09.769]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:26:09.770]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.770]            </block>
[03:26:09.770]          </sequence>
[03:26:09.770]      </block>
[03:26:09.770]      // end if-block "traceSWO"
[03:26:09.770]    </control>
[03:26:09.770]    <control if="traceTPIU" while="" timeout="0" info="">
[03:26:09.771]      // if-block "traceTPIU"
[03:26:09.771]        // =>  FALSE
[03:26:09.771]      // skip if-block "traceTPIU"
[03:26:09.771]    </control>
[03:26:09.771]  </sequence>
[03:26:09.771]  
[03:26:09.990]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:26:09.990]  
[03:26:09.991]  <debugvars>
[03:26:09.991]    // Pre-defined
[03:26:09.991]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:09.991]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:26:09.991]    __dp=0x00000000
[03:26:09.992]    __ap=0x00000000
[03:26:09.992]    __traceout=0x00000001      (SWO Trace)
[03:26:09.992]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:09.992]    __FlashAddr=0x00000000
[03:26:09.992]    __FlashLen=0x00000000
[03:26:09.992]    __FlashArg=0x00000000
[03:26:09.993]    __FlashOp=0x00000000
[03:26:09.993]    __Result=0x00000000
[03:26:09.993]    
[03:26:09.993]    // User-defined
[03:26:09.993]    DbgMCU_CR=0x00000007
[03:26:09.993]    DbgMCU_APB1_Fz=0x00000000
[03:26:09.994]    DbgMCU_APB2_Fz=0x00000000
[03:26:09.994]    TraceClk_Pin=0x00040002
[03:26:09.994]    TraceD0_Pin=0x00040003
[03:26:09.994]    TraceD1_Pin=0x00040004
[03:26:09.994]    TraceD2_Pin=0x00040005
[03:26:09.994]    TraceD3_Pin=0x00040006
[03:26:09.995]  </debugvars>
[03:26:09.995]  
[03:26:09.995]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:26:09.995]    <block atomic="false" info="">
[03:26:09.995]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:26:09.995]        // -> [traceSWO <= 0x00000001]
[03:26:09.995]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:26:09.996]        // -> [traceTPIU <= 0x00000000]
[03:26:09.996]    </block>
[03:26:09.996]    <control if="traceSWO" while="" timeout="0" info="">
[03:26:09.996]      // if-block "traceSWO"
[03:26:09.996]        // =>  TRUE
[03:26:09.997]      <block atomic="false" info="">
[03:26:09.997]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:26:09.997]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:26:09.997]            <block atomic="false" info="">
[03:26:09.997]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:26:09.997]                // -> [dbgmcu_val <= 0x00000000]
[03:26:09.997]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:26:09.998]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:26:09.998]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:26:09.998]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:26:09.998]                // -> [dbgmcu_val <= 0x00000007]
[03:26:09.999]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:26:09.999]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:26:09.999]              Sequence("ConfigureTraceSWOPin");
[03:26:09.999]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:26:09.999]                  <block atomic="false" info="">
[03:26:10.000]                    __var pin     = 0;
[03:26:10.000]                      // -> [pin <= 0x00000000]
[03:26:10.000]                    __var port    = 0;
[03:26:10.000]                      // -> [port <= 0x00000000]
[03:26:10.000]                    __var portAdr = 0;
[03:26:10.001]                      // -> [portAdr <= 0x00000000]
[03:26:10.001]                    __var pos     = 0;
[03:26:10.001]                      // -> [pos <= 0x00000000]
[03:26:10.001]                    __var SWO_Pin = 0x00010003;          // PB3
[03:26:10.001]                      // -> [SWO_Pin <= 0x00010003]
[03:26:10.001]                  </block>
[03:26:10.002]                  <block atomic="false" info="configure SWO">
[03:26:10.002]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:26:10.002]                      // -> [pin <= 0x00000003]
[03:26:10.002]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:26:10.002]                      // -> [port <= 0x00000001]
[03:26:10.002]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:26:10.003]                      // -> [portAdr <= 0x40020400]
[03:26:10.003]                    pos = pin * 2;
[03:26:10.003]                      // -> [pos <= 0x00000006]
[03:26:10.003]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:26:10.004]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:26:10.004]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:10.004]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:26:10.005]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:26:10.005]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:10.005]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:26:10.006]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:26:10.006]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:10.007]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:26:10.007]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:26:10.008]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:10.008]                  </block>
[03:26:10.008]                  <control if="pin <  8" while="" timeout="0" info="">
[03:26:10.008]                    // if-block "pin <  8"
[03:26:10.008]                      // =>  TRUE
[03:26:10.008]                    <block atomic="false" info="">
[03:26:10.008]                      pos = ((pin    ) & 7) * 4;
[03:26:10.009]                        // -> [pos <= 0x0000000C]
[03:26:10.009]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:26:10.009]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:26:10.010]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:10.010]                    </block>
[03:26:10.010]                    // end if-block "pin <  8"
[03:26:10.010]                  </control>
[03:26:10.011]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:26:10.011]                    // if-block "pin >= 8"
[03:26:10.011]                      // =>  FALSE
[03:26:10.011]                    // skip if-block "pin >= 8"
[03:26:10.011]                  </control>
[03:26:10.011]                </sequence>
[03:26:10.011]            </block>
[03:26:10.012]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:26:10.012]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:26:10.012]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:26:10.012]            </block>
[03:26:10.013]          </sequence>
[03:26:10.013]      </block>
[03:26:10.013]      // end if-block "traceSWO"
[03:26:10.013]    </control>
[03:26:10.013]    <control if="traceTPIU" while="" timeout="0" info="">
[03:26:10.013]      // if-block "traceTPIU"
[03:26:10.013]        // =>  FALSE
[03:26:10.014]      // skip if-block "traceTPIU"
[03:26:10.014]    </control>
[03:26:10.014]  </sequence>
[03:26:10.014]  
[03:27:20.327]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:27:20.327]  
[03:27:20.327]  <debugvars>
[03:27:20.327]    // Pre-defined
[03:27:20.327]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:27:20.327]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:27:20.328]    __dp=0x00000000
[03:27:20.328]    __ap=0x00000000
[03:27:20.328]    __traceout=0x00000001      (SWO Trace)
[03:27:20.328]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:27:20.328]    __FlashAddr=0x00000000
[03:27:20.328]    __FlashLen=0x00000000
[03:27:20.328]    __FlashArg=0x00000000
[03:27:20.329]    __FlashOp=0x00000000
[03:27:20.329]    __Result=0x00000000
[03:27:20.329]    
[03:27:20.329]    // User-defined
[03:27:20.329]    DbgMCU_CR=0x00000007
[03:27:20.329]    DbgMCU_APB1_Fz=0x00000000
[03:27:20.329]    DbgMCU_APB2_Fz=0x00000000
[03:27:20.329]    TraceClk_Pin=0x00040002
[03:27:20.329]    TraceD0_Pin=0x00040003
[03:27:20.330]    TraceD1_Pin=0x00040004
[03:27:20.330]    TraceD2_Pin=0x00040005
[03:27:20.330]    TraceD3_Pin=0x00040006
[03:27:20.330]  </debugvars>
[03:27:20.330]  
[03:27:20.330]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:27:20.330]    <block atomic="false" info="">
[03:27:20.331]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:27:20.331]        // -> [traceSWO <= 0x00000001]
[03:27:20.331]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:27:20.331]        // -> [traceTPIU <= 0x00000000]
[03:27:20.331]    </block>
[03:27:20.331]    <control if="traceSWO" while="" timeout="0" info="">
[03:27:20.331]      // if-block "traceSWO"
[03:27:20.331]        // =>  TRUE
[03:27:20.332]      <block atomic="false" info="">
[03:27:20.332]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:27:20.332]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:27:20.332]            <block atomic="false" info="">
[03:27:20.332]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:27:20.332]                // -> [dbgmcu_val <= 0x00000000]
[03:27:20.332]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:27:20.332]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:27:20.333]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:27:20.333]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:27:20.333]                // -> [dbgmcu_val <= 0x00000007]
[03:27:20.333]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:27:20.333]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:27:20.334]              Sequence("ConfigureTraceSWOPin");
[03:27:20.334]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:27:20.334]                  <block atomic="false" info="">
[03:27:20.334]                    __var pin     = 0;
[03:27:20.334]                      // -> [pin <= 0x00000000]
[03:27:20.334]                    __var port    = 0;
[03:27:20.334]                      // -> [port <= 0x00000000]
[03:27:20.335]                    __var portAdr = 0;
[03:27:20.335]                      // -> [portAdr <= 0x00000000]
[03:27:20.335]                    __var pos     = 0;
[03:27:20.335]                      // -> [pos <= 0x00000000]
[03:27:20.335]                    __var SWO_Pin = 0x00010003;          // PB3
[03:27:20.335]                      // -> [SWO_Pin <= 0x00010003]
[03:27:20.335]                  </block>
[03:27:20.335]                  <block atomic="false" info="configure SWO">
[03:27:20.336]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:27:20.336]                      // -> [pin <= 0x00000003]
[03:27:20.336]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:27:20.336]                      // -> [port <= 0x00000001]
[03:27:20.336]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:27:20.336]                      // -> [portAdr <= 0x40020400]
[03:27:20.336]                    pos = pin * 2;
[03:27:20.337]                      // -> [pos <= 0x00000006]
[03:27:20.337]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:27:20.337]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:27:20.338]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:27:20.338]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:27:20.338]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:27:20.339]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:27:20.339]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:27:20.339]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:27:20.339]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:27:20.340]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:27:20.340]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:27:20.340]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:27:20.341]                  </block>
[03:27:20.341]                  <control if="pin <  8" while="" timeout="0" info="">
[03:27:20.341]                    // if-block "pin <  8"
[03:27:20.341]                      // =>  TRUE
[03:27:20.341]                    <block atomic="false" info="">
[03:27:20.341]                      pos = ((pin    ) & 7) * 4;
[03:27:20.341]                        // -> [pos <= 0x0000000C]
[03:27:20.342]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:27:20.342]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:27:20.342]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:27:20.343]                    </block>
[03:27:20.343]                    // end if-block "pin <  8"
[03:27:20.343]                  </control>
[03:27:20.343]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:27:20.343]                    // if-block "pin >= 8"
[03:27:20.343]                      // =>  FALSE
[03:27:20.343]                    // skip if-block "pin >= 8"
[03:27:20.344]                  </control>
[03:27:20.344]                </sequence>
[03:27:20.344]            </block>
[03:27:20.344]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:27:20.344]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:27:20.344]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:27:20.345]            </block>
[03:27:20.345]          </sequence>
[03:27:20.345]      </block>
[03:27:20.345]      // end if-block "traceSWO"
[03:27:20.345]    </control>
[03:27:20.345]    <control if="traceTPIU" while="" timeout="0" info="">
[03:27:20.345]      // if-block "traceTPIU"
[03:27:20.345]        // =>  FALSE
[03:27:20.345]      // skip if-block "traceTPIU"
[03:27:20.346]    </control>
[03:27:20.346]  </sequence>
[03:27:20.346]  
[03:29:23.349]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:29:23.349]  
[03:29:23.349]  <debugvars>
[03:29:23.349]    // Pre-defined
[03:29:23.349]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:29:23.349]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:29:23.350]    __dp=0x00000000
[03:29:23.350]    __ap=0x00000000
[03:29:23.350]    __traceout=0x00000001      (SWO Trace)
[03:29:23.350]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:29:23.350]    __FlashAddr=0x00000000
[03:29:23.351]    __FlashLen=0x00000000
[03:29:23.351]    __FlashArg=0x00000000
[03:29:23.351]    __FlashOp=0x00000000
[03:29:23.351]    __Result=0x00000000
[03:29:23.351]    
[03:29:23.351]    // User-defined
[03:29:23.352]    DbgMCU_CR=0x00000007
[03:29:23.352]    DbgMCU_APB1_Fz=0x00000000
[03:29:23.352]    DbgMCU_APB2_Fz=0x00000000
[03:29:23.352]    TraceClk_Pin=0x00040002
[03:29:23.352]    TraceD0_Pin=0x00040003
[03:29:23.352]    TraceD1_Pin=0x00040004
[03:29:23.352]    TraceD2_Pin=0x00040005
[03:29:23.353]    TraceD3_Pin=0x00040006
[03:29:23.353]  </debugvars>
[03:29:23.353]  
[03:29:23.353]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:29:23.353]    <block atomic="false" info="">
[03:29:23.354]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:29:23.354]        // -> [traceSWO <= 0x00000001]
[03:29:23.354]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:29:23.354]        // -> [traceTPIU <= 0x00000000]
[03:29:23.354]    </block>
[03:29:23.354]    <control if="traceSWO" while="" timeout="0" info="">
[03:29:23.354]      // if-block "traceSWO"
[03:29:23.355]        // =>  TRUE
[03:29:23.355]      <block atomic="false" info="">
[03:29:23.355]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:29:23.355]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:29:23.355]            <block atomic="false" info="">
[03:29:23.355]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:29:23.355]                // -> [dbgmcu_val <= 0x00000000]
[03:29:23.356]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:29:23.356]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:29:23.356]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:29:23.356]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:29:23.356]                // -> [dbgmcu_val <= 0x00000007]
[03:29:23.357]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:29:23.357]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:29:23.357]              Sequence("ConfigureTraceSWOPin");
[03:29:23.357]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:29:23.357]                  <block atomic="false" info="">
[03:29:23.357]                    __var pin     = 0;
[03:29:23.357]                      // -> [pin <= 0x00000000]
[03:29:23.357]                    __var port    = 0;
[03:29:23.357]                      // -> [port <= 0x00000000]
[03:29:23.358]                    __var portAdr = 0;
[03:29:23.358]                      // -> [portAdr <= 0x00000000]
[03:29:23.358]                    __var pos     = 0;
[03:29:23.358]                      // -> [pos <= 0x00000000]
[03:29:23.358]                    __var SWO_Pin = 0x00010003;          // PB3
[03:29:23.358]                      // -> [SWO_Pin <= 0x00010003]
[03:29:23.358]                  </block>
[03:29:23.359]                  <block atomic="false" info="configure SWO">
[03:29:23.359]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:29:23.359]                      // -> [pin <= 0x00000003]
[03:29:23.359]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:29:23.359]                      // -> [port <= 0x00000001]
[03:29:23.359]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:29:23.359]                      // -> [portAdr <= 0x40020400]
[03:29:23.359]                    pos = pin * 2;
[03:29:23.360]                      // -> [pos <= 0x00000006]
[03:29:23.360]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:29:23.360]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:29:23.361]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:29:23.361]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:29:23.361]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:29:23.361]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:29:23.362]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:29:23.362]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:29:23.362]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:29:23.363]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:29:23.363]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:29:23.363]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:29:23.363]                  </block>
[03:29:23.364]                  <control if="pin <  8" while="" timeout="0" info="">
[03:29:23.364]                    // if-block "pin <  8"
[03:29:23.364]                      // =>  TRUE
[03:29:23.364]                    <block atomic="false" info="">
[03:29:23.364]                      pos = ((pin    ) & 7) * 4;
[03:29:23.364]                        // -> [pos <= 0x0000000C]
[03:29:23.364]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:29:23.365]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:29:23.365]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:29:23.365]                    </block>
[03:29:23.365]                    // end if-block "pin <  8"
[03:29:23.366]                  </control>
[03:29:23.366]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:29:23.366]                    // if-block "pin >= 8"
[03:29:23.366]                      // =>  FALSE
[03:29:23.366]                    // skip if-block "pin >= 8"
[03:29:23.366]                  </control>
[03:29:23.366]                </sequence>
[03:29:23.366]            </block>
[03:29:23.367]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:29:23.367]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:29:23.367]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:29:23.367]            </block>
[03:29:23.367]          </sequence>
[03:29:23.367]      </block>
[03:29:23.368]      // end if-block "traceSWO"
[03:29:23.368]    </control>
[03:29:23.368]    <control if="traceTPIU" while="" timeout="0" info="">
[03:29:23.368]      // if-block "traceTPIU"
[03:29:23.368]        // =>  FALSE
[03:29:23.368]      // skip if-block "traceTPIU"
[03:29:23.368]    </control>
[03:29:23.369]  </sequence>
[03:29:23.369]  
[03:32:45.626]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:32:45.626]  
[03:32:45.626]  <debugvars>
[03:32:45.626]    // Pre-defined
[03:32:45.626]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:32:45.627]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:32:45.627]    __dp=0x00000000
[03:32:45.627]    __ap=0x00000000
[03:32:45.627]    __traceout=0x00000001      (SWO Trace)
[03:32:45.627]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:32:45.627]    __FlashAddr=0x00000000
[03:32:45.627]    __FlashLen=0x00000000
[03:32:45.627]    __FlashArg=0x00000000
[03:32:45.628]    __FlashOp=0x00000000
[03:32:45.628]    __Result=0x00000000
[03:32:45.628]    
[03:32:45.628]    // User-defined
[03:32:45.628]    DbgMCU_CR=0x00000007
[03:32:45.628]    DbgMCU_APB1_Fz=0x00000000
[03:32:45.628]    DbgMCU_APB2_Fz=0x00000000
[03:32:45.629]    TraceClk_Pin=0x00040002
[03:32:45.629]    TraceD0_Pin=0x00040003
[03:32:45.629]    TraceD1_Pin=0x00040004
[03:32:45.629]    TraceD2_Pin=0x00040005
[03:32:45.629]    TraceD3_Pin=0x00040006
[03:32:45.629]  </debugvars>
[03:32:45.629]  
[03:32:45.629]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:32:45.630]    <block atomic="false" info="">
[03:32:45.630]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:32:45.630]        // -> [traceSWO <= 0x00000001]
[03:32:45.630]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:32:45.630]        // -> [traceTPIU <= 0x00000000]
[03:32:45.630]    </block>
[03:32:45.630]    <control if="traceSWO" while="" timeout="0" info="">
[03:32:45.630]      // if-block "traceSWO"
[03:32:45.631]        // =>  TRUE
[03:32:45.631]      <block atomic="false" info="">
[03:32:45.631]        Sequence("DisableTraceSWO");
[03:32:45.631]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:32:45.631]            <block atomic="false" info="">
[03:32:45.631]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:32:45.631]                // -> [dbgmcu_val <= 0x00000000]
[03:32:45.631]            </block>
[03:32:45.632]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:32:45.632]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:32:45.632]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:32:45.632]                // -> [dbgmcu_val <= 0x00000007]
[03:32:45.633]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:32:45.633]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:32:45.633]            </block>
[03:32:45.633]          </sequence>
[03:32:45.633]      </block>
[03:32:45.634]      // end if-block "traceSWO"
[03:32:45.634]    </control>
[03:32:45.634]    <control if="traceTPIU" while="" timeout="0" info="">
[03:32:45.634]      // if-block "traceTPIU"
[03:32:45.634]        // =>  FALSE
[03:32:45.635]      // skip if-block "traceTPIU"
[03:32:45.635]    </control>
[03:32:45.635]  </sequence>
[03:32:45.635]  
[03:32:56.971]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:32:56.971]  
[03:32:56.972]  <debugvars>
[03:32:56.973]    // Pre-defined
[03:32:56.973]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:32:56.973]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:32:56.973]    __dp=0x00000000
[03:32:56.973]    __ap=0x00000000
[03:32:56.974]    __traceout=0x00000001      (SWO Trace)
[03:32:56.974]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:32:56.974]    __FlashAddr=0x00000000
[03:32:56.974]    __FlashLen=0x00000000
[03:32:56.974]    __FlashArg=0x00000000
[03:32:56.975]    __FlashOp=0x00000000
[03:32:56.975]    __Result=0x00000000
[03:32:56.975]    
[03:32:56.975]    // User-defined
[03:32:56.975]    DbgMCU_CR=0x00000007
[03:32:56.975]    DbgMCU_APB1_Fz=0x00000000
[03:32:56.975]    DbgMCU_APB2_Fz=0x00000000
[03:32:56.976]    TraceClk_Pin=0x00040002
[03:32:56.976]    TraceD0_Pin=0x00040003
[03:32:56.976]    TraceD1_Pin=0x00040004
[03:32:56.976]    TraceD2_Pin=0x00040005
[03:32:56.976]    TraceD3_Pin=0x00040006
[03:32:56.976]  </debugvars>
[03:32:56.977]  
[03:32:56.977]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:32:56.977]    <block atomic="false" info="">
[03:32:56.977]      Sequence("CheckID");
[03:32:56.977]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:32:56.978]          <block atomic="false" info="">
[03:32:56.978]            __var pidr1 = 0;
[03:32:56.978]              // -> [pidr1 <= 0x00000000]
[03:32:56.978]            __var pidr2 = 0;
[03:32:56.978]              // -> [pidr2 <= 0x00000000]
[03:32:56.978]            __var jep106id = 0;
[03:32:56.979]              // -> [jep106id <= 0x00000000]
[03:32:56.979]            __var ROMTableBase = 0;
[03:32:56.979]              // -> [ROMTableBase <= 0x00000000]
[03:32:56.979]            __ap = 0;      // AHB-AP
[03:32:56.979]              // -> [__ap <= 0x00000000]
[03:32:56.979]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:32:56.980]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:32:56.980]              // -> [ROMTableBase <= 0xE00FD000]
[03:32:56.980]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:32:56.981]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:32:56.981]              // -> [pidr1 <= 0x00000004]
[03:32:56.981]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:32:56.981]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:32:56.982]              // -> [pidr2 <= 0x0000001A]
[03:32:56.982]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:32:56.982]              // -> [jep106id <= 0x00000020]
[03:32:56.982]          </block>
[03:32:56.982]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:32:56.982]            // if-block "jep106id != 0x20"
[03:32:56.982]              // =>  FALSE
[03:32:56.982]            // skip if-block "jep106id != 0x20"
[03:32:56.983]          </control>
[03:32:56.983]        </sequence>
[03:32:56.983]    </block>
[03:32:56.983]  </sequence>
[03:32:56.983]  
[03:32:56.998]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:32:56.998]  
[03:32:56.998]  <debugvars>
[03:32:56.999]    // Pre-defined
[03:32:56.999]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:32:56.999]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:32:56.999]    __dp=0x00000000
[03:32:56.999]    __ap=0x00000000
[03:32:56.999]    __traceout=0x00000001      (SWO Trace)
[03:32:57.000]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:32:57.000]    __FlashAddr=0x00000000
[03:32:57.000]    __FlashLen=0x00000000
[03:32:57.000]    __FlashArg=0x00000000
[03:32:57.000]    __FlashOp=0x00000000
[03:32:57.000]    __Result=0x00000000
[03:32:57.000]    
[03:32:57.000]    // User-defined
[03:32:57.001]    DbgMCU_CR=0x00000007
[03:32:57.001]    DbgMCU_APB1_Fz=0x00000000
[03:32:57.001]    DbgMCU_APB2_Fz=0x00000000
[03:32:57.001]    TraceClk_Pin=0x00040002
[03:32:57.001]    TraceD0_Pin=0x00040003
[03:32:57.001]    TraceD1_Pin=0x00040004
[03:32:57.002]    TraceD2_Pin=0x00040005
[03:32:57.002]    TraceD3_Pin=0x00040006
[03:32:57.002]  </debugvars>
[03:32:57.002]  
[03:32:57.002]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:32:57.002]    <block atomic="false" info="">
[03:32:57.003]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:32:57.003]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:32:57.003]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:32:57.004]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:32:57.004]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:32:57.004]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:32:57.004]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:32:57.004]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:32:57.004]    </block>
[03:32:57.005]  </sequence>
[03:32:57.005]  
[03:33:27.928]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:33:27.928]  
[03:33:27.929]  <debugvars>
[03:33:27.929]    // Pre-defined
[03:33:27.929]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:33:27.929]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:33:27.929]    __dp=0x00000000
[03:33:27.930]    __ap=0x00000000
[03:33:27.930]    __traceout=0x00000001      (SWO Trace)
[03:33:27.930]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:33:27.930]    __FlashAddr=0x00000000
[03:33:27.930]    __FlashLen=0x00000000
[03:33:27.930]    __FlashArg=0x00000000
[03:33:27.931]    __FlashOp=0x00000000
[03:33:27.931]    __Result=0x00000000
[03:33:27.931]    
[03:33:27.931]    // User-defined
[03:33:27.931]    DbgMCU_CR=0x00000007
[03:33:27.932]    DbgMCU_APB1_Fz=0x00000000
[03:33:27.932]    DbgMCU_APB2_Fz=0x00000000
[03:33:27.932]    TraceClk_Pin=0x00040002
[03:33:27.932]    TraceD0_Pin=0x00040003
[03:33:27.932]    TraceD1_Pin=0x00040004
[03:33:27.932]    TraceD2_Pin=0x00040005
[03:33:27.933]    TraceD3_Pin=0x00040006
[03:33:27.933]  </debugvars>
[03:33:27.933]  
[03:33:27.933]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:33:27.933]    <block atomic="false" info="">
[03:33:27.934]      Sequence("CheckID");
[03:33:27.934]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:33:27.934]          <block atomic="false" info="">
[03:33:27.934]            __var pidr1 = 0;
[03:33:27.934]              // -> [pidr1 <= 0x00000000]
[03:33:27.934]            __var pidr2 = 0;
[03:33:27.934]              // -> [pidr2 <= 0x00000000]
[03:33:27.935]            __var jep106id = 0;
[03:33:27.935]              // -> [jep106id <= 0x00000000]
[03:33:27.935]            __var ROMTableBase = 0;
[03:33:27.935]              // -> [ROMTableBase <= 0x00000000]
[03:33:27.935]            __ap = 0;      // AHB-AP
[03:33:27.935]              // -> [__ap <= 0x00000000]
[03:33:27.935]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:33:27.936]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.936]              // -> [ROMTableBase <= 0xE00FD000]
[03:33:27.936]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:33:27.937]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.937]              // -> [pidr1 <= 0x00000004]
[03:33:27.937]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:33:27.938]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.938]              // -> [pidr2 <= 0x0000001A]
[03:33:27.938]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:33:27.938]              // -> [jep106id <= 0x00000020]
[03:33:27.938]          </block>
[03:33:27.938]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:33:27.938]            // if-block "jep106id != 0x20"
[03:33:27.939]              // =>  FALSE
[03:33:27.939]            // skip if-block "jep106id != 0x20"
[03:33:27.939]          </control>
[03:33:27.939]        </sequence>
[03:33:27.939]    </block>
[03:33:27.939]  </sequence>
[03:33:27.940]  
[03:33:27.954]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:33:27.954]  
[03:33:27.954]  <debugvars>
[03:33:27.955]    // Pre-defined
[03:33:27.955]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:33:27.955]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:33:27.955]    __dp=0x00000000
[03:33:27.955]    __ap=0x00000000
[03:33:27.956]    __traceout=0x00000001      (SWO Trace)
[03:33:27.956]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:33:27.956]    __FlashAddr=0x00000000
[03:33:27.956]    __FlashLen=0x00000000
[03:33:27.956]    __FlashArg=0x00000000
[03:33:27.957]    __FlashOp=0x00000000
[03:33:27.957]    __Result=0x00000000
[03:33:27.957]    
[03:33:27.957]    // User-defined
[03:33:27.957]    DbgMCU_CR=0x00000007
[03:33:27.957]    DbgMCU_APB1_Fz=0x00000000
[03:33:27.958]    DbgMCU_APB2_Fz=0x00000000
[03:33:27.958]    TraceClk_Pin=0x00040002
[03:33:27.958]    TraceD0_Pin=0x00040003
[03:33:27.958]    TraceD1_Pin=0x00040004
[03:33:27.958]    TraceD2_Pin=0x00040005
[03:33:27.958]    TraceD3_Pin=0x00040006
[03:33:27.959]  </debugvars>
[03:33:27.959]  
[03:33:27.959]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:33:27.959]    <block atomic="false" info="">
[03:33:27.959]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:33:27.960]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.960]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:33:27.961]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.961]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:33:27.962]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.962]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:33:27.963]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.963]    </block>
[03:33:27.963]  </sequence>
[03:33:27.963]  
[03:33:27.979]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:33:27.979]  
[03:33:27.979]  <debugvars>
[03:33:27.980]    // Pre-defined
[03:33:27.980]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:33:27.980]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:33:27.980]    __dp=0x00000000
[03:33:27.981]    __ap=0x00000000
[03:33:27.981]    __traceout=0x00000001      (SWO Trace)
[03:33:27.981]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:33:27.981]    __FlashAddr=0x00000000
[03:33:27.981]    __FlashLen=0x00000000
[03:33:27.982]    __FlashArg=0x00000000
[03:33:27.982]    __FlashOp=0x00000000
[03:33:27.982]    __Result=0x00000000
[03:33:27.982]    
[03:33:27.982]    // User-defined
[03:33:27.982]    DbgMCU_CR=0x00000007
[03:33:27.983]    DbgMCU_APB1_Fz=0x00000000
[03:33:27.983]    DbgMCU_APB2_Fz=0x00000000
[03:33:27.983]    TraceClk_Pin=0x00040002
[03:33:27.983]    TraceD0_Pin=0x00040003
[03:33:27.984]    TraceD1_Pin=0x00040004
[03:33:27.984]    TraceD2_Pin=0x00040005
[03:33:27.984]    TraceD3_Pin=0x00040006
[03:33:27.984]  </debugvars>
[03:33:27.984]  
[03:33:27.984]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:33:27.985]    <block atomic="false" info="">
[03:33:27.985]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:33:27.985]        // -> [traceSWO <= 0x00000001]
[03:33:27.985]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:33:27.985]        // -> [traceTPIU <= 0x00000000]
[03:33:27.986]    </block>
[03:33:27.986]    <control if="traceSWO" while="" timeout="0" info="">
[03:33:27.986]      // if-block "traceSWO"
[03:33:27.986]        // =>  TRUE
[03:33:27.986]      <block atomic="false" info="">
[03:33:27.987]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:33:27.987]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:33:27.987]            <block atomic="false" info="">
[03:33:27.987]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:33:27.987]                // -> [dbgmcu_val <= 0x00000000]
[03:33:27.988]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:33:27.988]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:33:27.988]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:33:27.988]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.989]                // -> [dbgmcu_val <= 0x00000007]
[03:33:27.989]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:33:27.989]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:33:27.989]              Sequence("ConfigureTraceSWOPin");
[03:33:27.989]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:33:27.989]                  <block atomic="false" info="">
[03:33:27.990]                    __var pin     = 0;
[03:33:27.990]                      // -> [pin <= 0x00000000]
[03:33:27.990]                    __var port    = 0;
[03:33:27.990]                      // -> [port <= 0x00000000]
[03:33:27.990]                    __var portAdr = 0;
[03:33:27.990]                      // -> [portAdr <= 0x00000000]
[03:33:27.991]                    __var pos     = 0;
[03:33:27.991]                      // -> [pos <= 0x00000000]
[03:33:27.991]                    __var SWO_Pin = 0x00010003;          // PB3
[03:33:27.991]                      // -> [SWO_Pin <= 0x00010003]
[03:33:27.991]                  </block>
[03:33:27.991]                  <block atomic="false" info="configure SWO">
[03:33:27.991]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:33:27.992]                      // -> [pin <= 0x00000003]
[03:33:27.992]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:33:27.992]                      // -> [port <= 0x00000001]
[03:33:27.992]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:33:27.992]                      // -> [portAdr <= 0x40020400]
[03:33:27.992]                    pos = pin * 2;
[03:33:27.993]                      // -> [pos <= 0x00000006]
[03:33:27.993]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:33:27.993]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.994]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.994]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:33:27.994]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.995]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.995]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:33:27.995]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.996]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.996]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:33:27.996]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.997]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.997]                  </block>
[03:33:27.997]                  <control if="pin <  8" while="" timeout="0" info="">
[03:33:27.997]                    // if-block "pin <  8"
[03:33:27.997]                      // =>  TRUE
[03:33:27.998]                    <block atomic="false" info="">
[03:33:27.998]                      pos = ((pin    ) & 7) * 4;
[03:33:27.998]                        // -> [pos <= 0x0000000C]
[03:33:27.998]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:33:27.999]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.999]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:27.999]                    </block>
[03:33:27.999]                    // end if-block "pin <  8"
[03:33:28.000]                  </control>
[03:33:28.000]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:33:28.000]                    // if-block "pin >= 8"
[03:33:28.000]                      // =>  FALSE
[03:33:28.000]                    // skip if-block "pin >= 8"
[03:33:28.000]                  </control>
[03:33:28.000]                </sequence>
[03:33:28.000]            </block>
[03:33:28.001]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:33:28.001]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:33:28.001]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.001]            </block>
[03:33:28.001]          </sequence>
[03:33:28.002]      </block>
[03:33:28.002]      // end if-block "traceSWO"
[03:33:28.002]    </control>
[03:33:28.002]    <control if="traceTPIU" while="" timeout="0" info="">
[03:33:28.002]      // if-block "traceTPIU"
[03:33:28.002]        // =>  FALSE
[03:33:28.002]      // skip if-block "traceTPIU"
[03:33:28.002]    </control>
[03:33:28.003]  </sequence>
[03:33:28.003]  
[03:33:28.006]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:33:28.006]  
[03:33:28.007]  <debugvars>
[03:33:28.007]    // Pre-defined
[03:33:28.007]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:33:28.007]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:33:28.007]    __dp=0x00000000
[03:33:28.007]    __ap=0x00000000
[03:33:28.008]    __traceout=0x00000001      (SWO Trace)
[03:33:28.008]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:33:28.008]    __FlashAddr=0x00000000
[03:33:28.008]    __FlashLen=0x00000000
[03:33:28.008]    __FlashArg=0x00000000
[03:33:28.008]    __FlashOp=0x00000000
[03:33:28.009]    __Result=0x00000000
[03:33:28.009]    
[03:33:28.009]    // User-defined
[03:33:28.009]    DbgMCU_CR=0x00000007
[03:33:28.009]    DbgMCU_APB1_Fz=0x00000000
[03:33:28.010]    DbgMCU_APB2_Fz=0x00000000
[03:33:28.010]    TraceClk_Pin=0x00040002
[03:33:28.010]    TraceD0_Pin=0x00040003
[03:33:28.010]    TraceD1_Pin=0x00040004
[03:33:28.010]    TraceD2_Pin=0x00040005
[03:33:28.010]    TraceD3_Pin=0x00040006
[03:33:28.010]  </debugvars>
[03:33:28.010]  
[03:33:28.011]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:33:28.011]    <block atomic="false" info="">
[03:33:28.011]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:33:28.011]        // -> [traceSWO <= 0x00000001]
[03:33:28.011]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:33:28.011]        // -> [traceTPIU <= 0x00000000]
[03:33:28.011]    </block>
[03:33:28.012]    <control if="traceSWO" while="" timeout="0" info="">
[03:33:28.012]      // if-block "traceSWO"
[03:33:28.012]        // =>  TRUE
[03:33:28.012]      <block atomic="false" info="">
[03:33:28.012]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:33:28.012]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:33:28.012]            <block atomic="false" info="">
[03:33:28.013]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:33:28.013]                // -> [dbgmcu_val <= 0x00000000]
[03:33:28.013]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:33:28.013]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:33:28.013]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:33:28.014]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.014]                // -> [dbgmcu_val <= 0x00000007]
[03:33:28.014]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:33:28.014]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:33:28.014]              Sequence("ConfigureTraceSWOPin");
[03:33:28.014]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:33:28.014]                  <block atomic="false" info="">
[03:33:28.014]                    __var pin     = 0;
[03:33:28.015]                      // -> [pin <= 0x00000000]
[03:33:28.015]                    __var port    = 0;
[03:33:28.015]                      // -> [port <= 0x00000000]
[03:33:28.015]                    __var portAdr = 0;
[03:33:28.015]                      // -> [portAdr <= 0x00000000]
[03:33:28.015]                    __var pos     = 0;
[03:33:28.015]                      // -> [pos <= 0x00000000]
[03:33:28.015]                    __var SWO_Pin = 0x00010003;          // PB3
[03:33:28.016]                      // -> [SWO_Pin <= 0x00010003]
[03:33:28.016]                  </block>
[03:33:28.016]                  <block atomic="false" info="configure SWO">
[03:33:28.016]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:33:28.016]                      // -> [pin <= 0x00000003]
[03:33:28.016]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:33:28.016]                      // -> [port <= 0x00000001]
[03:33:28.016]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:33:28.016]                      // -> [portAdr <= 0x40020400]
[03:33:28.017]                    pos = pin * 2;
[03:33:28.017]                      // -> [pos <= 0x00000006]
[03:33:28.017]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:33:28.017]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.018]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.018]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:33:28.018]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.019]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.019]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:33:28.019]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.020]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.020]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:33:28.020]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.021]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.021]                  </block>
[03:33:28.021]                  <control if="pin <  8" while="" timeout="0" info="">
[03:33:28.021]                    // if-block "pin <  8"
[03:33:28.021]                      // =>  TRUE
[03:33:28.021]                    <block atomic="false" info="">
[03:33:28.021]                      pos = ((pin    ) & 7) * 4;
[03:33:28.022]                        // -> [pos <= 0x0000000C]
[03:33:28.022]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:33:28.022]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.022]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.023]                    </block>
[03:33:28.023]                    // end if-block "pin <  8"
[03:33:28.023]                  </control>
[03:33:28.023]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:33:28.023]                    // if-block "pin >= 8"
[03:33:28.023]                      // =>  FALSE
[03:33:28.023]                    // skip if-block "pin >= 8"
[03:33:28.023]                  </control>
[03:33:28.024]                </sequence>
[03:33:28.024]            </block>
[03:33:28.024]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:33:28.024]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:33:28.024]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.025]            </block>
[03:33:28.025]          </sequence>
[03:33:28.025]      </block>
[03:33:28.025]      // end if-block "traceSWO"
[03:33:28.025]    </control>
[03:33:28.025]    <control if="traceTPIU" while="" timeout="0" info="">
[03:33:28.025]      // if-block "traceTPIU"
[03:33:28.025]        // =>  FALSE
[03:33:28.026]      // skip if-block "traceTPIU"
[03:33:28.026]    </control>
[03:33:28.026]  </sequence>
[03:33:28.026]  
[03:33:28.240]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:33:28.240]  
[03:33:28.240]  <debugvars>
[03:33:28.240]    // Pre-defined
[03:33:28.241]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:33:28.241]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:33:28.241]    __dp=0x00000000
[03:33:28.241]    __ap=0x00000000
[03:33:28.241]    __traceout=0x00000001      (SWO Trace)
[03:33:28.242]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:33:28.242]    __FlashAddr=0x00000000
[03:33:28.242]    __FlashLen=0x00000000
[03:33:28.242]    __FlashArg=0x00000000
[03:33:28.242]    __FlashOp=0x00000000
[03:33:28.243]    __Result=0x00000000
[03:33:28.243]    
[03:33:28.243]    // User-defined
[03:33:28.243]    DbgMCU_CR=0x00000007
[03:33:28.243]    DbgMCU_APB1_Fz=0x00000000
[03:33:28.243]    DbgMCU_APB2_Fz=0x00000000
[03:33:28.244]    TraceClk_Pin=0x00040002
[03:33:28.244]    TraceD0_Pin=0x00040003
[03:33:28.244]    TraceD1_Pin=0x00040004
[03:33:28.244]    TraceD2_Pin=0x00040005
[03:33:28.244]    TraceD3_Pin=0x00040006
[03:33:28.244]  </debugvars>
[03:33:28.245]  
[03:33:28.245]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:33:28.245]    <block atomic="false" info="">
[03:33:28.245]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:33:28.245]        // -> [traceSWO <= 0x00000001]
[03:33:28.245]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:33:28.246]        // -> [traceTPIU <= 0x00000000]
[03:33:28.246]    </block>
[03:33:28.247]    <control if="traceSWO" while="" timeout="0" info="">
[03:33:28.247]      // if-block "traceSWO"
[03:33:28.247]        // =>  TRUE
[03:33:28.247]      <block atomic="false" info="">
[03:33:28.247]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:33:28.247]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:33:28.248]            <block atomic="false" info="">
[03:33:28.248]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:33:28.248]                // -> [dbgmcu_val <= 0x00000000]
[03:33:28.248]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:33:28.248]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:33:28.248]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:33:28.249]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.249]                // -> [dbgmcu_val <= 0x00000007]
[03:33:28.249]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:33:28.249]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:33:28.249]              Sequence("ConfigureTraceSWOPin");
[03:33:28.250]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:33:28.250]                  <block atomic="false" info="">
[03:33:28.250]                    __var pin     = 0;
[03:33:28.250]                      // -> [pin <= 0x00000000]
[03:33:28.250]                    __var port    = 0;
[03:33:28.251]                      // -> [port <= 0x00000000]
[03:33:28.251]                    __var portAdr = 0;
[03:33:28.251]                      // -> [portAdr <= 0x00000000]
[03:33:28.251]                    __var pos     = 0;
[03:33:28.251]                      // -> [pos <= 0x00000000]
[03:33:28.251]                    __var SWO_Pin = 0x00010003;          // PB3
[03:33:28.251]                      // -> [SWO_Pin <= 0x00010003]
[03:33:28.252]                  </block>
[03:33:28.252]                  <block atomic="false" info="configure SWO">
[03:33:28.252]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:33:28.252]                      // -> [pin <= 0x00000003]
[03:33:28.252]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:33:28.252]                      // -> [port <= 0x00000001]
[03:33:28.253]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:33:28.253]                      // -> [portAdr <= 0x40020400]
[03:33:28.253]                    pos = pin * 2;
[03:33:28.253]                      // -> [pos <= 0x00000006]
[03:33:28.253]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:33:28.254]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.254]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.254]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:33:28.255]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.255]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.255]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:33:28.256]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.256]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.256]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:33:28.257]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.257]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.257]                  </block>
[03:33:28.257]                  <control if="pin <  8" while="" timeout="0" info="">
[03:33:28.258]                    // if-block "pin <  8"
[03:33:28.258]                      // =>  TRUE
[03:33:28.258]                    <block atomic="false" info="">
[03:33:28.258]                      pos = ((pin    ) & 7) * 4;
[03:33:28.258]                        // -> [pos <= 0x0000000C]
[03:33:28.258]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:33:28.259]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.259]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.259]                    </block>
[03:33:28.259]                    // end if-block "pin <  8"
[03:33:28.259]                  </control>
[03:33:28.260]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:33:28.260]                    // if-block "pin >= 8"
[03:33:28.260]                      // =>  FALSE
[03:33:28.260]                    // skip if-block "pin >= 8"
[03:33:28.260]                  </control>
[03:33:28.260]                </sequence>
[03:33:28.260]            </block>
[03:33:28.260]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:33:28.260]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:33:28.261]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:28.261]            </block>
[03:33:28.261]          </sequence>
[03:33:28.261]      </block>
[03:33:28.261]      // end if-block "traceSWO"
[03:33:28.262]    </control>
[03:33:28.262]    <control if="traceTPIU" while="" timeout="0" info="">
[03:33:28.262]      // if-block "traceTPIU"
[03:33:28.262]        // =>  FALSE
[03:33:28.262]      // skip if-block "traceTPIU"
[03:33:28.262]    </control>
[03:33:28.262]  </sequence>
[03:33:28.262]  
[03:33:39.740]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:33:39.740]  
[03:33:39.741]  <debugvars>
[03:33:39.741]    // Pre-defined
[03:33:39.741]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:33:39.741]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:33:39.741]    __dp=0x00000000
[03:33:39.742]    __ap=0x00000000
[03:33:39.742]    __traceout=0x00000001      (SWO Trace)
[03:33:39.742]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:33:39.742]    __FlashAddr=0x00000000
[03:33:39.742]    __FlashLen=0x00000000
[03:33:39.742]    __FlashArg=0x00000000
[03:33:39.743]    __FlashOp=0x00000000
[03:33:39.743]    __Result=0x00000000
[03:33:39.743]    
[03:33:39.743]    // User-defined
[03:33:39.743]    DbgMCU_CR=0x00000007
[03:33:39.743]    DbgMCU_APB1_Fz=0x00000000
[03:33:39.744]    DbgMCU_APB2_Fz=0x00000000
[03:33:39.744]    TraceClk_Pin=0x00040002
[03:33:39.744]    TraceD0_Pin=0x00040003
[03:33:39.744]    TraceD1_Pin=0x00040004
[03:33:39.744]    TraceD2_Pin=0x00040005
[03:33:39.744]    TraceD3_Pin=0x00040006
[03:33:39.745]  </debugvars>
[03:33:39.745]  
[03:33:39.745]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:33:39.745]    <block atomic="false" info="">
[03:33:39.745]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:33:39.745]        // -> [traceSWO <= 0x00000001]
[03:33:39.746]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:33:39.746]        // -> [traceTPIU <= 0x00000000]
[03:33:39.746]    </block>
[03:33:39.746]    <control if="traceSWO" while="" timeout="0" info="">
[03:33:39.746]      // if-block "traceSWO"
[03:33:39.746]        // =>  TRUE
[03:33:39.746]      <block atomic="false" info="">
[03:33:39.747]        Sequence("DisableTraceSWO");
[03:33:39.747]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:33:39.747]            <block atomic="false" info="">
[03:33:39.747]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:33:39.747]                // -> [dbgmcu_val <= 0x00000000]
[03:33:39.747]            </block>
[03:33:39.747]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:33:39.747]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:33:39.748]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:33:39.748]                // -> [dbgmcu_val <= 0x00000007]
[03:33:39.748]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:33:39.749]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:33:39.749]            </block>
[03:33:39.749]          </sequence>
[03:33:39.749]      </block>
[03:33:39.749]      // end if-block "traceSWO"
[03:33:39.749]    </control>
[03:33:39.749]    <control if="traceTPIU" while="" timeout="0" info="">
[03:33:39.750]      // if-block "traceTPIU"
[03:33:39.750]        // =>  FALSE
[03:33:39.750]      // skip if-block "traceTPIU"
[03:33:39.750]    </control>
[03:33:39.750]  </sequence>
[03:33:39.750]  
[03:34:25.310]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:34:25.310]  
[03:34:25.311]  <debugvars>
[03:34:25.311]    // Pre-defined
[03:34:25.311]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:34:25.311]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:34:25.311]    __dp=0x00000000
[03:34:25.311]    __ap=0x00000000
[03:34:25.311]    __traceout=0x00000001      (SWO Trace)
[03:34:25.312]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:34:25.312]    __FlashAddr=0x00000000
[03:34:25.312]    __FlashLen=0x00000000
[03:34:25.312]    __FlashArg=0x00000000
[03:34:25.312]    __FlashOp=0x00000000
[03:34:25.312]    __Result=0x00000000
[03:34:25.312]    
[03:34:25.312]    // User-defined
[03:34:25.312]    DbgMCU_CR=0x00000007
[03:34:25.313]    DbgMCU_APB1_Fz=0x00000000
[03:34:25.313]    DbgMCU_APB2_Fz=0x00000000
[03:34:25.313]    TraceClk_Pin=0x00040002
[03:34:25.313]    TraceD0_Pin=0x00040003
[03:34:25.313]    TraceD1_Pin=0x00040004
[03:34:25.313]    TraceD2_Pin=0x00040005
[03:34:25.313]    TraceD3_Pin=0x00040006
[03:34:25.313]  </debugvars>
[03:34:25.314]  
[03:34:25.314]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:34:25.314]    <block atomic="false" info="">
[03:34:25.314]      Sequence("CheckID");
[03:34:25.314]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:34:25.314]          <block atomic="false" info="">
[03:34:25.314]            __var pidr1 = 0;
[03:34:25.314]              // -> [pidr1 <= 0x00000000]
[03:34:25.315]            __var pidr2 = 0;
[03:34:25.315]              // -> [pidr2 <= 0x00000000]
[03:34:25.315]            __var jep106id = 0;
[03:34:25.315]              // -> [jep106id <= 0x00000000]
[03:34:25.315]            __var ROMTableBase = 0;
[03:34:25.315]              // -> [ROMTableBase <= 0x00000000]
[03:34:25.315]            __ap = 0;      // AHB-AP
[03:34:25.315]              // -> [__ap <= 0x00000000]
[03:34:25.316]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:34:25.316]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:34:25.316]              // -> [ROMTableBase <= 0xE00FD000]
[03:34:25.316]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:34:25.317]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:34:25.317]              // -> [pidr1 <= 0x00000004]
[03:34:25.317]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:34:25.317]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:34:25.318]              // -> [pidr2 <= 0x0000001A]
[03:34:25.318]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:34:25.318]              // -> [jep106id <= 0x00000020]
[03:34:25.318]          </block>
[03:34:25.318]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:34:25.318]            // if-block "jep106id != 0x20"
[03:34:25.318]              // =>  FALSE
[03:34:25.318]            // skip if-block "jep106id != 0x20"
[03:34:25.318]          </control>
[03:34:25.319]        </sequence>
[03:34:25.319]    </block>
[03:34:25.319]  </sequence>
[03:34:25.319]  
[03:34:25.334]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:34:25.334]  
[03:34:25.334]  <debugvars>
[03:34:25.334]    // Pre-defined
[03:34:25.334]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:34:25.334]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:34:25.334]    __dp=0x00000000
[03:34:25.334]    __ap=0x00000000
[03:34:25.334]    __traceout=0x00000001      (SWO Trace)
[03:34:25.335]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:34:25.335]    __FlashAddr=0x00000000
[03:34:25.335]    __FlashLen=0x00000000
[03:34:25.335]    __FlashArg=0x00000000
[03:34:25.335]    __FlashOp=0x00000000
[03:34:25.335]    __Result=0x00000000
[03:34:25.335]    
[03:34:25.335]    // User-defined
[03:34:25.335]    DbgMCU_CR=0x00000007
[03:34:25.336]    DbgMCU_APB1_Fz=0x00000000
[03:34:25.336]    DbgMCU_APB2_Fz=0x00000000
[03:34:25.336]    TraceClk_Pin=0x00040002
[03:34:25.336]    TraceD0_Pin=0x00040003
[03:34:25.336]    TraceD1_Pin=0x00040004
[03:34:25.336]    TraceD2_Pin=0x00040005
[03:34:25.336]    TraceD3_Pin=0x00040006
[03:34:25.336]  </debugvars>
[03:34:25.337]  
[03:34:25.337]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:34:25.337]    <block atomic="false" info="">
[03:34:25.337]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:34:25.337]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:25.338]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:34:25.338]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:25.338]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:34:25.339]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:25.339]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:34:25.339]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:25.340]    </block>
[03:34:25.340]  </sequence>
[03:34:25.340]  
[03:34:56.436]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:34:56.436]  
[03:34:56.437]  <debugvars>
[03:34:56.437]    // Pre-defined
[03:34:56.437]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:34:56.437]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:34:56.437]    __dp=0x00000000
[03:34:56.438]    __ap=0x00000000
[03:34:56.438]    __traceout=0x00000001      (SWO Trace)
[03:34:56.438]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:34:56.438]    __FlashAddr=0x00000000
[03:34:56.438]    __FlashLen=0x00000000
[03:34:56.439]    __FlashArg=0x00000000
[03:34:56.439]    __FlashOp=0x00000000
[03:34:56.439]    __Result=0x00000000
[03:34:56.439]    
[03:34:56.439]    // User-defined
[03:34:56.439]    DbgMCU_CR=0x00000007
[03:34:56.439]    DbgMCU_APB1_Fz=0x00000000
[03:34:56.440]    DbgMCU_APB2_Fz=0x00000000
[03:34:56.440]    TraceClk_Pin=0x00040002
[03:34:56.440]    TraceD0_Pin=0x00040003
[03:34:56.440]    TraceD1_Pin=0x00040004
[03:34:56.440]    TraceD2_Pin=0x00040005
[03:34:56.440]    TraceD3_Pin=0x00040006
[03:34:56.441]  </debugvars>
[03:34:56.441]  
[03:34:56.441]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:34:56.441]    <block atomic="false" info="">
[03:34:56.441]      Sequence("CheckID");
[03:34:56.442]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:34:56.442]          <block atomic="false" info="">
[03:34:56.442]            __var pidr1 = 0;
[03:34:56.442]              // -> [pidr1 <= 0x00000000]
[03:34:56.442]            __var pidr2 = 0;
[03:34:56.442]              // -> [pidr2 <= 0x00000000]
[03:34:56.442]            __var jep106id = 0;
[03:34:56.443]              // -> [jep106id <= 0x00000000]
[03:34:56.443]            __var ROMTableBase = 0;
[03:34:56.443]              // -> [ROMTableBase <= 0x00000000]
[03:34:56.443]            __ap = 0;      // AHB-AP
[03:34:56.443]              // -> [__ap <= 0x00000000]
[03:34:56.443]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:34:56.444]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.444]              // -> [ROMTableBase <= 0xE00FD000]
[03:34:56.444]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:34:56.444]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.444]              // -> [pidr1 <= 0x00000004]
[03:34:56.445]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:34:56.445]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.445]              // -> [pidr2 <= 0x0000001A]
[03:34:56.445]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:34:56.445]              // -> [jep106id <= 0x00000020]
[03:34:56.445]          </block>
[03:34:56.446]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:34:56.446]            // if-block "jep106id != 0x20"
[03:34:56.446]              // =>  FALSE
[03:34:56.446]            // skip if-block "jep106id != 0x20"
[03:34:56.446]          </control>
[03:34:56.446]        </sequence>
[03:34:56.446]    </block>
[03:34:56.447]  </sequence>
[03:34:56.447]  
[03:34:56.462]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:34:56.462]  
[03:34:56.462]  <debugvars>
[03:34:56.462]    // Pre-defined
[03:34:56.462]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:34:56.462]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:34:56.463]    __dp=0x00000000
[03:34:56.463]    __ap=0x00000000
[03:34:56.463]    __traceout=0x00000001      (SWO Trace)
[03:34:56.463]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:34:56.463]    __FlashAddr=0x00000000
[03:34:56.464]    __FlashLen=0x00000000
[03:34:56.464]    __FlashArg=0x00000000
[03:34:56.464]    __FlashOp=0x00000000
[03:34:56.464]    __Result=0x00000000
[03:34:56.464]    
[03:34:56.464]    // User-defined
[03:34:56.465]    DbgMCU_CR=0x00000007
[03:34:56.465]    DbgMCU_APB1_Fz=0x00000000
[03:34:56.465]    DbgMCU_APB2_Fz=0x00000000
[03:34:56.465]    TraceClk_Pin=0x00040002
[03:34:56.465]    TraceD0_Pin=0x00040003
[03:34:56.465]    TraceD1_Pin=0x00040004
[03:34:56.466]    TraceD2_Pin=0x00040005
[03:34:56.466]    TraceD3_Pin=0x00040006
[03:34:56.466]  </debugvars>
[03:34:56.466]  
[03:34:56.466]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:34:56.467]    <block atomic="false" info="">
[03:34:56.467]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:34:56.467]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.468]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:34:56.468]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.468]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:34:56.469]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.469]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:34:56.470]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.470]    </block>
[03:34:56.470]  </sequence>
[03:34:56.470]  
[03:34:56.488]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:34:56.488]  
[03:34:56.488]  <debugvars>
[03:34:56.488]    // Pre-defined
[03:34:56.488]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:34:56.488]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:34:56.489]    __dp=0x00000000
[03:34:56.489]    __ap=0x00000000
[03:34:56.489]    __traceout=0x00000001      (SWO Trace)
[03:34:56.489]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:34:56.489]    __FlashAddr=0x00000000
[03:34:56.490]    __FlashLen=0x00000000
[03:34:56.490]    __FlashArg=0x00000000
[03:34:56.490]    __FlashOp=0x00000000
[03:34:56.490]    __Result=0x00000000
[03:34:56.490]    
[03:34:56.490]    // User-defined
[03:34:56.491]    DbgMCU_CR=0x00000007
[03:34:56.491]    DbgMCU_APB1_Fz=0x00000000
[03:34:56.491]    DbgMCU_APB2_Fz=0x00000000
[03:34:56.491]    TraceClk_Pin=0x00040002
[03:34:56.491]    TraceD0_Pin=0x00040003
[03:34:56.491]    TraceD1_Pin=0x00040004
[03:34:56.492]    TraceD2_Pin=0x00040005
[03:34:56.492]    TraceD3_Pin=0x00040006
[03:34:56.492]  </debugvars>
[03:34:56.492]  
[03:34:56.492]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:34:56.492]    <block atomic="false" info="">
[03:34:56.493]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:34:56.493]        // -> [traceSWO <= 0x00000001]
[03:34:56.493]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:34:56.493]        // -> [traceTPIU <= 0x00000000]
[03:34:56.493]    </block>
[03:34:56.493]    <control if="traceSWO" while="" timeout="0" info="">
[03:34:56.494]      // if-block "traceSWO"
[03:34:56.494]        // =>  TRUE
[03:34:56.494]      <block atomic="false" info="">
[03:34:56.494]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:34:56.494]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:34:56.494]            <block atomic="false" info="">
[03:34:56.495]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:34:56.495]                // -> [dbgmcu_val <= 0x00000000]
[03:34:56.495]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:34:56.495]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:34:56.495]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:34:56.496]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.496]                // -> [dbgmcu_val <= 0x00000007]
[03:34:56.496]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:34:56.496]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:34:56.496]              Sequence("ConfigureTraceSWOPin");
[03:34:56.496]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:34:56.497]                  <block atomic="false" info="">
[03:34:56.497]                    __var pin     = 0;
[03:34:56.497]                      // -> [pin <= 0x00000000]
[03:34:56.497]                    __var port    = 0;
[03:34:56.497]                      // -> [port <= 0x00000000]
[03:34:56.497]                    __var portAdr = 0;
[03:34:56.497]                      // -> [portAdr <= 0x00000000]
[03:34:56.498]                    __var pos     = 0;
[03:34:56.498]                      // -> [pos <= 0x00000000]
[03:34:56.498]                    __var SWO_Pin = 0x00010003;          // PB3
[03:34:56.498]                      // -> [SWO_Pin <= 0x00010003]
[03:34:56.498]                  </block>
[03:34:56.498]                  <block atomic="false" info="configure SWO">
[03:34:56.498]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:34:56.498]                      // -> [pin <= 0x00000003]
[03:34:56.499]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:34:56.499]                      // -> [port <= 0x00000001]
[03:34:56.499]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:34:56.499]                      // -> [portAdr <= 0x40020400]
[03:34:56.499]                    pos = pin * 2;
[03:34:56.499]                      // -> [pos <= 0x00000006]
[03:34:56.499]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:34:56.500]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.500]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.500]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:34:56.501]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.501]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.501]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:34:56.502]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.502]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.502]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:34:56.502]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.503]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.503]                  </block>
[03:34:56.503]                  <control if="pin <  8" while="" timeout="0" info="">
[03:34:56.503]                    // if-block "pin <  8"
[03:34:56.503]                      // =>  TRUE
[03:34:56.504]                    <block atomic="false" info="">
[03:34:56.504]                      pos = ((pin    ) & 7) * 4;
[03:34:56.504]                        // -> [pos <= 0x0000000C]
[03:34:56.504]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:34:56.504]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.505]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.505]                    </block>
[03:34:56.505]                    // end if-block "pin <  8"
[03:34:56.505]                  </control>
[03:34:56.505]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:34:56.505]                    // if-block "pin >= 8"
[03:34:56.505]                      // =>  FALSE
[03:34:56.506]                    // skip if-block "pin >= 8"
[03:34:56.506]                  </control>
[03:34:56.506]                </sequence>
[03:34:56.506]            </block>
[03:34:56.506]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:34:56.506]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:34:56.507]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.507]            </block>
[03:34:56.507]          </sequence>
[03:34:56.507]      </block>
[03:34:56.507]      // end if-block "traceSWO"
[03:34:56.507]    </control>
[03:34:56.507]    <control if="traceTPIU" while="" timeout="0" info="">
[03:34:56.507]      // if-block "traceTPIU"
[03:34:56.508]        // =>  FALSE
[03:34:56.508]      // skip if-block "traceTPIU"
[03:34:56.508]    </control>
[03:34:56.508]  </sequence>
[03:34:56.508]  
[03:34:56.512]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:34:56.512]  
[03:34:56.512]  <debugvars>
[03:34:56.512]    // Pre-defined
[03:34:56.512]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:34:56.512]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:34:56.513]    __dp=0x00000000
[03:34:56.513]    __ap=0x00000000
[03:34:56.513]    __traceout=0x00000001      (SWO Trace)
[03:34:56.513]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:34:56.513]    __FlashAddr=0x00000000
[03:34:56.514]    __FlashLen=0x00000000
[03:34:56.514]    __FlashArg=0x00000000
[03:34:56.514]    __FlashOp=0x00000000
[03:34:56.514]    __Result=0x00000000
[03:34:56.514]    
[03:34:56.514]    // User-defined
[03:34:56.514]    DbgMCU_CR=0x00000007
[03:34:56.515]    DbgMCU_APB1_Fz=0x00000000
[03:34:56.515]    DbgMCU_APB2_Fz=0x00000000
[03:34:56.515]    TraceClk_Pin=0x00040002
[03:34:56.515]    TraceD0_Pin=0x00040003
[03:34:56.515]    TraceD1_Pin=0x00040004
[03:34:56.516]    TraceD2_Pin=0x00040005
[03:34:56.516]    TraceD3_Pin=0x00040006
[03:34:56.516]  </debugvars>
[03:34:56.516]  
[03:34:56.516]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:34:56.516]    <block atomic="false" info="">
[03:34:56.516]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:34:56.517]        // -> [traceSWO <= 0x00000001]
[03:34:56.517]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:34:56.517]        // -> [traceTPIU <= 0x00000000]
[03:34:56.517]    </block>
[03:34:56.517]    <control if="traceSWO" while="" timeout="0" info="">
[03:34:56.517]      // if-block "traceSWO"
[03:34:56.517]        // =>  TRUE
[03:34:56.518]      <block atomic="false" info="">
[03:34:56.518]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:34:56.518]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:34:56.518]            <block atomic="false" info="">
[03:34:56.518]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:34:56.518]                // -> [dbgmcu_val <= 0x00000000]
[03:34:56.518]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:34:56.518]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:34:56.519]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:34:56.519]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.519]                // -> [dbgmcu_val <= 0x00000007]
[03:34:56.519]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:34:56.519]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:34:56.519]              Sequence("ConfigureTraceSWOPin");
[03:34:56.520]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:34:56.520]                  <block atomic="false" info="">
[03:34:56.520]                    __var pin     = 0;
[03:34:56.520]                      // -> [pin <= 0x00000000]
[03:34:56.520]                    __var port    = 0;
[03:34:56.520]                      // -> [port <= 0x00000000]
[03:34:56.520]                    __var portAdr = 0;
[03:34:56.520]                      // -> [portAdr <= 0x00000000]
[03:34:56.520]                    __var pos     = 0;
[03:34:56.521]                      // -> [pos <= 0x00000000]
[03:34:56.521]                    __var SWO_Pin = 0x00010003;          // PB3
[03:34:56.521]                      // -> [SWO_Pin <= 0x00010003]
[03:34:56.521]                  </block>
[03:34:56.521]                  <block atomic="false" info="configure SWO">
[03:34:56.521]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:34:56.521]                      // -> [pin <= 0x00000003]
[03:34:56.521]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:34:56.521]                      // -> [port <= 0x00000001]
[03:34:56.522]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:34:56.522]                      // -> [portAdr <= 0x40020400]
[03:34:56.522]                    pos = pin * 2;
[03:34:56.522]                      // -> [pos <= 0x00000006]
[03:34:56.522]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:34:56.522]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.523]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.523]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:34:56.523]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.524]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.524]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:34:56.524]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.525]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.525]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:34:56.525]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.526]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.526]                  </block>
[03:34:56.526]                  <control if="pin <  8" while="" timeout="0" info="">
[03:34:56.526]                    // if-block "pin <  8"
[03:34:56.526]                      // =>  TRUE
[03:34:56.526]                    <block atomic="false" info="">
[03:34:56.526]                      pos = ((pin    ) & 7) * 4;
[03:34:56.527]                        // -> [pos <= 0x0000000C]
[03:34:56.527]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:34:56.527]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.527]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.528]                    </block>
[03:34:56.528]                    // end if-block "pin <  8"
[03:34:56.528]                  </control>
[03:34:56.528]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:34:56.528]                    // if-block "pin >= 8"
[03:34:56.528]                      // =>  FALSE
[03:34:56.528]                    // skip if-block "pin >= 8"
[03:34:56.528]                  </control>
[03:34:56.529]                </sequence>
[03:34:56.529]            </block>
[03:34:56.529]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:34:56.529]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:34:56.529]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.529]            </block>
[03:34:56.529]          </sequence>
[03:34:56.530]      </block>
[03:34:56.530]      // end if-block "traceSWO"
[03:34:56.530]    </control>
[03:34:56.530]    <control if="traceTPIU" while="" timeout="0" info="">
[03:34:56.530]      // if-block "traceTPIU"
[03:34:56.530]        // =>  FALSE
[03:34:56.530]      // skip if-block "traceTPIU"
[03:34:56.530]    </control>
[03:34:56.530]  </sequence>
[03:34:56.531]  
[03:34:56.741]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:34:56.741]  
[03:34:56.741]  <debugvars>
[03:34:56.741]    // Pre-defined
[03:34:56.742]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:34:56.742]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:34:56.742]    __dp=0x00000000
[03:34:56.742]    __ap=0x00000000
[03:34:56.742]    __traceout=0x00000001      (SWO Trace)
[03:34:56.743]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:34:56.743]    __FlashAddr=0x00000000
[03:34:56.743]    __FlashLen=0x00000000
[03:34:56.743]    __FlashArg=0x00000000
[03:34:56.743]    __FlashOp=0x00000000
[03:34:56.744]    __Result=0x00000000
[03:34:56.744]    
[03:34:56.744]    // User-defined
[03:34:56.744]    DbgMCU_CR=0x00000007
[03:34:56.744]    DbgMCU_APB1_Fz=0x00000000
[03:34:56.744]    DbgMCU_APB2_Fz=0x00000000
[03:34:56.745]    TraceClk_Pin=0x00040002
[03:34:56.745]    TraceD0_Pin=0x00040003
[03:34:56.745]    TraceD1_Pin=0x00040004
[03:34:56.745]    TraceD2_Pin=0x00040005
[03:34:56.745]    TraceD3_Pin=0x00040006
[03:34:56.745]  </debugvars>
[03:34:56.746]  
[03:34:56.746]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:34:56.746]    <block atomic="false" info="">
[03:34:56.746]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:34:56.746]        // -> [traceSWO <= 0x00000001]
[03:34:56.747]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:34:56.747]        // -> [traceTPIU <= 0x00000000]
[03:34:56.747]    </block>
[03:34:56.747]    <control if="traceSWO" while="" timeout="0" info="">
[03:34:56.747]      // if-block "traceSWO"
[03:34:56.747]        // =>  TRUE
[03:34:56.748]      <block atomic="false" info="">
[03:34:56.748]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:34:56.748]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:34:56.748]            <block atomic="false" info="">
[03:34:56.748]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:34:56.748]                // -> [dbgmcu_val <= 0x00000000]
[03:34:56.749]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:34:56.749]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:34:56.749]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:34:56.749]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.750]                // -> [dbgmcu_val <= 0x00000007]
[03:34:56.750]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:34:56.750]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:34:56.750]              Sequence("ConfigureTraceSWOPin");
[03:34:56.750]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:34:56.750]                  <block atomic="false" info="">
[03:34:56.751]                    __var pin     = 0;
[03:34:56.751]                      // -> [pin <= 0x00000000]
[03:34:56.751]                    __var port    = 0;
[03:34:56.751]                      // -> [port <= 0x00000000]
[03:34:56.751]                    __var portAdr = 0;
[03:34:56.751]                      // -> [portAdr <= 0x00000000]
[03:34:56.752]                    __var pos     = 0;
[03:34:56.752]                      // -> [pos <= 0x00000000]
[03:34:56.752]                    __var SWO_Pin = 0x00010003;          // PB3
[03:34:56.752]                      // -> [SWO_Pin <= 0x00010003]
[03:34:56.752]                  </block>
[03:34:56.752]                  <block atomic="false" info="configure SWO">
[03:34:56.752]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:34:56.753]                      // -> [pin <= 0x00000003]
[03:34:56.753]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:34:56.753]                      // -> [port <= 0x00000001]
[03:34:56.753]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:34:56.753]                      // -> [portAdr <= 0x40020400]
[03:34:56.753]                    pos = pin * 2;
[03:34:56.753]                      // -> [pos <= 0x00000006]
[03:34:56.753]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:34:56.754]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.754]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.755]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:34:56.755]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.755]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.755]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:34:56.756]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.756]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.756]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:34:56.757]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.757]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.757]                  </block>
[03:34:56.758]                  <control if="pin <  8" while="" timeout="0" info="">
[03:34:56.758]                    // if-block "pin <  8"
[03:34:56.758]                      // =>  TRUE
[03:34:56.758]                    <block atomic="false" info="">
[03:34:56.758]                      pos = ((pin    ) & 7) * 4;
[03:34:56.758]                        // -> [pos <= 0x0000000C]
[03:34:56.758]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:34:56.759]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.759]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.759]                    </block>
[03:34:56.760]                    // end if-block "pin <  8"
[03:34:56.760]                  </control>
[03:34:56.760]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:34:56.760]                    // if-block "pin >= 8"
[03:34:56.760]                      // =>  FALSE
[03:34:56.760]                    // skip if-block "pin >= 8"
[03:34:56.760]                  </control>
[03:34:56.761]                </sequence>
[03:34:56.761]            </block>
[03:34:56.761]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:34:56.761]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:34:56.761]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:34:56.761]            </block>
[03:34:56.762]          </sequence>
[03:34:56.762]      </block>
[03:34:56.762]      // end if-block "traceSWO"
[03:34:56.762]    </control>
[03:34:56.762]    <control if="traceTPIU" while="" timeout="0" info="">
[03:34:56.762]      // if-block "traceTPIU"
[03:34:56.762]        // =>  FALSE
[03:34:56.762]      // skip if-block "traceTPIU"
[03:34:56.762]    </control>
[03:34:56.763]  </sequence>
[03:34:56.763]  
[03:36:51.951]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:36:51.951]  
[03:36:51.952]  <debugvars>
[03:36:51.952]    // Pre-defined
[03:36:51.953]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:36:51.953]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:36:51.954]    __dp=0x00000000
[03:36:51.954]    __ap=0x00000000
[03:36:51.954]    __traceout=0x00000001      (SWO Trace)
[03:36:51.955]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:36:51.956]    __FlashAddr=0x00000000
[03:36:51.956]    __FlashLen=0x00000000
[03:36:51.957]    __FlashArg=0x00000000
[03:36:51.957]    __FlashOp=0x00000000
[03:36:51.958]    __Result=0x00000000
[03:36:51.958]    
[03:36:51.958]    // User-defined
[03:36:51.959]    DbgMCU_CR=0x00000007
[03:36:51.959]    DbgMCU_APB1_Fz=0x00000000
[03:36:51.960]    DbgMCU_APB2_Fz=0x00000000
[03:36:51.961]    TraceClk_Pin=0x00040002
[03:36:51.961]    TraceD0_Pin=0x00040003
[03:36:51.962]    TraceD1_Pin=0x00040004
[03:36:51.962]    TraceD2_Pin=0x00040005
[03:36:51.963]    TraceD3_Pin=0x00040006
[03:36:51.963]  </debugvars>
[03:36:51.964]  
[03:36:51.964]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:36:51.965]    <block atomic="false" info="">
[03:36:51.965]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:36:51.965]        // -> [traceSWO <= 0x00000001]
[03:36:51.966]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:36:51.966]        // -> [traceTPIU <= 0x00000000]
[03:36:51.967]    </block>
[03:36:51.967]    <control if="traceSWO" while="" timeout="0" info="">
[03:36:51.967]      // if-block "traceSWO"
[03:36:51.968]        // =>  TRUE
[03:36:51.968]      <block atomic="false" info="">
[03:36:51.968]        Sequence("DisableTraceSWO");
[03:36:51.968]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:36:51.969]            <block atomic="false" info="">
[03:36:51.969]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:36:51.969]                // -> [dbgmcu_val <= 0x00000000]
[03:36:51.969]            </block>
[03:36:51.969]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:36:51.970]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:36:51.970]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:36:51.970]                // -> [dbgmcu_val <= 0x00000007]
[03:36:51.971]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:36:51.971]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:36:51.971]            </block>
[03:36:51.972]          </sequence>
[03:36:51.972]      </block>
[03:36:51.972]      // end if-block "traceSWO"
[03:36:51.972]    </control>
[03:36:51.972]    <control if="traceTPIU" while="" timeout="0" info="">
[03:36:51.973]      // if-block "traceTPIU"
[03:36:51.973]        // =>  FALSE
[03:36:51.973]      // skip if-block "traceTPIU"
[03:36:51.973]    </control>
[03:36:51.973]  </sequence>
[03:36:51.973]  
[03:38:08.335]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:38:08.335]  
[03:38:08.335]  <debugvars>
[03:38:08.335]    // Pre-defined
[03:38:08.335]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:38:08.335]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:38:08.336]    __dp=0x00000000
[03:38:08.336]    __ap=0x00000000
[03:38:08.336]    __traceout=0x00000001      (SWO Trace)
[03:38:08.336]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:38:08.337]    __FlashAddr=0x00000000
[03:38:08.337]    __FlashLen=0x00000000
[03:38:08.337]    __FlashArg=0x00000000
[03:38:08.337]    __FlashOp=0x00000000
[03:38:08.337]    __Result=0x00000000
[03:38:08.338]    
[03:38:08.338]    // User-defined
[03:38:08.338]    DbgMCU_CR=0x00000007
[03:38:08.338]    DbgMCU_APB1_Fz=0x00000000
[03:38:08.338]    DbgMCU_APB2_Fz=0x00000000
[03:38:08.338]    TraceClk_Pin=0x00040002
[03:38:08.339]    TraceD0_Pin=0x00040003
[03:38:08.339]    TraceD1_Pin=0x00040004
[03:38:08.339]    TraceD2_Pin=0x00040005
[03:38:08.339]    TraceD3_Pin=0x00040006
[03:38:08.339]  </debugvars>
[03:38:08.339]  
[03:38:08.340]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:38:08.340]    <block atomic="false" info="">
[03:38:08.340]      Sequence("CheckID");
[03:38:08.340]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:38:08.340]          <block atomic="false" info="">
[03:38:08.341]            __var pidr1 = 0;
[03:38:08.341]              // -> [pidr1 <= 0x00000000]
[03:38:08.341]            __var pidr2 = 0;
[03:38:08.341]              // -> [pidr2 <= 0x00000000]
[03:38:08.341]            __var jep106id = 0;
[03:38:08.341]              // -> [jep106id <= 0x00000000]
[03:38:08.342]            __var ROMTableBase = 0;
[03:38:08.342]              // -> [ROMTableBase <= 0x00000000]
[03:38:08.342]            __ap = 0;      // AHB-AP
[03:38:08.342]              // -> [__ap <= 0x00000000]
[03:38:08.342]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:38:08.343]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:38:08.343]              // -> [ROMTableBase <= 0xE00FD000]
[03:38:08.343]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:38:08.344]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:38:08.344]              // -> [pidr1 <= 0x00000004]
[03:38:08.344]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:38:08.345]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:38:08.345]              // -> [pidr2 <= 0x0000001A]
[03:38:08.345]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:38:08.345]              // -> [jep106id <= 0x00000020]
[03:38:08.345]          </block>
[03:38:08.346]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:38:08.346]            // if-block "jep106id != 0x20"
[03:38:08.346]              // =>  FALSE
[03:38:08.346]            // skip if-block "jep106id != 0x20"
[03:38:08.346]          </control>
[03:38:08.347]        </sequence>
[03:38:08.347]    </block>
[03:38:08.347]  </sequence>
[03:38:08.347]  
[03:38:08.361]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:38:08.361]  
[03:38:08.362]  <debugvars>
[03:38:08.362]    // Pre-defined
[03:38:08.362]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:38:08.362]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:38:08.362]    __dp=0x00000000
[03:38:08.363]    __ap=0x00000000
[03:38:08.363]    __traceout=0x00000001      (SWO Trace)
[03:38:08.363]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:38:08.363]    __FlashAddr=0x00000000
[03:38:08.363]    __FlashLen=0x00000000
[03:38:08.364]    __FlashArg=0x00000000
[03:38:08.364]    __FlashOp=0x00000000
[03:38:08.364]    __Result=0x00000000
[03:38:08.364]    
[03:38:08.364]    // User-defined
[03:38:08.364]    DbgMCU_CR=0x00000007
[03:38:08.365]    DbgMCU_APB1_Fz=0x00000000
[03:38:08.365]    DbgMCU_APB2_Fz=0x00000000
[03:38:08.365]    TraceClk_Pin=0x00040002
[03:38:08.365]    TraceD0_Pin=0x00040003
[03:38:08.365]    TraceD1_Pin=0x00040004
[03:38:08.365]    TraceD2_Pin=0x00040005
[03:38:08.366]    TraceD3_Pin=0x00040006
[03:38:08.366]  </debugvars>
[03:38:08.366]  
[03:38:08.366]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:38:08.366]    <block atomic="false" info="">
[03:38:08.367]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:38:08.367]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:08.367]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:38:08.368]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:08.368]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:38:08.368]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:08.368]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:38:08.369]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:08.369]    </block>
[03:38:08.369]  </sequence>
[03:38:08.369]  
[03:38:39.506]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:38:39.506]  
[03:38:39.506]  <debugvars>
[03:38:39.507]    // Pre-defined
[03:38:39.507]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:38:39.507]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:38:39.507]    __dp=0x00000000
[03:38:39.507]    __ap=0x00000000
[03:38:39.508]    __traceout=0x00000001      (SWO Trace)
[03:38:39.508]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:38:39.508]    __FlashAddr=0x00000000
[03:38:39.508]    __FlashLen=0x00000000
[03:38:39.508]    __FlashArg=0x00000000
[03:38:39.509]    __FlashOp=0x00000000
[03:38:39.509]    __Result=0x00000000
[03:38:39.509]    
[03:38:39.509]    // User-defined
[03:38:39.509]    DbgMCU_CR=0x00000007
[03:38:39.509]    DbgMCU_APB1_Fz=0x00000000
[03:38:39.510]    DbgMCU_APB2_Fz=0x00000000
[03:38:39.510]    TraceClk_Pin=0x00040002
[03:38:39.510]    TraceD0_Pin=0x00040003
[03:38:39.510]    TraceD1_Pin=0x00040004
[03:38:39.510]    TraceD2_Pin=0x00040005
[03:38:39.510]    TraceD3_Pin=0x00040006
[03:38:39.511]  </debugvars>
[03:38:39.511]  
[03:38:39.511]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:38:39.511]    <block atomic="false" info="">
[03:38:39.511]      Sequence("CheckID");
[03:38:39.511]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:38:39.512]          <block atomic="false" info="">
[03:38:39.512]            __var pidr1 = 0;
[03:38:39.512]              // -> [pidr1 <= 0x00000000]
[03:38:39.512]            __var pidr2 = 0;
[03:38:39.512]              // -> [pidr2 <= 0x00000000]
[03:38:39.513]            __var jep106id = 0;
[03:38:39.513]              // -> [jep106id <= 0x00000000]
[03:38:39.513]            __var ROMTableBase = 0;
[03:38:39.513]              // -> [ROMTableBase <= 0x00000000]
[03:38:39.513]            __ap = 0;      // AHB-AP
[03:38:39.513]              // -> [__ap <= 0x00000000]
[03:38:39.514]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:38:39.514]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.514]              // -> [ROMTableBase <= 0xE00FD000]
[03:38:39.514]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:38:39.515]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.515]              // -> [pidr1 <= 0x00000004]
[03:38:39.515]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:38:39.516]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.516]              // -> [pidr2 <= 0x0000001A]
[03:38:39.516]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:38:39.516]              // -> [jep106id <= 0x00000020]
[03:38:39.516]          </block>
[03:38:39.516]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:38:39.517]            // if-block "jep106id != 0x20"
[03:38:39.517]              // =>  FALSE
[03:38:39.517]            // skip if-block "jep106id != 0x20"
[03:38:39.517]          </control>
[03:38:39.517]        </sequence>
[03:38:39.517]    </block>
[03:38:39.518]  </sequence>
[03:38:39.518]  
[03:38:39.532]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:38:39.532]  
[03:38:39.533]  <debugvars>
[03:38:39.533]    // Pre-defined
[03:38:39.533]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:38:39.533]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:38:39.533]    __dp=0x00000000
[03:38:39.534]    __ap=0x00000000
[03:38:39.534]    __traceout=0x00000001      (SWO Trace)
[03:38:39.534]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:38:39.534]    __FlashAddr=0x00000000
[03:38:39.534]    __FlashLen=0x00000000
[03:38:39.535]    __FlashArg=0x00000000
[03:38:39.535]    __FlashOp=0x00000000
[03:38:39.535]    __Result=0x00000000
[03:38:39.535]    
[03:38:39.535]    // User-defined
[03:38:39.535]    DbgMCU_CR=0x00000007
[03:38:39.536]    DbgMCU_APB1_Fz=0x00000000
[03:38:39.536]    DbgMCU_APB2_Fz=0x00000000
[03:38:39.536]    TraceClk_Pin=0x00040002
[03:38:39.536]    TraceD0_Pin=0x00040003
[03:38:39.536]    TraceD1_Pin=0x00040004
[03:38:39.537]    TraceD2_Pin=0x00040005
[03:38:39.537]    TraceD3_Pin=0x00040006
[03:38:39.537]  </debugvars>
[03:38:39.537]  
[03:38:39.537]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:38:39.538]    <block atomic="false" info="">
[03:38:39.538]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:38:39.538]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.539]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:38:39.539]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.539]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:38:39.540]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.540]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:38:39.541]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.541]    </block>
[03:38:39.541]  </sequence>
[03:38:39.541]  
[03:38:39.559]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:38:39.559]  
[03:38:39.559]  <debugvars>
[03:38:39.559]    // Pre-defined
[03:38:39.559]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:38:39.559]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:38:39.560]    __dp=0x00000000
[03:38:39.560]    __ap=0x00000000
[03:38:39.560]    __traceout=0x00000001      (SWO Trace)
[03:38:39.560]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:38:39.560]    __FlashAddr=0x00000000
[03:38:39.561]    __FlashLen=0x00000000
[03:38:39.561]    __FlashArg=0x00000000
[03:38:39.561]    __FlashOp=0x00000000
[03:38:39.561]    __Result=0x00000000
[03:38:39.561]    
[03:38:39.561]    // User-defined
[03:38:39.561]    DbgMCU_CR=0x00000007
[03:38:39.562]    DbgMCU_APB1_Fz=0x00000000
[03:38:39.562]    DbgMCU_APB2_Fz=0x00000000
[03:38:39.562]    TraceClk_Pin=0x00040002
[03:38:39.562]    TraceD0_Pin=0x00040003
[03:38:39.562]    TraceD1_Pin=0x00040004
[03:38:39.562]    TraceD2_Pin=0x00040005
[03:38:39.563]    TraceD3_Pin=0x00040006
[03:38:39.563]  </debugvars>
[03:38:39.563]  
[03:38:39.563]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:38:39.563]    <block atomic="false" info="">
[03:38:39.563]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:38:39.563]        // -> [traceSWO <= 0x00000001]
[03:38:39.564]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:38:39.564]        // -> [traceTPIU <= 0x00000000]
[03:38:39.564]    </block>
[03:38:39.564]    <control if="traceSWO" while="" timeout="0" info="">
[03:38:39.564]      // if-block "traceSWO"
[03:38:39.564]        // =>  TRUE
[03:38:39.564]      <block atomic="false" info="">
[03:38:39.564]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:38:39.565]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:38:39.565]            <block atomic="false" info="">
[03:38:39.565]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:38:39.565]                // -> [dbgmcu_val <= 0x00000000]
[03:38:39.565]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:38:39.565]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:38:39.565]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:38:39.566]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.566]                // -> [dbgmcu_val <= 0x00000007]
[03:38:39.566]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:38:39.566]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:38:39.566]              Sequence("ConfigureTraceSWOPin");
[03:38:39.567]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:38:39.567]                  <block atomic="false" info="">
[03:38:39.567]                    __var pin     = 0;
[03:38:39.567]                      // -> [pin <= 0x00000000]
[03:38:39.567]                    __var port    = 0;
[03:38:39.567]                      // -> [port <= 0x00000000]
[03:38:39.567]                    __var portAdr = 0;
[03:38:39.567]                      // -> [portAdr <= 0x00000000]
[03:38:39.567]                    __var pos     = 0;
[03:38:39.568]                      // -> [pos <= 0x00000000]
[03:38:39.568]                    __var SWO_Pin = 0x00010003;          // PB3
[03:38:39.568]                      // -> [SWO_Pin <= 0x00010003]
[03:38:39.568]                  </block>
[03:38:39.568]                  <block atomic="false" info="configure SWO">
[03:38:39.568]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:38:39.568]                      // -> [pin <= 0x00000003]
[03:38:39.568]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:38:39.568]                      // -> [port <= 0x00000001]
[03:38:39.569]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:38:39.569]                      // -> [portAdr <= 0x40020400]
[03:38:39.569]                    pos = pin * 2;
[03:38:39.569]                      // -> [pos <= 0x00000006]
[03:38:39.569]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:38:39.569]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.570]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.570]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:38:39.570]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.571]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.571]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:38:39.572]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.572]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.572]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:38:39.573]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.573]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.573]                  </block>
[03:38:39.574]                  <control if="pin <  8" while="" timeout="0" info="">
[03:38:39.574]                    // if-block "pin <  8"
[03:38:39.574]                      // =>  TRUE
[03:38:39.574]                    <block atomic="false" info="">
[03:38:39.574]                      pos = ((pin    ) & 7) * 4;
[03:38:39.574]                        // -> [pos <= 0x0000000C]
[03:38:39.574]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:38:39.575]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.575]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.575]                    </block>
[03:38:39.575]                    // end if-block "pin <  8"
[03:38:39.575]                  </control>
[03:38:39.575]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:38:39.576]                    // if-block "pin >= 8"
[03:38:39.576]                      // =>  FALSE
[03:38:39.576]                    // skip if-block "pin >= 8"
[03:38:39.576]                  </control>
[03:38:39.576]                </sequence>
[03:38:39.576]            </block>
[03:38:39.576]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:38:39.577]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:38:39.577]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.577]            </block>
[03:38:39.577]          </sequence>
[03:38:39.577]      </block>
[03:38:39.578]      // end if-block "traceSWO"
[03:38:39.578]    </control>
[03:38:39.578]    <control if="traceTPIU" while="" timeout="0" info="">
[03:38:39.578]      // if-block "traceTPIU"
[03:38:39.578]        // =>  FALSE
[03:38:39.578]      // skip if-block "traceTPIU"
[03:38:39.578]    </control>
[03:38:39.578]  </sequence>
[03:38:39.579]  
[03:38:39.582]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:38:39.582]  
[03:38:39.583]  <debugvars>
[03:38:39.583]    // Pre-defined
[03:38:39.583]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:38:39.583]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:38:39.584]    __dp=0x00000000
[03:38:39.584]    __ap=0x00000000
[03:38:39.584]    __traceout=0x00000001      (SWO Trace)
[03:38:39.584]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:38:39.584]    __FlashAddr=0x00000000
[03:38:39.584]    __FlashLen=0x00000000
[03:38:39.585]    __FlashArg=0x00000000
[03:38:39.585]    __FlashOp=0x00000000
[03:38:39.585]    __Result=0x00000000
[03:38:39.585]    
[03:38:39.585]    // User-defined
[03:38:39.585]    DbgMCU_CR=0x00000007
[03:38:39.585]    DbgMCU_APB1_Fz=0x00000000
[03:38:39.586]    DbgMCU_APB2_Fz=0x00000000
[03:38:39.586]    TraceClk_Pin=0x00040002
[03:38:39.586]    TraceD0_Pin=0x00040003
[03:38:39.586]    TraceD1_Pin=0x00040004
[03:38:39.586]    TraceD2_Pin=0x00040005
[03:38:39.587]    TraceD3_Pin=0x00040006
[03:38:39.587]  </debugvars>
[03:38:39.587]  
[03:38:39.587]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:38:39.587]    <block atomic="false" info="">
[03:38:39.587]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:38:39.588]        // -> [traceSWO <= 0x00000001]
[03:38:39.588]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:38:39.588]        // -> [traceTPIU <= 0x00000000]
[03:38:39.588]    </block>
[03:38:39.588]    <control if="traceSWO" while="" timeout="0" info="">
[03:38:39.588]      // if-block "traceSWO"
[03:38:39.589]        // =>  TRUE
[03:38:39.589]      <block atomic="false" info="">
[03:38:39.589]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:38:39.589]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:38:39.589]            <block atomic="false" info="">
[03:38:39.589]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:38:39.590]                // -> [dbgmcu_val <= 0x00000000]
[03:38:39.590]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:38:39.590]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:38:39.590]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:38:39.590]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.591]                // -> [dbgmcu_val <= 0x00000007]
[03:38:39.591]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:38:39.591]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:38:39.591]              Sequence("ConfigureTraceSWOPin");
[03:38:39.591]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:38:39.591]                  <block atomic="false" info="">
[03:38:39.591]                    __var pin     = 0;
[03:38:39.592]                      // -> [pin <= 0x00000000]
[03:38:39.592]                    __var port    = 0;
[03:38:39.592]                      // -> [port <= 0x00000000]
[03:38:39.592]                    __var portAdr = 0;
[03:38:39.592]                      // -> [portAdr <= 0x00000000]
[03:38:39.592]                    __var pos     = 0;
[03:38:39.592]                      // -> [pos <= 0x00000000]
[03:38:39.593]                    __var SWO_Pin = 0x00010003;          // PB3
[03:38:39.593]                      // -> [SWO_Pin <= 0x00010003]
[03:38:39.593]                  </block>
[03:38:39.593]                  <block atomic="false" info="configure SWO">
[03:38:39.593]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:38:39.593]                      // -> [pin <= 0x00000003]
[03:38:39.594]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:38:39.594]                      // -> [port <= 0x00000001]
[03:38:39.594]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:38:39.594]                      // -> [portAdr <= 0x40020400]
[03:38:39.594]                    pos = pin * 2;
[03:38:39.594]                      // -> [pos <= 0x00000006]
[03:38:39.594]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:38:39.595]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.595]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.595]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:38:39.596]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.596]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.596]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:38:39.597]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.597]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.597]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:38:39.598]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.598]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.598]                  </block>
[03:38:39.598]                  <control if="pin <  8" while="" timeout="0" info="">
[03:38:39.599]                    // if-block "pin <  8"
[03:38:39.599]                      // =>  TRUE
[03:38:39.599]                    <block atomic="false" info="">
[03:38:39.599]                      pos = ((pin    ) & 7) * 4;
[03:38:39.599]                        // -> [pos <= 0x0000000C]
[03:38:39.599]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:38:39.600]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.600]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.600]                    </block>
[03:38:39.600]                    // end if-block "pin <  8"
[03:38:39.600]                  </control>
[03:38:39.601]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:38:39.601]                    // if-block "pin >= 8"
[03:38:39.601]                      // =>  FALSE
[03:38:39.601]                    // skip if-block "pin >= 8"
[03:38:39.601]                  </control>
[03:38:39.601]                </sequence>
[03:38:39.601]            </block>
[03:38:39.601]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:38:39.601]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:38:39.602]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.602]            </block>
[03:38:39.602]          </sequence>
[03:38:39.602]      </block>
[03:38:39.602]      // end if-block "traceSWO"
[03:38:39.602]    </control>
[03:38:39.602]    <control if="traceTPIU" while="" timeout="0" info="">
[03:38:39.603]      // if-block "traceTPIU"
[03:38:39.603]        // =>  FALSE
[03:38:39.603]      // skip if-block "traceTPIU"
[03:38:39.603]    </control>
[03:38:39.603]  </sequence>
[03:38:39.603]  
[03:38:39.833]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:38:39.833]  
[03:38:39.833]  <debugvars>
[03:38:39.833]    // Pre-defined
[03:38:39.834]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:38:39.834]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:38:39.834]    __dp=0x00000000
[03:38:39.834]    __ap=0x00000000
[03:38:39.834]    __traceout=0x00000001      (SWO Trace)
[03:38:39.834]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:38:39.834]    __FlashAddr=0x00000000
[03:38:39.835]    __FlashLen=0x00000000
[03:38:39.835]    __FlashArg=0x00000000
[03:38:39.835]    __FlashOp=0x00000000
[03:38:39.835]    __Result=0x00000000
[03:38:39.835]    
[03:38:39.835]    // User-defined
[03:38:39.835]    DbgMCU_CR=0x00000007
[03:38:39.836]    DbgMCU_APB1_Fz=0x00000000
[03:38:39.836]    DbgMCU_APB2_Fz=0x00000000
[03:38:39.836]    TraceClk_Pin=0x00040002
[03:38:39.836]    TraceD0_Pin=0x00040003
[03:38:39.836]    TraceD1_Pin=0x00040004
[03:38:39.836]    TraceD2_Pin=0x00040005
[03:38:39.836]    TraceD3_Pin=0x00040006
[03:38:39.837]  </debugvars>
[03:38:39.837]  
[03:38:39.837]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:38:39.837]    <block atomic="false" info="">
[03:38:39.837]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:38:39.837]        // -> [traceSWO <= 0x00000001]
[03:38:39.837]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:38:39.837]        // -> [traceTPIU <= 0x00000000]
[03:38:39.838]    </block>
[03:38:39.838]    <control if="traceSWO" while="" timeout="0" info="">
[03:38:39.838]      // if-block "traceSWO"
[03:38:39.838]        // =>  TRUE
[03:38:39.838]      <block atomic="false" info="">
[03:38:39.838]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:38:39.838]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:38:39.839]            <block atomic="false" info="">
[03:38:39.839]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:38:39.839]                // -> [dbgmcu_val <= 0x00000000]
[03:38:39.839]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:38:39.839]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:38:39.839]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:38:39.840]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.840]                // -> [dbgmcu_val <= 0x00000007]
[03:38:39.840]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:38:39.840]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:38:39.840]              Sequence("ConfigureTraceSWOPin");
[03:38:39.840]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:38:39.840]                  <block atomic="false" info="">
[03:38:39.840]                    __var pin     = 0;
[03:38:39.840]                      // -> [pin <= 0x00000000]
[03:38:39.841]                    __var port    = 0;
[03:38:39.841]                      // -> [port <= 0x00000000]
[03:38:39.841]                    __var portAdr = 0;
[03:38:39.841]                      // -> [portAdr <= 0x00000000]
[03:38:39.841]                    __var pos     = 0;
[03:38:39.841]                      // -> [pos <= 0x00000000]
[03:38:39.841]                    __var SWO_Pin = 0x00010003;          // PB3
[03:38:39.841]                      // -> [SWO_Pin <= 0x00010003]
[03:38:39.841]                  </block>
[03:38:39.842]                  <block atomic="false" info="configure SWO">
[03:38:39.842]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:38:39.842]                      // -> [pin <= 0x00000003]
[03:38:39.842]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:38:39.842]                      // -> [port <= 0x00000001]
[03:38:39.842]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:38:39.842]                      // -> [portAdr <= 0x40020400]
[03:38:39.842]                    pos = pin * 2;
[03:38:39.842]                      // -> [pos <= 0x00000006]
[03:38:39.843]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:38:39.843]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.843]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.844]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:38:39.844]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.844]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.845]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:38:39.845]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.845]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.846]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:38:39.846]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.847]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.847]                  </block>
[03:38:39.847]                  <control if="pin <  8" while="" timeout="0" info="">
[03:38:39.847]                    // if-block "pin <  8"
[03:38:39.847]                      // =>  TRUE
[03:38:39.847]                    <block atomic="false" info="">
[03:38:39.847]                      pos = ((pin    ) & 7) * 4;
[03:38:39.847]                        // -> [pos <= 0x0000000C]
[03:38:39.847]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:38:39.848]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.848]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.848]                    </block>
[03:38:39.849]                    // end if-block "pin <  8"
[03:38:39.849]                  </control>
[03:38:39.849]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:38:39.849]                    // if-block "pin >= 8"
[03:38:39.849]                      // =>  FALSE
[03:38:39.849]                    // skip if-block "pin >= 8"
[03:38:39.849]                  </control>
[03:38:39.849]                </sequence>
[03:38:39.849]            </block>
[03:38:39.849]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:38:39.850]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:38:39.850]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:39.850]            </block>
[03:38:39.850]          </sequence>
[03:38:39.850]      </block>
[03:38:39.850]      // end if-block "traceSWO"
[03:38:39.851]    </control>
[03:38:39.851]    <control if="traceTPIU" while="" timeout="0" info="">
[03:38:39.851]      // if-block "traceTPIU"
[03:38:39.851]        // =>  FALSE
[03:38:39.851]      // skip if-block "traceTPIU"
[03:38:39.851]    </control>
[03:38:39.851]  </sequence>
[03:38:39.851]  
[03:38:44.160]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:38:44.160]  
[03:38:44.161]  <debugvars>
[03:38:44.162]    // Pre-defined
[03:38:44.162]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:38:44.163]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:38:44.163]    __dp=0x00000000
[03:38:44.164]    __ap=0x00000000
[03:38:44.165]    __traceout=0x00000001      (SWO Trace)
[03:38:44.165]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:38:44.166]    __FlashAddr=0x00000000
[03:38:44.166]    __FlashLen=0x00000000
[03:38:44.167]    __FlashArg=0x00000000
[03:38:44.167]    __FlashOp=0x00000000
[03:38:44.168]    __Result=0x00000000
[03:38:44.169]    
[03:38:44.169]    // User-defined
[03:38:44.169]    DbgMCU_CR=0x00000007
[03:38:44.170]    DbgMCU_APB1_Fz=0x00000000
[03:38:44.170]    DbgMCU_APB2_Fz=0x00000000
[03:38:44.171]    TraceClk_Pin=0x00040002
[03:38:44.171]    TraceD0_Pin=0x00040003
[03:38:44.171]    TraceD1_Pin=0x00040004
[03:38:44.172]    TraceD2_Pin=0x00040005
[03:38:44.172]    TraceD3_Pin=0x00040006
[03:38:44.173]  </debugvars>
[03:38:44.173]  
[03:38:44.173]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:38:44.174]    <block atomic="false" info="">
[03:38:44.174]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:38:44.175]        // -> [traceSWO <= 0x00000001]
[03:38:44.175]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:38:44.175]        // -> [traceTPIU <= 0x00000000]
[03:38:44.176]    </block>
[03:38:44.176]    <control if="traceSWO" while="" timeout="0" info="">
[03:38:44.176]      // if-block "traceSWO"
[03:38:44.177]        // =>  TRUE
[03:38:44.177]      <block atomic="false" info="">
[03:38:44.177]        Sequence("DisableTraceSWO");
[03:38:44.178]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:38:44.178]            <block atomic="false" info="">
[03:38:44.178]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:38:44.178]                // -> [dbgmcu_val <= 0x00000000]
[03:38:44.178]            </block>
[03:38:44.179]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:38:44.179]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:38:44.179]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:38:44.180]                // -> [dbgmcu_val <= 0x00000007]
[03:38:44.180]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:38:44.180]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:38:44.181]            </block>
[03:38:44.181]          </sequence>
[03:38:44.181]      </block>
[03:38:44.181]      // end if-block "traceSWO"
[03:38:44.181]    </control>
[03:38:44.182]    <control if="traceTPIU" while="" timeout="0" info="">
[03:38:44.182]      // if-block "traceTPIU"
[03:38:44.182]        // =>  FALSE
[03:38:44.182]      // skip if-block "traceTPIU"
[03:38:44.182]    </control>
[03:38:44.183]  </sequence>
[03:38:44.183]  
[03:39:32.049]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:39:32.049]  
[03:39:32.049]  <debugvars>
[03:39:32.049]    // Pre-defined
[03:39:32.049]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:39:32.049]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:39:32.050]    __dp=0x00000000
[03:39:32.050]    __ap=0x00000000
[03:39:32.050]    __traceout=0x00000001      (SWO Trace)
[03:39:32.050]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:39:32.050]    __FlashAddr=0x00000000
[03:39:32.050]    __FlashLen=0x00000000
[03:39:32.051]    __FlashArg=0x00000000
[03:39:32.051]    __FlashOp=0x00000000
[03:39:32.051]    __Result=0x00000000
[03:39:32.051]    
[03:39:32.051]    // User-defined
[03:39:32.051]    DbgMCU_CR=0x00000007
[03:39:32.051]    DbgMCU_APB1_Fz=0x00000000
[03:39:32.052]    DbgMCU_APB2_Fz=0x00000000
[03:39:32.052]    TraceClk_Pin=0x00040002
[03:39:32.052]    TraceD0_Pin=0x00040003
[03:39:32.052]    TraceD1_Pin=0x00040004
[03:39:32.052]    TraceD2_Pin=0x00040005
[03:39:32.052]    TraceD3_Pin=0x00040006
[03:39:32.052]  </debugvars>
[03:39:32.053]  
[03:39:32.053]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:39:32.053]    <block atomic="false" info="">
[03:39:32.053]      Sequence("CheckID");
[03:39:32.053]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:39:32.053]          <block atomic="false" info="">
[03:39:32.054]            __var pidr1 = 0;
[03:39:32.054]              // -> [pidr1 <= 0x00000000]
[03:39:32.054]            __var pidr2 = 0;
[03:39:32.054]              // -> [pidr2 <= 0x00000000]
[03:39:32.054]            __var jep106id = 0;
[03:39:32.054]              // -> [jep106id <= 0x00000000]
[03:39:32.054]            __var ROMTableBase = 0;
[03:39:32.055]              // -> [ROMTableBase <= 0x00000000]
[03:39:32.055]            __ap = 0;      // AHB-AP
[03:39:32.055]              // -> [__ap <= 0x00000000]
[03:39:32.055]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:39:32.055]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:39:32.056]              // -> [ROMTableBase <= 0xE00FD000]
[03:39:32.056]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:39:32.056]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:39:32.057]              // -> [pidr1 <= 0x00000004]
[03:39:32.057]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:39:32.057]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:39:32.058]              // -> [pidr2 <= 0x0000001A]
[03:39:32.058]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:39:32.058]              // -> [jep106id <= 0x00000020]
[03:39:32.058]          </block>
[03:39:32.058]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:39:32.058]            // if-block "jep106id != 0x20"
[03:39:32.058]              // =>  FALSE
[03:39:32.059]            // skip if-block "jep106id != 0x20"
[03:39:32.059]          </control>
[03:39:32.059]        </sequence>
[03:39:32.059]    </block>
[03:39:32.059]  </sequence>
[03:39:32.059]  
[03:39:32.074]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:39:32.074]  
[03:39:32.074]  <debugvars>
[03:39:32.074]    // Pre-defined
[03:39:32.074]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:39:32.075]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:39:32.075]    __dp=0x00000000
[03:39:32.075]    __ap=0x00000000
[03:39:32.075]    __traceout=0x00000001      (SWO Trace)
[03:39:32.075]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:39:32.076]    __FlashAddr=0x00000000
[03:39:32.076]    __FlashLen=0x00000000
[03:39:32.076]    __FlashArg=0x00000000
[03:39:32.076]    __FlashOp=0x00000000
[03:39:32.076]    __Result=0x00000000
[03:39:32.076]    
[03:39:32.076]    // User-defined
[03:39:32.077]    DbgMCU_CR=0x00000007
[03:39:32.077]    DbgMCU_APB1_Fz=0x00000000
[03:39:32.077]    DbgMCU_APB2_Fz=0x00000000
[03:39:32.077]    TraceClk_Pin=0x00040002
[03:39:32.077]    TraceD0_Pin=0x00040003
[03:39:32.077]    TraceD1_Pin=0x00040004
[03:39:32.078]    TraceD2_Pin=0x00040005
[03:39:32.078]    TraceD3_Pin=0x00040006
[03:39:32.078]  </debugvars>
[03:39:32.078]  
[03:39:32.078]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:39:32.078]    <block atomic="false" info="">
[03:39:32.079]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:39:32.079]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:39:32.079]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:39:32.080]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:39:32.080]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:39:32.080]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:39:32.081]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:39:32.081]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:39:32.081]    </block>
[03:39:32.081]  </sequence>
[03:39:32.082]  
[03:40:03.159]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:40:03.159]  
[03:40:03.159]  <debugvars>
[03:40:03.160]    // Pre-defined
[03:40:03.160]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:40:03.160]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:40:03.160]    __dp=0x00000000
[03:40:03.160]    __ap=0x00000000
[03:40:03.160]    __traceout=0x00000001      (SWO Trace)
[03:40:03.161]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:40:03.161]    __FlashAddr=0x00000000
[03:40:03.161]    __FlashLen=0x00000000
[03:40:03.161]    __FlashArg=0x00000000
[03:40:03.161]    __FlashOp=0x00000000
[03:40:03.161]    __Result=0x00000000
[03:40:03.162]    
[03:40:03.162]    // User-defined
[03:40:03.162]    DbgMCU_CR=0x00000007
[03:40:03.162]    DbgMCU_APB1_Fz=0x00000000
[03:40:03.162]    DbgMCU_APB2_Fz=0x00000000
[03:40:03.162]    TraceClk_Pin=0x00040002
[03:40:03.162]    TraceD0_Pin=0x00040003
[03:40:03.163]    TraceD1_Pin=0x00040004
[03:40:03.163]    TraceD2_Pin=0x00040005
[03:40:03.163]    TraceD3_Pin=0x00040006
[03:40:03.163]  </debugvars>
[03:40:03.163]  
[03:40:03.163]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:40:03.164]    <block atomic="false" info="">
[03:40:03.164]      Sequence("CheckID");
[03:40:03.164]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:40:03.164]          <block atomic="false" info="">
[03:40:03.164]            __var pidr1 = 0;
[03:40:03.165]              // -> [pidr1 <= 0x00000000]
[03:40:03.165]            __var pidr2 = 0;
[03:40:03.165]              // -> [pidr2 <= 0x00000000]
[03:40:03.165]            __var jep106id = 0;
[03:40:03.165]              // -> [jep106id <= 0x00000000]
[03:40:03.165]            __var ROMTableBase = 0;
[03:40:03.166]              // -> [ROMTableBase <= 0x00000000]
[03:40:03.166]            __ap = 0;      // AHB-AP
[03:40:03.166]              // -> [__ap <= 0x00000000]
[03:40:03.166]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:40:03.166]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.167]              // -> [ROMTableBase <= 0xE00FD000]
[03:40:03.167]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:40:03.167]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.167]              // -> [pidr1 <= 0x00000004]
[03:40:03.168]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:40:03.168]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.168]              // -> [pidr2 <= 0x0000001A]
[03:40:03.168]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:40:03.168]              // -> [jep106id <= 0x00000020]
[03:40:03.169]          </block>
[03:40:03.169]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:40:03.169]            // if-block "jep106id != 0x20"
[03:40:03.169]              // =>  FALSE
[03:40:03.169]            // skip if-block "jep106id != 0x20"
[03:40:03.169]          </control>
[03:40:03.169]        </sequence>
[03:40:03.169]    </block>
[03:40:03.170]  </sequence>
[03:40:03.170]  
[03:40:03.184]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:40:03.184]  
[03:40:03.185]  <debugvars>
[03:40:03.185]    // Pre-defined
[03:40:03.185]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:40:03.185]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:40:03.185]    __dp=0x00000000
[03:40:03.185]    __ap=0x00000000
[03:40:03.185]    __traceout=0x00000001      (SWO Trace)
[03:40:03.186]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:40:03.186]    __FlashAddr=0x00000000
[03:40:03.186]    __FlashLen=0x00000000
[03:40:03.186]    __FlashArg=0x00000000
[03:40:03.186]    __FlashOp=0x00000000
[03:40:03.186]    __Result=0x00000000
[03:40:03.186]    
[03:40:03.186]    // User-defined
[03:40:03.187]    DbgMCU_CR=0x00000007
[03:40:03.187]    DbgMCU_APB1_Fz=0x00000000
[03:40:03.187]    DbgMCU_APB2_Fz=0x00000000
[03:40:03.187]    TraceClk_Pin=0x00040002
[03:40:03.187]    TraceD0_Pin=0x00040003
[03:40:03.187]    TraceD1_Pin=0x00040004
[03:40:03.187]    TraceD2_Pin=0x00040005
[03:40:03.187]    TraceD3_Pin=0x00040006
[03:40:03.188]  </debugvars>
[03:40:03.188]  
[03:40:03.188]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:40:03.188]    <block atomic="false" info="">
[03:40:03.188]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:40:03.189]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.189]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:40:03.189]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.189]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:40:03.190]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.190]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:40:03.190]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.190]    </block>
[03:40:03.190]  </sequence>
[03:40:03.190]  
[03:40:03.207]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:40:03.207]  
[03:40:03.207]  <debugvars>
[03:40:03.207]    // Pre-defined
[03:40:03.207]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:40:03.207]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:40:03.207]    __dp=0x00000000
[03:40:03.207]    __ap=0x00000000
[03:40:03.208]    __traceout=0x00000001      (SWO Trace)
[03:40:03.208]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:40:03.208]    __FlashAddr=0x00000000
[03:40:03.208]    __FlashLen=0x00000000
[03:40:03.208]    __FlashArg=0x00000000
[03:40:03.208]    __FlashOp=0x00000000
[03:40:03.209]    __Result=0x00000000
[03:40:03.209]    
[03:40:03.209]    // User-defined
[03:40:03.209]    DbgMCU_CR=0x00000007
[03:40:03.209]    DbgMCU_APB1_Fz=0x00000000
[03:40:03.209]    DbgMCU_APB2_Fz=0x00000000
[03:40:03.209]    TraceClk_Pin=0x00040002
[03:40:03.210]    TraceD0_Pin=0x00040003
[03:40:03.210]    TraceD1_Pin=0x00040004
[03:40:03.210]    TraceD2_Pin=0x00040005
[03:40:03.210]    TraceD3_Pin=0x00040006
[03:40:03.210]  </debugvars>
[03:40:03.210]  
[03:40:03.210]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:40:03.211]    <block atomic="false" info="">
[03:40:03.211]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:40:03.211]        // -> [traceSWO <= 0x00000001]
[03:40:03.211]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:40:03.211]        // -> [traceTPIU <= 0x00000000]
[03:40:03.211]    </block>
[03:40:03.211]    <control if="traceSWO" while="" timeout="0" info="">
[03:40:03.211]      // if-block "traceSWO"
[03:40:03.211]        // =>  TRUE
[03:40:03.212]      <block atomic="false" info="">
[03:40:03.212]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:40:03.212]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:40:03.212]            <block atomic="false" info="">
[03:40:03.212]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:40:03.212]                // -> [dbgmcu_val <= 0x00000000]
[03:40:03.212]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:40:03.212]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:40:03.213]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:40:03.213]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.213]                // -> [dbgmcu_val <= 0x00000007]
[03:40:03.213]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:40:03.213]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:40:03.213]              Sequence("ConfigureTraceSWOPin");
[03:40:03.214]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:40:03.214]                  <block atomic="false" info="">
[03:40:03.214]                    __var pin     = 0;
[03:40:03.214]                      // -> [pin <= 0x00000000]
[03:40:03.214]                    __var port    = 0;
[03:40:03.214]                      // -> [port <= 0x00000000]
[03:40:03.214]                    __var portAdr = 0;
[03:40:03.214]                      // -> [portAdr <= 0x00000000]
[03:40:03.214]                    __var pos     = 0;
[03:40:03.215]                      // -> [pos <= 0x00000000]
[03:40:03.215]                    __var SWO_Pin = 0x00010003;          // PB3
[03:40:03.215]                      // -> [SWO_Pin <= 0x00010003]
[03:40:03.215]                  </block>
[03:40:03.215]                  <block atomic="false" info="configure SWO">
[03:40:03.215]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:40:03.215]                      // -> [pin <= 0x00000003]
[03:40:03.215]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:40:03.215]                      // -> [port <= 0x00000001]
[03:40:03.216]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:40:03.216]                      // -> [portAdr <= 0x40020400]
[03:40:03.216]                    pos = pin * 2;
[03:40:03.216]                      // -> [pos <= 0x00000006]
[03:40:03.216]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:40:03.217]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.217]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.218]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:40:03.218]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.218]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.219]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:40:03.219]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.219]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.220]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:40:03.220]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.220]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.221]                  </block>
[03:40:03.221]                  <control if="pin <  8" while="" timeout="0" info="">
[03:40:03.221]                    // if-block "pin <  8"
[03:40:03.221]                      // =>  TRUE
[03:40:03.221]                    <block atomic="false" info="">
[03:40:03.221]                      pos = ((pin    ) & 7) * 4;
[03:40:03.222]                        // -> [pos <= 0x0000000C]
[03:40:03.222]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:40:03.222]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.223]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.223]                    </block>
[03:40:03.223]                    // end if-block "pin <  8"
[03:40:03.223]                  </control>
[03:40:03.223]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:40:03.224]                    // if-block "pin >= 8"
[03:40:03.224]                      // =>  FALSE
[03:40:03.224]                    // skip if-block "pin >= 8"
[03:40:03.224]                  </control>
[03:40:03.224]                </sequence>
[03:40:03.224]            </block>
[03:40:03.225]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:40:03.225]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:40:03.225]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.225]            </block>
[03:40:03.226]          </sequence>
[03:40:03.226]      </block>
[03:40:03.226]      // end if-block "traceSWO"
[03:40:03.226]    </control>
[03:40:03.226]    <control if="traceTPIU" while="" timeout="0" info="">
[03:40:03.226]      // if-block "traceTPIU"
[03:40:03.226]        // =>  FALSE
[03:40:03.227]      // skip if-block "traceTPIU"
[03:40:03.227]    </control>
[03:40:03.227]  </sequence>
[03:40:03.227]  
[03:40:03.231]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:40:03.231]  
[03:40:03.231]  <debugvars>
[03:40:03.231]    // Pre-defined
[03:40:03.231]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:40:03.231]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:40:03.232]    __dp=0x00000000
[03:40:03.232]    __ap=0x00000000
[03:40:03.232]    __traceout=0x00000001      (SWO Trace)
[03:40:03.232]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:40:03.232]    __FlashAddr=0x00000000
[03:40:03.232]    __FlashLen=0x00000000
[03:40:03.233]    __FlashArg=0x00000000
[03:40:03.233]    __FlashOp=0x00000000
[03:40:03.233]    __Result=0x00000000
[03:40:03.233]    
[03:40:03.233]    // User-defined
[03:40:03.233]    DbgMCU_CR=0x00000007
[03:40:03.233]    DbgMCU_APB1_Fz=0x00000000
[03:40:03.233]    DbgMCU_APB2_Fz=0x00000000
[03:40:03.234]    TraceClk_Pin=0x00040002
[03:40:03.234]    TraceD0_Pin=0x00040003
[03:40:03.234]    TraceD1_Pin=0x00040004
[03:40:03.234]    TraceD2_Pin=0x00040005
[03:40:03.234]    TraceD3_Pin=0x00040006
[03:40:03.234]  </debugvars>
[03:40:03.235]  
[03:40:03.235]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:40:03.235]    <block atomic="false" info="">
[03:40:03.235]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:40:03.235]        // -> [traceSWO <= 0x00000001]
[03:40:03.236]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:40:03.236]        // -> [traceTPIU <= 0x00000000]
[03:40:03.236]    </block>
[03:40:03.236]    <control if="traceSWO" while="" timeout="0" info="">
[03:40:03.236]      // if-block "traceSWO"
[03:40:03.236]        // =>  TRUE
[03:40:03.236]      <block atomic="false" info="">
[03:40:03.237]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:40:03.237]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:40:03.237]            <block atomic="false" info="">
[03:40:03.237]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:40:03.237]                // -> [dbgmcu_val <= 0x00000000]
[03:40:03.237]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:40:03.238]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:40:03.238]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:40:03.238]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.238]                // -> [dbgmcu_val <= 0x00000007]
[03:40:03.238]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:40:03.239]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:40:03.239]              Sequence("ConfigureTraceSWOPin");
[03:40:03.239]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:40:03.239]                  <block atomic="false" info="">
[03:40:03.239]                    __var pin     = 0;
[03:40:03.239]                      // -> [pin <= 0x00000000]
[03:40:03.239]                    __var port    = 0;
[03:40:03.240]                      // -> [port <= 0x00000000]
[03:40:03.240]                    __var portAdr = 0;
[03:40:03.240]                      // -> [portAdr <= 0x00000000]
[03:40:03.240]                    __var pos     = 0;
[03:40:03.240]                      // -> [pos <= 0x00000000]
[03:40:03.240]                    __var SWO_Pin = 0x00010003;          // PB3
[03:40:03.240]                      // -> [SWO_Pin <= 0x00010003]
[03:40:03.241]                  </block>
[03:40:03.241]                  <block atomic="false" info="configure SWO">
[03:40:03.241]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:40:03.241]                      // -> [pin <= 0x00000003]
[03:40:03.241]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:40:03.241]                      // -> [port <= 0x00000001]
[03:40:03.241]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:40:03.241]                      // -> [portAdr <= 0x40020400]
[03:40:03.241]                    pos = pin * 2;
[03:40:03.242]                      // -> [pos <= 0x00000006]
[03:40:03.242]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:40:03.242]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.243]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.243]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:40:03.243]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.244]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.244]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:40:03.244]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.244]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.245]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:40:03.245]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.245]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.245]                  </block>
[03:40:03.246]                  <control if="pin <  8" while="" timeout="0" info="">
[03:40:03.246]                    // if-block "pin <  8"
[03:40:03.246]                      // =>  TRUE
[03:40:03.246]                    <block atomic="false" info="">
[03:40:03.246]                      pos = ((pin    ) & 7) * 4;
[03:40:03.246]                        // -> [pos <= 0x0000000C]
[03:40:03.246]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:40:03.247]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.247]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.247]                    </block>
[03:40:03.247]                    // end if-block "pin <  8"
[03:40:03.247]                  </control>
[03:40:03.248]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:40:03.248]                    // if-block "pin >= 8"
[03:40:03.248]                      // =>  FALSE
[03:40:03.248]                    // skip if-block "pin >= 8"
[03:40:03.248]                  </control>
[03:40:03.248]                </sequence>
[03:40:03.248]            </block>
[03:40:03.248]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:40:03.248]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:40:03.249]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.249]            </block>
[03:40:03.249]          </sequence>
[03:40:03.249]      </block>
[03:40:03.249]      // end if-block "traceSWO"
[03:40:03.249]    </control>
[03:40:03.250]    <control if="traceTPIU" while="" timeout="0" info="">
[03:40:03.250]      // if-block "traceTPIU"
[03:40:03.250]        // =>  FALSE
[03:40:03.250]      // skip if-block "traceTPIU"
[03:40:03.250]    </control>
[03:40:03.250]  </sequence>
[03:40:03.250]  
[03:40:03.464]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:40:03.464]  
[03:40:03.464]  <debugvars>
[03:40:03.464]    // Pre-defined
[03:40:03.464]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:40:03.465]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:40:03.465]    __dp=0x00000000
[03:40:03.465]    __ap=0x00000000
[03:40:03.465]    __traceout=0x00000001      (SWO Trace)
[03:40:03.465]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:40:03.465]    __FlashAddr=0x00000000
[03:40:03.465]    __FlashLen=0x00000000
[03:40:03.466]    __FlashArg=0x00000000
[03:40:03.466]    __FlashOp=0x00000000
[03:40:03.466]    __Result=0x00000000
[03:40:03.466]    
[03:40:03.466]    // User-defined
[03:40:03.466]    DbgMCU_CR=0x00000007
[03:40:03.466]    DbgMCU_APB1_Fz=0x00000000
[03:40:03.467]    DbgMCU_APB2_Fz=0x00000000
[03:40:03.467]    TraceClk_Pin=0x00040002
[03:40:03.467]    TraceD0_Pin=0x00040003
[03:40:03.467]    TraceD1_Pin=0x00040004
[03:40:03.467]    TraceD2_Pin=0x00040005
[03:40:03.467]    TraceD3_Pin=0x00040006
[03:40:03.467]  </debugvars>
[03:40:03.468]  
[03:40:03.468]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:40:03.468]    <block atomic="false" info="">
[03:40:03.468]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:40:03.468]        // -> [traceSWO <= 0x00000001]
[03:40:03.468]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:40:03.468]        // -> [traceTPIU <= 0x00000000]
[03:40:03.469]    </block>
[03:40:03.469]    <control if="traceSWO" while="" timeout="0" info="">
[03:40:03.469]      // if-block "traceSWO"
[03:40:03.469]        // =>  TRUE
[03:40:03.469]      <block atomic="false" info="">
[03:40:03.469]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:40:03.469]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:40:03.470]            <block atomic="false" info="">
[03:40:03.470]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:40:03.470]                // -> [dbgmcu_val <= 0x00000000]
[03:40:03.470]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:40:03.470]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:40:03.470]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:40:03.471]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.471]                // -> [dbgmcu_val <= 0x00000007]
[03:40:03.471]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:40:03.471]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:40:03.471]              Sequence("ConfigureTraceSWOPin");
[03:40:03.471]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:40:03.471]                  <block atomic="false" info="">
[03:40:03.471]                    __var pin     = 0;
[03:40:03.472]                      // -> [pin <= 0x00000000]
[03:40:03.472]                    __var port    = 0;
[03:40:03.472]                      // -> [port <= 0x00000000]
[03:40:03.472]                    __var portAdr = 0;
[03:40:03.472]                      // -> [portAdr <= 0x00000000]
[03:40:03.472]                    __var pos     = 0;
[03:40:03.472]                      // -> [pos <= 0x00000000]
[03:40:03.472]                    __var SWO_Pin = 0x00010003;          // PB3
[03:40:03.473]                      // -> [SWO_Pin <= 0x00010003]
[03:40:03.473]                  </block>
[03:40:03.473]                  <block atomic="false" info="configure SWO">
[03:40:03.473]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:40:03.473]                      // -> [pin <= 0x00000003]
[03:40:03.473]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:40:03.473]                      // -> [port <= 0x00000001]
[03:40:03.473]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:40:03.473]                      // -> [portAdr <= 0x40020400]
[03:40:03.474]                    pos = pin * 2;
[03:40:03.474]                      // -> [pos <= 0x00000006]
[03:40:03.474]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:40:03.474]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.475]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.475]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:40:03.475]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.476]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.476]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:40:03.476]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.477]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.477]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:40:03.477]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.478]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.478]                  </block>
[03:40:03.478]                  <control if="pin <  8" while="" timeout="0" info="">
[03:40:03.478]                    // if-block "pin <  8"
[03:40:03.478]                      // =>  TRUE
[03:40:03.478]                    <block atomic="false" info="">
[03:40:03.478]                      pos = ((pin    ) & 7) * 4;
[03:40:03.478]                        // -> [pos <= 0x0000000C]
[03:40:03.479]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:40:03.479]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.479]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.479]                    </block>
[03:40:03.480]                    // end if-block "pin <  8"
[03:40:03.480]                  </control>
[03:40:03.480]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:40:03.480]                    // if-block "pin >= 8"
[03:40:03.480]                      // =>  FALSE
[03:40:03.480]                    // skip if-block "pin >= 8"
[03:40:03.480]                  </control>
[03:40:03.480]                </sequence>
[03:40:03.480]            </block>
[03:40:03.480]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:40:03.481]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:40:03.481]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:40:03.481]            </block>
[03:40:03.481]          </sequence>
[03:40:03.481]      </block>
[03:40:03.481]      // end if-block "traceSWO"
[03:40:03.482]    </control>
[03:40:03.482]    <control if="traceTPIU" while="" timeout="0" info="">
[03:40:03.482]      // if-block "traceTPIU"
[03:40:03.482]        // =>  FALSE
[03:40:03.482]      // skip if-block "traceTPIU"
[03:40:03.482]    </control>
[03:40:03.482]  </sequence>
[03:40:03.482]  
[03:41:24.735]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:41:24.735]  
[03:41:24.735]  <debugvars>
[03:41:24.735]    // Pre-defined
[03:41:24.736]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:41:24.736]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:41:24.736]    __dp=0x00000000
[03:41:24.737]    __ap=0x00000000
[03:41:24.737]    __traceout=0x00000001      (SWO Trace)
[03:41:24.737]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:41:24.738]    __FlashAddr=0x00000000
[03:41:24.738]    __FlashLen=0x00000000
[03:41:24.738]    __FlashArg=0x00000000
[03:41:24.739]    __FlashOp=0x00000000
[03:41:24.739]    __Result=0x00000000
[03:41:24.739]    
[03:41:24.739]    // User-defined
[03:41:24.739]    DbgMCU_CR=0x00000007
[03:41:24.739]    DbgMCU_APB1_Fz=0x00000000
[03:41:24.740]    DbgMCU_APB2_Fz=0x00000000
[03:41:24.740]    TraceClk_Pin=0x00040002
[03:41:24.740]    TraceD0_Pin=0x00040003
[03:41:24.740]    TraceD1_Pin=0x00040004
[03:41:24.740]    TraceD2_Pin=0x00040005
[03:41:24.741]    TraceD3_Pin=0x00040006
[03:41:24.741]  </debugvars>
[03:41:24.741]  
[03:41:24.741]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:41:24.741]    <block atomic="false" info="">
[03:41:24.742]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:41:24.742]        // -> [traceSWO <= 0x00000001]
[03:41:24.742]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:41:24.742]        // -> [traceTPIU <= 0x00000000]
[03:41:24.742]    </block>
[03:41:24.743]    <control if="traceSWO" while="" timeout="0" info="">
[03:41:24.743]      // if-block "traceSWO"
[03:41:24.743]        // =>  TRUE
[03:41:24.743]      <block atomic="false" info="">
[03:41:24.743]        Sequence("DisableTraceSWO");
[03:41:24.743]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:41:24.744]            <block atomic="false" info="">
[03:41:24.744]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:41:24.744]                // -> [dbgmcu_val <= 0x00000000]
[03:41:24.744]            </block>
[03:41:24.744]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:41:24.744]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:41:24.746]  
[03:41:24.746]  !!! E310 : Debug access failed - cannot read address 0xE0042004 (accsize '4', AP '0x00000000')
[03:41:24.746]  
[03:41:24.746]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:41:24.746]            </block>
[03:41:24.746]          </sequence>
[03:41:24.746]      </block>
[03:41:24.747]      // end if-block "traceSWO"
[03:41:24.747]    </control>
[03:41:24.747]  </sequence>
[03:41:24.747]  
