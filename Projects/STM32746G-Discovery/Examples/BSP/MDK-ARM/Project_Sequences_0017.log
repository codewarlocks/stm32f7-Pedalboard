/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : C:\Users\gonza\STM32Cube\Repository\STM32Cube_FW_F7_V1.14.0 modificado\Projects\STM32746G-Discovery\Examples\BSP\MDK-ARM\Project_Sequences_0017.log
 *  Created     : 00:46:15 (09/05/2020)
 *  Device      : STM32F746NGHx
 *  PDSC File   : C:\Users\gonza\AppData\Local\Arm\Packs\Keil\STM32F7xx_DFP\2.12.0\Keil.STM32F7xx_DFP.pdsc
 *  Config File : C:\Users\gonza\STM32Cube\Repository\STM32Cube_FW_F7_V1.14.0 modificado\Projects\STM32746G-Discovery\Examples\BSP\MDK-ARM\DebugConfig\STM32746G_DISCOVERY_STM32F746NGHx_2.0.0.dbgconf
 *
 */

[00:46:15.882]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:46:15.882]  
[00:46:15.882]  <debugvars>
[00:46:15.882]    // Pre-defined
[00:46:15.882]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:46:15.883]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[00:46:15.883]    __dp=0x00000000
[00:46:15.883]    __ap=0x00000000
[00:46:15.883]    __traceout=0x00000001      (SWO Trace)
[00:46:15.883]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:46:15.884]    __FlashAddr=0x00000000
[00:46:15.884]    __FlashLen=0x00000000
[00:46:15.884]    __FlashArg=0x00000000
[00:46:15.884]    __FlashOp=0x00000000
[00:46:15.884]    __Result=0x00000000
[00:46:15.885]    
[00:46:15.885]    // User-defined
[00:46:15.885]    DbgMCU_CR=0x00000007
[00:46:15.885]    DbgMCU_APB1_Fz=0x00000000
[00:46:15.885]    DbgMCU_APB2_Fz=0x00000000
[00:46:15.885]    TraceClk_Pin=0x00040002
[00:46:15.886]    TraceD0_Pin=0x00040003
[00:46:15.886]    TraceD1_Pin=0x00040004
[00:46:15.886]    TraceD2_Pin=0x00040005
[00:46:15.886]    TraceD3_Pin=0x00040006
[00:46:15.886]  </debugvars>
[00:46:15.886]  
[00:46:15.886]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:46:15.887]    <block atomic="false" info="">
[00:46:15.887]      Sequence("CheckID");
[00:46:15.887]        <sequence name="CheckID" Pname="" disable="false" info="">
[00:46:15.887]          <block atomic="false" info="">
[00:46:15.887]            __var pidr1 = 0;
[00:46:15.888]              // -> [pidr1 <= 0x00000000]
[00:46:15.888]            __var pidr2 = 0;
[00:46:15.888]              // -> [pidr2 <= 0x00000000]
[00:46:15.888]            __var jep106id = 0;
[00:46:15.888]              // -> [jep106id <= 0x00000000]
[00:46:15.888]            __var ROMTableBase = 0;
[00:46:15.889]              // -> [ROMTableBase <= 0x00000000]
[00:46:15.889]            __ap = 0;      // AHB-AP
[00:46:15.889]              // -> [__ap <= 0x00000000]
[00:46:15.889]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[00:46:15.890]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[00:46:15.890]              // -> [ROMTableBase <= 0xE00FD000]
[00:46:15.890]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[00:46:15.891]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[00:46:15.891]              // -> [pidr1 <= 0x00000004]
[00:46:15.891]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[00:46:15.892]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[00:46:15.892]              // -> [pidr2 <= 0x0000001A]
[00:46:15.892]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[00:46:15.892]              // -> [jep106id <= 0x00000020]
[00:46:15.892]          </block>
[00:46:15.892]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[00:46:15.892]            // if-block "jep106id != 0x20"
[00:46:15.892]              // =>  FALSE
[00:46:15.893]            // skip if-block "jep106id != 0x20"
[00:46:15.893]          </control>
[00:46:15.893]        </sequence>
[00:46:15.893]    </block>
[00:46:15.893]  </sequence>
[00:46:15.893]  
[00:46:15.908]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[00:46:15.908]  
[00:46:15.908]  <debugvars>
[00:46:15.908]    // Pre-defined
[00:46:15.908]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:46:15.909]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[00:46:15.909]    __dp=0x00000000
[00:46:15.909]    __ap=0x00000000
[00:46:15.909]    __traceout=0x00000001      (SWO Trace)
[00:46:15.909]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:46:15.910]    __FlashAddr=0x00000000
[00:46:15.910]    __FlashLen=0x00000000
[00:46:15.910]    __FlashArg=0x00000000
[00:46:15.910]    __FlashOp=0x00000000
[00:46:15.910]    __Result=0x00000000
[00:46:15.911]    
[00:46:15.911]    // User-defined
[00:46:15.911]    DbgMCU_CR=0x00000007
[00:46:15.911]    DbgMCU_APB1_Fz=0x00000000
[00:46:15.911]    DbgMCU_APB2_Fz=0x00000000
[00:46:15.911]    TraceClk_Pin=0x00040002
[00:46:15.912]    TraceD0_Pin=0x00040003
[00:46:15.912]    TraceD1_Pin=0x00040004
[00:46:15.912]    TraceD2_Pin=0x00040005
[00:46:15.912]    TraceD3_Pin=0x00040006
[00:46:15.912]  </debugvars>
[00:46:15.913]  
[00:46:15.913]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[00:46:15.913]    <block atomic="false" info="">
[00:46:15.913]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[00:46:15.914]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:15.914]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[00:46:15.915]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:15.915]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[00:46:15.915]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:15.916]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[00:46:15.916]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:15.916]    </block>
[00:46:15.917]  </sequence>
[00:46:15.917]  
[00:46:47.815]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:46:47.815]  
[00:46:47.816]  <debugvars>
[00:46:47.816]    // Pre-defined
[00:46:47.816]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:46:47.816]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[00:46:47.816]    __dp=0x00000000
[00:46:47.817]    __ap=0x00000000
[00:46:47.817]    __traceout=0x00000001      (SWO Trace)
[00:46:47.817]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:46:47.817]    __FlashAddr=0x00000000
[00:46:47.817]    __FlashLen=0x00000000
[00:46:47.818]    __FlashArg=0x00000000
[00:46:47.818]    __FlashOp=0x00000000
[00:46:47.818]    __Result=0x00000000
[00:46:47.818]    
[00:46:47.818]    // User-defined
[00:46:47.818]    DbgMCU_CR=0x00000007
[00:46:47.818]    DbgMCU_APB1_Fz=0x00000000
[00:46:47.819]    DbgMCU_APB2_Fz=0x00000000
[00:46:47.819]    TraceClk_Pin=0x00040002
[00:46:47.819]    TraceD0_Pin=0x00040003
[00:46:47.819]    TraceD1_Pin=0x00040004
[00:46:47.819]    TraceD2_Pin=0x00040005
[00:46:47.819]    TraceD3_Pin=0x00040006
[00:46:47.820]  </debugvars>
[00:46:47.820]  
[00:46:47.820]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:46:47.820]    <block atomic="false" info="">
[00:46:47.820]      Sequence("CheckID");
[00:46:47.820]        <sequence name="CheckID" Pname="" disable="false" info="">
[00:46:47.820]          <block atomic="false" info="">
[00:46:47.821]            __var pidr1 = 0;
[00:46:47.821]              // -> [pidr1 <= 0x00000000]
[00:46:47.821]            __var pidr2 = 0;
[00:46:47.821]              // -> [pidr2 <= 0x00000000]
[00:46:47.821]            __var jep106id = 0;
[00:46:47.822]              // -> [jep106id <= 0x00000000]
[00:46:47.822]            __var ROMTableBase = 0;
[00:46:47.822]              // -> [ROMTableBase <= 0x00000000]
[00:46:47.822]            __ap = 0;      // AHB-AP
[00:46:47.822]              // -> [__ap <= 0x00000000]
[00:46:47.822]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[00:46:47.823]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.823]              // -> [ROMTableBase <= 0xE00FD000]
[00:46:47.823]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[00:46:47.824]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.824]              // -> [pidr1 <= 0x00000004]
[00:46:47.824]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[00:46:47.824]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.825]              // -> [pidr2 <= 0x0000001A]
[00:46:47.825]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[00:46:47.825]              // -> [jep106id <= 0x00000020]
[00:46:47.825]          </block>
[00:46:47.825]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[00:46:47.825]            // if-block "jep106id != 0x20"
[00:46:47.826]              // =>  FALSE
[00:46:47.826]            // skip if-block "jep106id != 0x20"
[00:46:47.826]          </control>
[00:46:47.826]        </sequence>
[00:46:47.826]    </block>
[00:46:47.826]  </sequence>
[00:46:47.826]  
[00:46:47.840]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[00:46:47.840]  
[00:46:47.841]  <debugvars>
[00:46:47.841]    // Pre-defined
[00:46:47.841]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:46:47.841]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[00:46:47.841]    __dp=0x00000000
[00:46:47.842]    __ap=0x00000000
[00:46:47.842]    __traceout=0x00000001      (SWO Trace)
[00:46:47.842]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:46:47.842]    __FlashAddr=0x00000000
[00:46:47.842]    __FlashLen=0x00000000
[00:46:47.842]    __FlashArg=0x00000000
[00:46:47.843]    __FlashOp=0x00000000
[00:46:47.843]    __Result=0x00000000
[00:46:47.843]    
[00:46:47.843]    // User-defined
[00:46:47.843]    DbgMCU_CR=0x00000007
[00:46:47.843]    DbgMCU_APB1_Fz=0x00000000
[00:46:47.843]    DbgMCU_APB2_Fz=0x00000000
[00:46:47.844]    TraceClk_Pin=0x00040002
[00:46:47.844]    TraceD0_Pin=0x00040003
[00:46:47.844]    TraceD1_Pin=0x00040004
[00:46:47.844]    TraceD2_Pin=0x00040005
[00:46:47.844]    TraceD3_Pin=0x00040006
[00:46:47.845]  </debugvars>
[00:46:47.845]  
[00:46:47.845]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[00:46:47.845]    <block atomic="false" info="">
[00:46:47.845]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[00:46:47.846]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.846]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[00:46:47.847]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.847]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[00:46:47.847]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.847]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[00:46:47.848]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.848]    </block>
[00:46:47.848]  </sequence>
[00:46:47.848]  
[00:46:47.865]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[00:46:47.865]  
[00:46:47.865]  <debugvars>
[00:46:47.865]    // Pre-defined
[00:46:47.865]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:46:47.865]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[00:46:47.865]    __dp=0x00000000
[00:46:47.866]    __ap=0x00000000
[00:46:47.866]    __traceout=0x00000001      (SWO Trace)
[00:46:47.866]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:46:47.866]    __FlashAddr=0x00000000
[00:46:47.866]    __FlashLen=0x00000000
[00:46:47.867]    __FlashArg=0x00000000
[00:46:47.867]    __FlashOp=0x00000000
[00:46:47.867]    __Result=0x00000000
[00:46:47.867]    
[00:46:47.867]    // User-defined
[00:46:47.867]    DbgMCU_CR=0x00000007
[00:46:47.867]    DbgMCU_APB1_Fz=0x00000000
[00:46:47.867]    DbgMCU_APB2_Fz=0x00000000
[00:46:47.868]    TraceClk_Pin=0x00040002
[00:46:47.868]    TraceD0_Pin=0x00040003
[00:46:47.868]    TraceD1_Pin=0x00040004
[00:46:47.868]    TraceD2_Pin=0x00040005
[00:46:47.868]    TraceD3_Pin=0x00040006
[00:46:47.868]  </debugvars>
[00:46:47.868]  
[00:46:47.868]  <sequence name="TraceStart" Pname="" disable="false" info="">
[00:46:47.869]    <block atomic="false" info="">
[00:46:47.869]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[00:46:47.869]        // -> [traceSWO <= 0x00000001]
[00:46:47.869]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[00:46:47.869]        // -> [traceTPIU <= 0x00000000]
[00:46:47.869]    </block>
[00:46:47.870]    <control if="traceSWO" while="" timeout="0" info="">
[00:46:47.870]      // if-block "traceSWO"
[00:46:47.870]        // =>  TRUE
[00:46:47.870]      <block atomic="false" info="">
[00:46:47.870]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[00:46:47.870]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[00:46:47.870]            <block atomic="false" info="">
[00:46:47.871]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[00:46:47.871]                // -> [dbgmcu_val <= 0x00000000]
[00:46:47.871]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[00:46:47.871]                // -> [dbgmcu_trace_val <= 0x00000000]
[00:46:47.871]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[00:46:47.872]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.872]                // -> [dbgmcu_val <= 0x00000007]
[00:46:47.872]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[00:46:47.872]                // -> [dbgmcu_trace_val <= 0x00000020]
[00:46:47.872]              Sequence("ConfigureTraceSWOPin");
[00:46:47.872]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[00:46:47.873]                  <block atomic="false" info="">
[00:46:47.873]                    __var pin     = 0;
[00:46:47.873]                      // -> [pin <= 0x00000000]
[00:46:47.873]                    __var port    = 0;
[00:46:47.873]                      // -> [port <= 0x00000000]
[00:46:47.873]                    __var portAdr = 0;
[00:46:47.873]                      // -> [portAdr <= 0x00000000]
[00:46:47.873]                    __var pos     = 0;
[00:46:47.874]                      // -> [pos <= 0x00000000]
[00:46:47.874]                    __var SWO_Pin = 0x00010003;          // PB3
[00:46:47.874]                      // -> [SWO_Pin <= 0x00010003]
[00:46:47.874]                  </block>
[00:46:47.874]                  <block atomic="false" info="configure SWO">
[00:46:47.874]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[00:46:47.874]                      // -> [pin <= 0x00000003]
[00:46:47.874]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[00:46:47.875]                      // -> [port <= 0x00000001]
[00:46:47.875]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[00:46:47.875]                      // -> [portAdr <= 0x40020400]
[00:46:47.875]                    pos = pin * 2;
[00:46:47.875]                      // -> [pos <= 0x00000006]
[00:46:47.875]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[00:46:47.876]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.876]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.876]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[00:46:47.877]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.877]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.877]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[00:46:47.878]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.878]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.878]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[00:46:47.879]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.879]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.879]                  </block>
[00:46:47.879]                  <control if="pin <  8" while="" timeout="0" info="">
[00:46:47.879]                    // if-block "pin <  8"
[00:46:47.880]                      // =>  TRUE
[00:46:47.880]                    <block atomic="false" info="">
[00:46:47.880]                      pos = ((pin    ) & 7) * 4;
[00:46:47.880]                        // -> [pos <= 0x0000000C]
[00:46:47.880]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[00:46:47.880]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.881]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.881]                    </block>
[00:46:47.881]                    // end if-block "pin <  8"
[00:46:47.881]                  </control>
[00:46:47.881]                  <control if="pin >= 8" while="" timeout="0" info="">
[00:46:47.881]                    // if-block "pin >= 8"
[00:46:47.882]                      // =>  FALSE
[00:46:47.882]                    // skip if-block "pin >= 8"
[00:46:47.882]                  </control>
[00:46:47.882]                </sequence>
[00:46:47.882]            </block>
[00:46:47.882]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[00:46:47.882]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[00:46:47.883]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.883]            </block>
[00:46:47.883]          </sequence>
[00:46:47.883]      </block>
[00:46:47.883]      // end if-block "traceSWO"
[00:46:47.883]    </control>
[00:46:47.883]    <control if="traceTPIU" while="" timeout="0" info="">
[00:46:47.883]      // if-block "traceTPIU"
[00:46:47.884]        // =>  FALSE
[00:46:47.884]      // skip if-block "traceTPIU"
[00:46:47.884]    </control>
[00:46:47.884]  </sequence>
[00:46:47.884]  
[00:46:47.888]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[00:46:47.888]  
[00:46:47.888]  <debugvars>
[00:46:47.888]    // Pre-defined
[00:46:47.888]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:46:47.888]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[00:46:47.889]    __dp=0x00000000
[00:46:47.889]    __ap=0x00000000
[00:46:47.889]    __traceout=0x00000001      (SWO Trace)
[00:46:47.889]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:46:47.889]    __FlashAddr=0x00000000
[00:46:47.889]    __FlashLen=0x00000000
[00:46:47.890]    __FlashArg=0x00000000
[00:46:47.890]    __FlashOp=0x00000000
[00:46:47.890]    __Result=0x00000000
[00:46:47.890]    
[00:46:47.890]    // User-defined
[00:46:47.890]    DbgMCU_CR=0x00000007
[00:46:47.890]    DbgMCU_APB1_Fz=0x00000000
[00:46:47.891]    DbgMCU_APB2_Fz=0x00000000
[00:46:47.891]    TraceClk_Pin=0x00040002
[00:46:47.891]    TraceD0_Pin=0x00040003
[00:46:47.891]    TraceD1_Pin=0x00040004
[00:46:47.891]    TraceD2_Pin=0x00040005
[00:46:47.891]    TraceD3_Pin=0x00040006
[00:46:47.891]  </debugvars>
[00:46:47.891]  
[00:46:47.892]  <sequence name="TraceStart" Pname="" disable="false" info="">
[00:46:47.892]    <block atomic="false" info="">
[00:46:47.892]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[00:46:47.892]        // -> [traceSWO <= 0x00000001]
[00:46:47.892]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[00:46:47.892]        // -> [traceTPIU <= 0x00000000]
[00:46:47.892]    </block>
[00:46:47.893]    <control if="traceSWO" while="" timeout="0" info="">
[00:46:47.893]      // if-block "traceSWO"
[00:46:47.893]        // =>  TRUE
[00:46:47.893]      <block atomic="false" info="">
[00:46:47.893]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[00:46:47.893]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[00:46:47.893]            <block atomic="false" info="">
[00:46:47.893]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[00:46:47.894]                // -> [dbgmcu_val <= 0x00000000]
[00:46:47.894]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[00:46:47.894]                // -> [dbgmcu_trace_val <= 0x00000000]
[00:46:47.894]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[00:46:47.894]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.894]                // -> [dbgmcu_val <= 0x00000007]
[00:46:47.895]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[00:46:47.895]                // -> [dbgmcu_trace_val <= 0x00000020]
[00:46:47.895]              Sequence("ConfigureTraceSWOPin");
[00:46:47.895]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[00:46:47.895]                  <block atomic="false" info="">
[00:46:47.895]                    __var pin     = 0;
[00:46:47.895]                      // -> [pin <= 0x00000000]
[00:46:47.895]                    __var port    = 0;
[00:46:47.895]                      // -> [port <= 0x00000000]
[00:46:47.895]                    __var portAdr = 0;
[00:46:47.896]                      // -> [portAdr <= 0x00000000]
[00:46:47.896]                    __var pos     = 0;
[00:46:47.896]                      // -> [pos <= 0x00000000]
[00:46:47.896]                    __var SWO_Pin = 0x00010003;          // PB3
[00:46:47.896]                      // -> [SWO_Pin <= 0x00010003]
[00:46:47.896]                  </block>
[00:46:47.896]                  <block atomic="false" info="configure SWO">
[00:46:47.897]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[00:46:47.897]                      // -> [pin <= 0x00000003]
[00:46:47.897]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[00:46:47.897]                      // -> [port <= 0x00000001]
[00:46:47.897]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[00:46:47.897]                      // -> [portAdr <= 0x40020400]
[00:46:47.897]                    pos = pin * 2;
[00:46:47.897]                      // -> [pos <= 0x00000006]
[00:46:47.897]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[00:46:47.898]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.898]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.899]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[00:46:47.899]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.899]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.899]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[00:46:47.900]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.900]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.900]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[00:46:47.901]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.901]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.901]                  </block>
[00:46:47.902]                  <control if="pin <  8" while="" timeout="0" info="">
[00:46:47.902]                    // if-block "pin <  8"
[00:46:47.902]                      // =>  TRUE
[00:46:47.902]                    <block atomic="false" info="">
[00:46:47.902]                      pos = ((pin    ) & 7) * 4;
[00:46:47.902]                        // -> [pos <= 0x0000000C]
[00:46:47.902]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[00:46:47.903]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.903]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.903]                    </block>
[00:46:47.903]                    // end if-block "pin <  8"
[00:46:47.903]                  </control>
[00:46:47.904]                  <control if="pin >= 8" while="" timeout="0" info="">
[00:46:47.904]                    // if-block "pin >= 8"
[00:46:47.904]                      // =>  FALSE
[00:46:47.904]                    // skip if-block "pin >= 8"
[00:46:47.904]                  </control>
[00:46:47.905]                </sequence>
[00:46:47.905]            </block>
[00:46:47.905]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[00:46:47.905]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[00:46:47.905]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:47.905]            </block>
[00:46:47.906]          </sequence>
[00:46:47.906]      </block>
[00:46:47.906]      // end if-block "traceSWO"
[00:46:47.906]    </control>
[00:46:47.906]    <control if="traceTPIU" while="" timeout="0" info="">
[00:46:47.906]      // if-block "traceTPIU"
[00:46:47.906]        // =>  FALSE
[00:46:47.906]      // skip if-block "traceTPIU"
[00:46:47.907]    </control>
[00:46:47.907]  </sequence>
[00:46:47.907]  
[00:46:48.130]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[00:46:48.130]  
[00:46:48.130]  <debugvars>
[00:46:48.131]    // Pre-defined
[00:46:48.132]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:46:48.132]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[00:46:48.133]    __dp=0x00000000
[00:46:48.133]    __ap=0x00000000
[00:46:48.134]    __traceout=0x00000001      (SWO Trace)
[00:46:48.135]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:46:48.135]    __FlashAddr=0x00000000
[00:46:48.136]    __FlashLen=0x00000000
[00:46:48.136]    __FlashArg=0x00000000
[00:46:48.137]    __FlashOp=0x00000000
[00:46:48.137]    __Result=0x00000000
[00:46:48.138]    
[00:46:48.138]    // User-defined
[00:46:48.139]    DbgMCU_CR=0x00000007
[00:46:48.139]    DbgMCU_APB1_Fz=0x00000000
[00:46:48.139]    DbgMCU_APB2_Fz=0x00000000
[00:46:48.140]    TraceClk_Pin=0x00040002
[00:46:48.140]    TraceD0_Pin=0x00040003
[00:46:48.140]    TraceD1_Pin=0x00040004
[00:46:48.142]    TraceD2_Pin=0x00040005
[00:46:48.142]    TraceD3_Pin=0x00040006
[00:46:48.143]  </debugvars>
[00:46:48.143]  
[00:46:48.143]  <sequence name="TraceStart" Pname="" disable="false" info="">
[00:46:48.143]    <block atomic="false" info="">
[00:46:48.143]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[00:46:48.143]        // -> [traceSWO <= 0x00000001]
[00:46:48.144]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[00:46:48.144]        // -> [traceTPIU <= 0x00000000]
[00:46:48.144]    </block>
[00:46:48.144]    <control if="traceSWO" while="" timeout="0" info="">
[00:46:48.144]      // if-block "traceSWO"
[00:46:48.144]        // =>  TRUE
[00:46:48.145]      <block atomic="false" info="">
[00:46:48.145]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[00:46:48.145]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[00:46:48.145]            <block atomic="false" info="">
[00:46:48.145]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[00:46:48.146]                // -> [dbgmcu_val <= 0x00000000]
[00:46:48.146]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[00:46:48.146]                // -> [dbgmcu_trace_val <= 0x00000000]
[00:46:48.146]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[00:46:48.146]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[00:46:48.147]                // -> [dbgmcu_val <= 0x00000007]
[00:46:48.147]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[00:46:48.147]                // -> [dbgmcu_trace_val <= 0x00000020]
[00:46:48.147]              Sequence("ConfigureTraceSWOPin");
[00:46:48.147]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[00:46:48.148]                  <block atomic="false" info="">
[00:46:48.148]                    __var pin     = 0;
[00:46:48.148]                      // -> [pin <= 0x00000000]
[00:46:48.148]                    __var port    = 0;
[00:46:48.148]                      // -> [port <= 0x00000000]
[00:46:48.148]                    __var portAdr = 0;
[00:46:48.148]                      // -> [portAdr <= 0x00000000]
[00:46:48.149]                    __var pos     = 0;
[00:46:48.149]                      // -> [pos <= 0x00000000]
[00:46:48.149]                    __var SWO_Pin = 0x00010003;          // PB3
[00:46:48.149]                      // -> [SWO_Pin <= 0x00010003]
[00:46:48.149]                  </block>
[00:46:48.149]                  <block atomic="false" info="configure SWO">
[00:46:48.149]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[00:46:48.149]                      // -> [pin <= 0x00000003]
[00:46:48.150]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[00:46:48.150]                      // -> [port <= 0x00000001]
[00:46:48.150]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[00:46:48.150]                      // -> [portAdr <= 0x40020400]
[00:46:48.150]                    pos = pin * 2;
[00:46:48.150]                      // -> [pos <= 0x00000006]
[00:46:48.150]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[00:46:48.150]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[00:46:48.151]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:48.151]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[00:46:48.151]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[00:46:48.152]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:48.152]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[00:46:48.152]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[00:46:48.153]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:48.153]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[00:46:48.153]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[00:46:48.154]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:48.154]                  </block>
[00:46:48.154]                  <control if="pin <  8" while="" timeout="0" info="">
[00:46:48.154]                    // if-block "pin <  8"
[00:46:48.154]                      // =>  TRUE
[00:46:48.154]                    <block atomic="false" info="">
[00:46:48.155]                      pos = ((pin    ) & 7) * 4;
[00:46:48.155]                        // -> [pos <= 0x0000000C]
[00:46:48.155]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[00:46:48.155]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[00:46:48.156]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:48.156]                    </block>
[00:46:48.156]                    // end if-block "pin <  8"
[00:46:48.156]                  </control>
[00:46:48.156]                  <control if="pin >= 8" while="" timeout="0" info="">
[00:46:48.156]                    // if-block "pin >= 8"
[00:46:48.157]                      // =>  FALSE
[00:46:48.157]                    // skip if-block "pin >= 8"
[00:46:48.157]                  </control>
[00:46:48.157]                </sequence>
[00:46:48.157]            </block>
[00:46:48.157]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[00:46:48.157]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[00:46:48.158]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[00:46:48.158]            </block>
[00:46:48.158]          </sequence>
[00:46:48.158]      </block>
[00:46:48.159]      // end if-block "traceSWO"
[00:46:48.159]    </control>
[00:46:48.159]    <control if="traceTPIU" while="" timeout="0" info="">
[00:46:48.160]      // if-block "traceTPIU"
[00:46:48.160]        // =>  FALSE
[00:46:48.160]      // skip if-block "traceTPIU"
[00:46:48.160]    </control>
[00:46:48.160]  </sequence>
[00:46:48.160]  
[00:47:20.208]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[00:47:20.208]  
[00:47:20.208]  <debugvars>
[00:47:20.209]    // Pre-defined
[00:47:20.209]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:47:20.209]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[00:47:20.209]    __dp=0x00000000
[00:47:20.209]    __ap=0x00000000
[00:47:20.209]    __traceout=0x00000001      (SWO Trace)
[00:47:20.210]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:47:20.210]    __FlashAddr=0x00000000
[00:47:20.210]    __FlashLen=0x00000000
[00:47:20.210]    __FlashArg=0x00000000
[00:47:20.210]    __FlashOp=0x00000000
[00:47:20.211]    __Result=0x00000000
[00:47:20.211]    
[00:47:20.211]    // User-defined
[00:47:20.211]    DbgMCU_CR=0x00000007
[00:47:20.211]    DbgMCU_APB1_Fz=0x00000000
[00:47:20.211]    DbgMCU_APB2_Fz=0x00000000
[00:47:20.212]    TraceClk_Pin=0x00040002
[00:47:20.212]    TraceD0_Pin=0x00040003
[00:47:20.212]    TraceD1_Pin=0x00040004
[00:47:20.212]    TraceD2_Pin=0x00040005
[00:47:20.212]    TraceD3_Pin=0x00040006
[00:47:20.213]  </debugvars>
[00:47:20.213]  
[00:47:20.213]  <sequence name="TraceStart" Pname="" disable="false" info="">
[00:47:20.213]    <block atomic="false" info="">
[00:47:20.214]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[00:47:20.214]        // -> [traceSWO <= 0x00000001]
[00:47:20.214]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[00:47:20.214]        // -> [traceTPIU <= 0x00000000]
[00:47:20.214]    </block>
[00:47:20.214]    <control if="traceSWO" while="" timeout="0" info="">
[00:47:20.215]      // if-block "traceSWO"
[00:47:20.215]        // =>  TRUE
[00:47:20.215]      <block atomic="false" info="">
[00:47:20.215]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[00:47:20.215]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[00:47:20.216]            <block atomic="false" info="">
[00:47:20.216]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[00:47:20.216]                // -> [dbgmcu_val <= 0x00000000]
[00:47:20.216]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[00:47:20.216]                // -> [dbgmcu_trace_val <= 0x00000000]
[00:47:20.216]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[00:47:20.217]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[00:47:20.217]                // -> [dbgmcu_val <= 0x00000007]
[00:47:20.217]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[00:47:20.218]                // -> [dbgmcu_trace_val <= 0x00000020]
[00:47:20.218]              Sequence("ConfigureTraceSWOPin");
[00:47:20.218]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[00:47:20.218]                  <block atomic="false" info="">
[00:47:20.218]                    __var pin     = 0;
[00:47:20.218]                      // -> [pin <= 0x00000000]
[00:47:20.218]                    __var port    = 0;
[00:47:20.219]                      // -> [port <= 0x00000000]
[00:47:20.219]                    __var portAdr = 0;
[00:47:20.219]                      // -> [portAdr <= 0x00000000]
[00:47:20.219]                    __var pos     = 0;
[00:47:20.219]                      // -> [pos <= 0x00000000]
[00:47:20.219]                    __var SWO_Pin = 0x00010003;          // PB3
[00:47:20.219]                      // -> [SWO_Pin <= 0x00010003]
[00:47:20.220]                  </block>
[00:47:20.220]                  <block atomic="false" info="configure SWO">
[00:47:20.220]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[00:47:20.220]                      // -> [pin <= 0x00000003]
[00:47:20.220]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[00:47:20.220]                      // -> [port <= 0x00000001]
[00:47:20.220]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[00:47:20.221]                      // -> [portAdr <= 0x40020400]
[00:47:20.221]                    pos = pin * 2;
[00:47:20.221]                      // -> [pos <= 0x00000006]
[00:47:20.221]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[00:47:20.221]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[00:47:20.222]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[00:47:20.222]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[00:47:20.222]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[00:47:20.223]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[00:47:20.223]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[00:47:20.223]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[00:47:20.224]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[00:47:20.224]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[00:47:20.225]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[00:47:20.225]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[00:47:20.225]                  </block>
[00:47:20.225]                  <control if="pin <  8" while="" timeout="0" info="">
[00:47:20.225]                    // if-block "pin <  8"
[00:47:20.226]                      // =>  TRUE
[00:47:20.226]                    <block atomic="false" info="">
[00:47:20.226]                      pos = ((pin    ) & 7) * 4;
[00:47:20.226]                        // -> [pos <= 0x0000000C]
[00:47:20.226]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[00:47:20.226]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[00:47:20.227]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[00:47:20.227]                    </block>
[00:47:20.227]                    // end if-block "pin <  8"
[00:47:20.227]                  </control>
[00:47:20.228]                  <control if="pin >= 8" while="" timeout="0" info="">
[00:47:20.228]                    // if-block "pin >= 8"
[00:47:20.228]                      // =>  FALSE
[00:47:20.228]                    // skip if-block "pin >= 8"
[00:47:20.228]                  </control>
[00:47:20.228]                </sequence>
[00:47:20.228]            </block>
[00:47:20.228]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[00:47:20.228]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[00:47:20.229]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[00:47:20.229]            </block>
[00:47:20.229]          </sequence>
[00:47:20.229]      </block>
[00:47:20.229]      // end if-block "traceSWO"
[00:47:20.230]    </control>
[00:47:20.230]    <control if="traceTPIU" while="" timeout="0" info="">
[00:47:20.230]      // if-block "traceTPIU"
[00:47:20.230]        // =>  FALSE
[00:47:20.230]      // skip if-block "traceTPIU"
[00:47:20.230]    </control>
[00:47:20.230]  </sequence>
[00:47:20.230]  
[00:47:22.600]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[00:47:22.600]  
[00:47:22.600]  <debugvars>
[00:47:22.601]    // Pre-defined
[00:47:22.601]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:47:22.601]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[00:47:22.601]    __dp=0x00000000
[00:47:22.602]    __ap=0x00000000
[00:47:22.602]    __traceout=0x00000001      (SWO Trace)
[00:47:22.602]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:47:22.602]    __FlashAddr=0x00000000
[00:47:22.602]    __FlashLen=0x00000000
[00:47:22.602]    __FlashArg=0x00000000
[00:47:22.603]    __FlashOp=0x00000000
[00:47:22.603]    __Result=0x00000000
[00:47:22.603]    
[00:47:22.603]    // User-defined
[00:47:22.603]    DbgMCU_CR=0x00000007
[00:47:22.603]    DbgMCU_APB1_Fz=0x00000000
[00:47:22.603]    DbgMCU_APB2_Fz=0x00000000
[00:47:22.604]    TraceClk_Pin=0x00040002
[00:47:22.604]    TraceD0_Pin=0x00040003
[00:47:22.604]    TraceD1_Pin=0x00040004
[00:47:22.604]    TraceD2_Pin=0x00040005
[00:47:22.604]    TraceD3_Pin=0x00040006
[00:47:22.604]  </debugvars>
[00:47:22.604]  
[00:47:22.605]  <sequence name="TraceStop" Pname="" disable="false" info="">
[00:47:22.605]    <block atomic="false" info="">
[00:47:22.605]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[00:47:22.605]        // -> [traceSWO <= 0x00000001]
[00:47:22.605]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[00:47:22.605]        // -> [traceTPIU <= 0x00000000]
[00:47:22.606]    </block>
[00:47:22.606]    <control if="traceSWO" while="" timeout="0" info="">
[00:47:22.606]      // if-block "traceSWO"
[00:47:22.606]        // =>  TRUE
[00:47:22.606]      <block atomic="false" info="">
[00:47:22.606]        Sequence("DisableTraceSWO");
[00:47:22.606]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[00:47:22.606]            <block atomic="false" info="">
[00:47:22.607]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[00:47:22.607]                // -> [dbgmcu_val <= 0x00000000]
[00:47:22.607]            </block>
[00:47:22.607]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[00:47:22.607]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[00:47:22.608]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[00:47:22.608]                // -> [dbgmcu_val <= 0x00000007]
[00:47:22.608]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[00:47:22.609]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[00:47:22.609]            </block>
[00:47:22.609]          </sequence>
[00:47:22.609]      </block>
[00:47:22.609]      // end if-block "traceSWO"
[00:47:22.609]    </control>
[00:47:22.609]    <control if="traceTPIU" while="" timeout="0" info="">
[00:47:22.609]      // if-block "traceTPIU"
[00:47:22.610]        // =>  FALSE
[00:47:22.610]      // skip if-block "traceTPIU"
[00:47:22.610]    </control>
[00:47:22.610]  </sequence>
[00:47:22.610]  
[00:49:04.828]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:49:04.828]  
[00:49:04.828]  <debugvars>
[00:49:04.828]    // Pre-defined
[00:49:04.828]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:04.828]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[00:49:04.829]    __dp=0x00000000
[00:49:04.829]    __ap=0x00000000
[00:49:04.829]    __traceout=0x00000001      (SWO Trace)
[00:49:04.829]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:04.829]    __FlashAddr=0x00000000
[00:49:04.830]    __FlashLen=0x00000000
[00:49:04.830]    __FlashArg=0x00000000
[00:49:04.830]    __FlashOp=0x00000000
[00:49:04.830]    __Result=0x00000000
[00:49:04.830]    
[00:49:04.830]    // User-defined
[00:49:04.830]    DbgMCU_CR=0x00000007
[00:49:04.831]    DbgMCU_APB1_Fz=0x00000000
[00:49:04.831]    DbgMCU_APB2_Fz=0x00000000
[00:49:04.831]    TraceClk_Pin=0x00040002
[00:49:04.831]    TraceD0_Pin=0x00040003
[00:49:04.831]    TraceD1_Pin=0x00040004
[00:49:04.832]    TraceD2_Pin=0x00040005
[00:49:04.832]    TraceD3_Pin=0x00040006
[00:49:04.832]  </debugvars>
[00:49:04.832]  
[00:49:04.832]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:49:04.833]    <block atomic="false" info="">
[00:49:04.833]      Sequence("CheckID");
[00:49:04.833]        <sequence name="CheckID" Pname="" disable="false" info="">
[00:49:04.833]          <block atomic="false" info="">
[00:49:04.833]            __var pidr1 = 0;
[00:49:04.833]              // -> [pidr1 <= 0x00000000]
[00:49:04.834]            __var pidr2 = 0;
[00:49:04.834]              // -> [pidr2 <= 0x00000000]
[00:49:04.834]            __var jep106id = 0;
[00:49:04.834]              // -> [jep106id <= 0x00000000]
[00:49:04.834]            __var ROMTableBase = 0;
[00:49:04.834]              // -> [ROMTableBase <= 0x00000000]
[00:49:04.834]            __ap = 0;      // AHB-AP
[00:49:04.835]              // -> [__ap <= 0x00000000]
[00:49:04.835]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[00:49:04.835]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[00:49:04.835]              // -> [ROMTableBase <= 0xE00FD000]
[00:49:04.835]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[00:49:04.836]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[00:49:04.836]              // -> [pidr1 <= 0x00000004]
[00:49:04.836]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[00:49:04.837]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[00:49:04.837]              // -> [pidr2 <= 0x0000001A]
[00:49:04.837]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[00:49:04.837]              // -> [jep106id <= 0x00000020]
[00:49:04.837]          </block>
[00:49:04.837]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[00:49:04.838]            // if-block "jep106id != 0x20"
[00:49:04.838]              // =>  FALSE
[00:49:04.838]            // skip if-block "jep106id != 0x20"
[00:49:04.838]          </control>
[00:49:04.838]        </sequence>
[00:49:04.838]    </block>
[00:49:04.838]  </sequence>
[00:49:04.838]  
[00:49:04.853]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[00:49:04.853]  
[00:49:04.854]  <debugvars>
[00:49:04.854]    // Pre-defined
[00:49:04.854]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:04.854]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[00:49:04.854]    __dp=0x00000000
[00:49:04.854]    __ap=0x00000000
[00:49:04.855]    __traceout=0x00000001      (SWO Trace)
[00:49:04.855]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:04.855]    __FlashAddr=0x00000000
[00:49:04.855]    __FlashLen=0x00000000
[00:49:04.855]    __FlashArg=0x00000000
[00:49:04.856]    __FlashOp=0x00000000
[00:49:04.856]    __Result=0x00000000
[00:49:04.856]    
[00:49:04.856]    // User-defined
[00:49:04.856]    DbgMCU_CR=0x00000007
[00:49:04.856]    DbgMCU_APB1_Fz=0x00000000
[00:49:04.856]    DbgMCU_APB2_Fz=0x00000000
[00:49:04.857]    TraceClk_Pin=0x00040002
[00:49:04.857]    TraceD0_Pin=0x00040003
[00:49:04.857]    TraceD1_Pin=0x00040004
[00:49:04.857]    TraceD2_Pin=0x00040005
[00:49:04.857]    TraceD3_Pin=0x00040006
[00:49:04.857]  </debugvars>
[00:49:04.858]  
[00:49:04.858]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[00:49:04.858]    <block atomic="false" info="">
[00:49:04.858]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[00:49:04.858]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:04.859]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[00:49:04.859]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:04.859]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[00:49:04.860]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:04.860]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[00:49:04.861]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:04.861]    </block>
[00:49:04.861]  </sequence>
[00:49:04.861]  
[00:49:36.088]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:49:36.088]  
[00:49:36.088]  <debugvars>
[00:49:36.088]    // Pre-defined
[00:49:36.089]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:36.089]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[00:49:36.089]    __dp=0x00000000
[00:49:36.089]    __ap=0x00000000
[00:49:36.089]    __traceout=0x00000001      (SWO Trace)
[00:49:36.089]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:36.090]    __FlashAddr=0x00000000
[00:49:36.090]    __FlashLen=0x00000000
[00:49:36.090]    __FlashArg=0x00000000
[00:49:36.090]    __FlashOp=0x00000000
[00:49:36.090]    __Result=0x00000000
[00:49:36.090]    
[00:49:36.090]    // User-defined
[00:49:36.091]    DbgMCU_CR=0x00000007
[00:49:36.091]    DbgMCU_APB1_Fz=0x00000000
[00:49:36.091]    DbgMCU_APB2_Fz=0x00000000
[00:49:36.091]    TraceClk_Pin=0x00040002
[00:49:36.091]    TraceD0_Pin=0x00040003
[00:49:36.091]    TraceD1_Pin=0x00040004
[00:49:36.091]    TraceD2_Pin=0x00040005
[00:49:36.092]    TraceD3_Pin=0x00040006
[00:49:36.092]  </debugvars>
[00:49:36.092]  
[00:49:36.092]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:49:36.092]    <block atomic="false" info="">
[00:49:36.092]      Sequence("CheckID");
[00:49:36.092]        <sequence name="CheckID" Pname="" disable="false" info="">
[00:49:36.093]          <block atomic="false" info="">
[00:49:36.093]            __var pidr1 = 0;
[00:49:36.093]              // -> [pidr1 <= 0x00000000]
[00:49:36.093]            __var pidr2 = 0;
[00:49:36.093]              // -> [pidr2 <= 0x00000000]
[00:49:36.093]            __var jep106id = 0;
[00:49:36.093]              // -> [jep106id <= 0x00000000]
[00:49:36.094]            __var ROMTableBase = 0;
[00:49:36.094]              // -> [ROMTableBase <= 0x00000000]
[00:49:36.094]            __ap = 0;      // AHB-AP
[00:49:36.094]              // -> [__ap <= 0x00000000]
[00:49:36.094]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[00:49:36.095]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.095]              // -> [ROMTableBase <= 0xE00FD000]
[00:49:36.095]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[00:49:36.095]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.095]              // -> [pidr1 <= 0x00000004]
[00:49:36.096]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[00:49:36.096]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.096]              // -> [pidr2 <= 0x0000001A]
[00:49:36.096]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[00:49:36.096]              // -> [jep106id <= 0x00000020]
[00:49:36.096]          </block>
[00:49:36.097]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[00:49:36.097]            // if-block "jep106id != 0x20"
[00:49:36.097]              // =>  FALSE
[00:49:36.097]            // skip if-block "jep106id != 0x20"
[00:49:36.097]          </control>
[00:49:36.097]        </sequence>
[00:49:36.097]    </block>
[00:49:36.097]  </sequence>
[00:49:36.098]  
[00:49:36.112]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[00:49:36.112]  
[00:49:36.112]  <debugvars>
[00:49:36.112]    // Pre-defined
[00:49:36.112]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:36.112]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[00:49:36.113]    __dp=0x00000000
[00:49:36.113]    __ap=0x00000000
[00:49:36.113]    __traceout=0x00000001      (SWO Trace)
[00:49:36.113]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:36.113]    __FlashAddr=0x00000000
[00:49:36.113]    __FlashLen=0x00000000
[00:49:36.113]    __FlashArg=0x00000000
[00:49:36.113]    __FlashOp=0x00000000
[00:49:36.114]    __Result=0x00000000
[00:49:36.114]    
[00:49:36.114]    // User-defined
[00:49:36.114]    DbgMCU_CR=0x00000007
[00:49:36.114]    DbgMCU_APB1_Fz=0x00000000
[00:49:36.114]    DbgMCU_APB2_Fz=0x00000000
[00:49:36.114]    TraceClk_Pin=0x00040002
[00:49:36.114]    TraceD0_Pin=0x00040003
[00:49:36.115]    TraceD1_Pin=0x00040004
[00:49:36.115]    TraceD2_Pin=0x00040005
[00:49:36.115]    TraceD3_Pin=0x00040006
[00:49:36.115]  </debugvars>
[00:49:36.115]  
[00:49:36.115]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[00:49:36.115]    <block atomic="false" info="">
[00:49:36.115]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[00:49:36.116]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.116]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[00:49:36.117]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.117]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[00:49:36.117]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.117]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[00:49:36.118]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.118]    </block>
[00:49:36.118]  </sequence>
[00:49:36.118]  
[00:49:36.134]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[00:49:36.134]  
[00:49:36.134]  <debugvars>
[00:49:36.134]    // Pre-defined
[00:49:36.134]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:36.134]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[00:49:36.135]    __dp=0x00000000
[00:49:36.135]    __ap=0x00000000
[00:49:36.135]    __traceout=0x00000001      (SWO Trace)
[00:49:36.135]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:36.135]    __FlashAddr=0x00000000
[00:49:36.135]    __FlashLen=0x00000000
[00:49:36.135]    __FlashArg=0x00000000
[00:49:36.136]    __FlashOp=0x00000000
[00:49:36.136]    __Result=0x00000000
[00:49:36.136]    
[00:49:36.136]    // User-defined
[00:49:36.136]    DbgMCU_CR=0x00000007
[00:49:36.136]    DbgMCU_APB1_Fz=0x00000000
[00:49:36.136]    DbgMCU_APB2_Fz=0x00000000
[00:49:36.136]    TraceClk_Pin=0x00040002
[00:49:36.136]    TraceD0_Pin=0x00040003
[00:49:36.137]    TraceD1_Pin=0x00040004
[00:49:36.137]    TraceD2_Pin=0x00040005
[00:49:36.137]    TraceD3_Pin=0x00040006
[00:49:36.137]  </debugvars>
[00:49:36.137]  
[00:49:36.137]  <sequence name="TraceStart" Pname="" disable="false" info="">
[00:49:36.137]    <block atomic="false" info="">
[00:49:36.137]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[00:49:36.138]        // -> [traceSWO <= 0x00000001]
[00:49:36.138]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[00:49:36.138]        // -> [traceTPIU <= 0x00000000]
[00:49:36.138]    </block>
[00:49:36.138]    <control if="traceSWO" while="" timeout="0" info="">
[00:49:36.138]      // if-block "traceSWO"
[00:49:36.138]        // =>  TRUE
[00:49:36.138]      <block atomic="false" info="">
[00:49:36.139]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[00:49:36.139]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[00:49:36.139]            <block atomic="false" info="">
[00:49:36.139]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[00:49:36.139]                // -> [dbgmcu_val <= 0x00000000]
[00:49:36.139]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[00:49:36.139]                // -> [dbgmcu_trace_val <= 0x00000000]
[00:49:36.139]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[00:49:36.140]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.140]                // -> [dbgmcu_val <= 0x00000007]
[00:49:36.140]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[00:49:36.140]                // -> [dbgmcu_trace_val <= 0x00000020]
[00:49:36.140]              Sequence("ConfigureTraceSWOPin");
[00:49:36.141]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[00:49:36.141]                  <block atomic="false" info="">
[00:49:36.141]                    __var pin     = 0;
[00:49:36.141]                      // -> [pin <= 0x00000000]
[00:49:36.141]                    __var port    = 0;
[00:49:36.141]                      // -> [port <= 0x00000000]
[00:49:36.141]                    __var portAdr = 0;
[00:49:36.141]                      // -> [portAdr <= 0x00000000]
[00:49:36.142]                    __var pos     = 0;
[00:49:36.142]                      // -> [pos <= 0x00000000]
[00:49:36.142]                    __var SWO_Pin = 0x00010003;          // PB3
[00:49:36.142]                      // -> [SWO_Pin <= 0x00010003]
[00:49:36.142]                  </block>
[00:49:36.142]                  <block atomic="false" info="configure SWO">
[00:49:36.142]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[00:49:36.142]                      // -> [pin <= 0x00000003]
[00:49:36.143]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[00:49:36.143]                      // -> [port <= 0x00000001]
[00:49:36.143]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[00:49:36.143]                      // -> [portAdr <= 0x40020400]
[00:49:36.143]                    pos = pin * 2;
[00:49:36.143]                      // -> [pos <= 0x00000006]
[00:49:36.143]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[00:49:36.144]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.145]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.145]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[00:49:36.145]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.146]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.146]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[00:49:36.146]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.147]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.147]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[00:49:36.148]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.148]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.148]                  </block>
[00:49:36.148]                  <control if="pin <  8" while="" timeout="0" info="">
[00:49:36.148]                    // if-block "pin <  8"
[00:49:36.148]                      // =>  TRUE
[00:49:36.149]                    <block atomic="false" info="">
[00:49:36.149]                      pos = ((pin    ) & 7) * 4;
[00:49:36.149]                        // -> [pos <= 0x0000000C]
[00:49:36.149]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[00:49:36.149]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.150]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.150]                    </block>
[00:49:36.150]                    // end if-block "pin <  8"
[00:49:36.150]                  </control>
[00:49:36.150]                  <control if="pin >= 8" while="" timeout="0" info="">
[00:49:36.150]                    // if-block "pin >= 8"
[00:49:36.151]                      // =>  FALSE
[00:49:36.151]                    // skip if-block "pin >= 8"
[00:49:36.151]                  </control>
[00:49:36.151]                </sequence>
[00:49:36.151]            </block>
[00:49:36.151]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[00:49:36.151]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[00:49:36.152]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.152]            </block>
[00:49:36.152]          </sequence>
[00:49:36.152]      </block>
[00:49:36.152]      // end if-block "traceSWO"
[00:49:36.153]    </control>
[00:49:36.153]    <control if="traceTPIU" while="" timeout="0" info="">
[00:49:36.153]      // if-block "traceTPIU"
[00:49:36.153]        // =>  FALSE
[00:49:36.153]      // skip if-block "traceTPIU"
[00:49:36.153]    </control>
[00:49:36.153]  </sequence>
[00:49:36.154]  
[00:49:36.157]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[00:49:36.157]  
[00:49:36.157]  <debugvars>
[00:49:36.158]    // Pre-defined
[00:49:36.158]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:36.158]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[00:49:36.158]    __dp=0x00000000
[00:49:36.159]    __ap=0x00000000
[00:49:36.159]    __traceout=0x00000001      (SWO Trace)
[00:49:36.159]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:36.159]    __FlashAddr=0x00000000
[00:49:36.159]    __FlashLen=0x00000000
[00:49:36.159]    __FlashArg=0x00000000
[00:49:36.160]    __FlashOp=0x00000000
[00:49:36.160]    __Result=0x00000000
[00:49:36.160]    
[00:49:36.160]    // User-defined
[00:49:36.160]    DbgMCU_CR=0x00000007
[00:49:36.160]    DbgMCU_APB1_Fz=0x00000000
[00:49:36.160]    DbgMCU_APB2_Fz=0x00000000
[00:49:36.161]    TraceClk_Pin=0x00040002
[00:49:36.161]    TraceD0_Pin=0x00040003
[00:49:36.161]    TraceD1_Pin=0x00040004
[00:49:36.161]    TraceD2_Pin=0x00040005
[00:49:36.161]    TraceD3_Pin=0x00040006
[00:49:36.161]  </debugvars>
[00:49:36.161]  
[00:49:36.161]  <sequence name="TraceStart" Pname="" disable="false" info="">
[00:49:36.162]    <block atomic="false" info="">
[00:49:36.162]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[00:49:36.162]        // -> [traceSWO <= 0x00000001]
[00:49:36.162]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[00:49:36.162]        // -> [traceTPIU <= 0x00000000]
[00:49:36.162]    </block>
[00:49:36.163]    <control if="traceSWO" while="" timeout="0" info="">
[00:49:36.163]      // if-block "traceSWO"
[00:49:36.163]        // =>  TRUE
[00:49:36.163]      <block atomic="false" info="">
[00:49:36.163]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[00:49:36.163]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[00:49:36.163]            <block atomic="false" info="">
[00:49:36.163]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[00:49:36.163]                // -> [dbgmcu_val <= 0x00000000]
[00:49:36.164]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[00:49:36.164]                // -> [dbgmcu_trace_val <= 0x00000000]
[00:49:36.164]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[00:49:36.164]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.164]                // -> [dbgmcu_val <= 0x00000007]
[00:49:36.164]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[00:49:36.165]                // -> [dbgmcu_trace_val <= 0x00000020]
[00:49:36.165]              Sequence("ConfigureTraceSWOPin");
[00:49:36.165]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[00:49:36.165]                  <block atomic="false" info="">
[00:49:36.165]                    __var pin     = 0;
[00:49:36.165]                      // -> [pin <= 0x00000000]
[00:49:36.165]                    __var port    = 0;
[00:49:36.165]                      // -> [port <= 0x00000000]
[00:49:36.166]                    __var portAdr = 0;
[00:49:36.166]                      // -> [portAdr <= 0x00000000]
[00:49:36.166]                    __var pos     = 0;
[00:49:36.166]                      // -> [pos <= 0x00000000]
[00:49:36.166]                    __var SWO_Pin = 0x00010003;          // PB3
[00:49:36.166]                      // -> [SWO_Pin <= 0x00010003]
[00:49:36.166]                  </block>
[00:49:36.166]                  <block atomic="false" info="configure SWO">
[00:49:36.167]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[00:49:36.167]                      // -> [pin <= 0x00000003]
[00:49:36.167]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[00:49:36.167]                      // -> [port <= 0x00000001]
[00:49:36.167]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[00:49:36.167]                      // -> [portAdr <= 0x40020400]
[00:49:36.167]                    pos = pin * 2;
[00:49:36.167]                      // -> [pos <= 0x00000006]
[00:49:36.167]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[00:49:36.168]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.168]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.168]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[00:49:36.169]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.169]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.169]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[00:49:36.170]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.170]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.170]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[00:49:36.171]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.171]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.171]                  </block>
[00:49:36.171]                  <control if="pin <  8" while="" timeout="0" info="">
[00:49:36.172]                    // if-block "pin <  8"
[00:49:36.172]                      // =>  TRUE
[00:49:36.172]                    <block atomic="false" info="">
[00:49:36.172]                      pos = ((pin    ) & 7) * 4;
[00:49:36.172]                        // -> [pos <= 0x0000000C]
[00:49:36.172]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[00:49:36.173]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.173]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.173]                    </block>
[00:49:36.173]                    // end if-block "pin <  8"
[00:49:36.174]                  </control>
[00:49:36.174]                  <control if="pin >= 8" while="" timeout="0" info="">
[00:49:36.174]                    // if-block "pin >= 8"
[00:49:36.174]                      // =>  FALSE
[00:49:36.174]                    // skip if-block "pin >= 8"
[00:49:36.174]                  </control>
[00:49:36.174]                </sequence>
[00:49:36.174]            </block>
[00:49:36.174]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[00:49:36.175]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[00:49:36.175]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.175]            </block>
[00:49:36.175]          </sequence>
[00:49:36.176]      </block>
[00:49:36.176]      // end if-block "traceSWO"
[00:49:36.176]    </control>
[00:49:36.176]    <control if="traceTPIU" while="" timeout="0" info="">
[00:49:36.176]      // if-block "traceTPIU"
[00:49:36.176]        // =>  FALSE
[00:49:36.176]      // skip if-block "traceTPIU"
[00:49:36.176]    </control>
[00:49:36.177]  </sequence>
[00:49:36.177]  
[00:49:36.402]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[00:49:36.402]  
[00:49:36.402]  <debugvars>
[00:49:36.402]    // Pre-defined
[00:49:36.402]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:36.402]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[00:49:36.403]    __dp=0x00000000
[00:49:36.403]    __ap=0x00000000
[00:49:36.403]    __traceout=0x00000001      (SWO Trace)
[00:49:36.403]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:36.403]    __FlashAddr=0x00000000
[00:49:36.403]    __FlashLen=0x00000000
[00:49:36.404]    __FlashArg=0x00000000
[00:49:36.404]    __FlashOp=0x00000000
[00:49:36.404]    __Result=0x00000000
[00:49:36.404]    
[00:49:36.404]    // User-defined
[00:49:36.404]    DbgMCU_CR=0x00000007
[00:49:36.404]    DbgMCU_APB1_Fz=0x00000000
[00:49:36.405]    DbgMCU_APB2_Fz=0x00000000
[00:49:36.405]    TraceClk_Pin=0x00040002
[00:49:36.405]    TraceD0_Pin=0x00040003
[00:49:36.405]    TraceD1_Pin=0x00040004
[00:49:36.405]    TraceD2_Pin=0x00040005
[00:49:36.405]    TraceD3_Pin=0x00040006
[00:49:36.405]  </debugvars>
[00:49:36.406]  
[00:49:36.406]  <sequence name="TraceStart" Pname="" disable="false" info="">
[00:49:36.406]    <block atomic="false" info="">
[00:49:36.406]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[00:49:36.406]        // -> [traceSWO <= 0x00000001]
[00:49:36.406]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[00:49:36.407]        // -> [traceTPIU <= 0x00000000]
[00:49:36.407]    </block>
[00:49:36.407]    <control if="traceSWO" while="" timeout="0" info="">
[00:49:36.407]      // if-block "traceSWO"
[00:49:36.407]        // =>  TRUE
[00:49:36.407]      <block atomic="false" info="">
[00:49:36.407]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[00:49:36.408]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[00:49:36.408]            <block atomic="false" info="">
[00:49:36.408]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[00:49:36.408]                // -> [dbgmcu_val <= 0x00000000]
[00:49:36.408]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[00:49:36.408]                // -> [dbgmcu_trace_val <= 0x00000000]
[00:49:36.408]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[00:49:36.409]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.409]                // -> [dbgmcu_val <= 0x00000007]
[00:49:36.409]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[00:49:36.409]                // -> [dbgmcu_trace_val <= 0x00000020]
[00:49:36.409]              Sequence("ConfigureTraceSWOPin");
[00:49:36.410]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[00:49:36.410]                  <block atomic="false" info="">
[00:49:36.410]                    __var pin     = 0;
[00:49:36.410]                      // -> [pin <= 0x00000000]
[00:49:36.410]                    __var port    = 0;
[00:49:36.410]                      // -> [port <= 0x00000000]
[00:49:36.410]                    __var portAdr = 0;
[00:49:36.410]                      // -> [portAdr <= 0x00000000]
[00:49:36.411]                    __var pos     = 0;
[00:49:36.411]                      // -> [pos <= 0x00000000]
[00:49:36.411]                    __var SWO_Pin = 0x00010003;          // PB3
[00:49:36.411]                      // -> [SWO_Pin <= 0x00010003]
[00:49:36.411]                  </block>
[00:49:36.411]                  <block atomic="false" info="configure SWO">
[00:49:36.411]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[00:49:36.412]                      // -> [pin <= 0x00000003]
[00:49:36.412]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[00:49:36.412]                      // -> [port <= 0x00000001]
[00:49:36.412]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[00:49:36.412]                      // -> [portAdr <= 0x40020400]
[00:49:36.412]                    pos = pin * 2;
[00:49:36.413]                      // -> [pos <= 0x00000006]
[00:49:36.413]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[00:49:36.413]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.413]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.414]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[00:49:36.414]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.415]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.415]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[00:49:36.415]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.416]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.416]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[00:49:36.416]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.417]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.417]                  </block>
[00:49:36.417]                  <control if="pin <  8" while="" timeout="0" info="">
[00:49:36.417]                    // if-block "pin <  8"
[00:49:36.417]                      // =>  TRUE
[00:49:36.417]                    <block atomic="false" info="">
[00:49:36.418]                      pos = ((pin    ) & 7) * 4;
[00:49:36.418]                        // -> [pos <= 0x0000000C]
[00:49:36.418]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[00:49:36.418]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.419]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.419]                    </block>
[00:49:36.419]                    // end if-block "pin <  8"
[00:49:36.419]                  </control>
[00:49:36.419]                  <control if="pin >= 8" while="" timeout="0" info="">
[00:49:36.419]                    // if-block "pin >= 8"
[00:49:36.420]                      // =>  FALSE
[00:49:36.420]                    // skip if-block "pin >= 8"
[00:49:36.420]                  </control>
[00:49:36.420]                </sequence>
[00:49:36.420]            </block>
[00:49:36.420]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[00:49:36.420]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[00:49:36.421]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[00:49:36.421]            </block>
[00:49:36.421]          </sequence>
[00:49:36.421]      </block>
[00:49:36.422]      // end if-block "traceSWO"
[00:49:36.422]    </control>
[00:49:36.422]    <control if="traceTPIU" while="" timeout="0" info="">
[00:49:36.422]      // if-block "traceTPIU"
[00:49:36.422]        // =>  FALSE
[00:49:36.422]      // skip if-block "traceTPIU"
[00:49:36.423]    </control>
[00:49:36.423]  </sequence>
[00:49:36.423]  
[00:56:00.273]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[00:56:00.273]  
[00:56:00.274]  <debugvars>
[00:56:00.274]    // Pre-defined
[00:56:00.274]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:00.274]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[00:56:00.275]    __dp=0x00000000
[00:56:00.275]    __ap=0x00000000
[00:56:00.275]    __traceout=0x00000001      (SWO Trace)
[00:56:00.275]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:00.275]    __FlashAddr=0x00000000
[00:56:00.276]    __FlashLen=0x00000000
[00:56:00.276]    __FlashArg=0x00000000
[00:56:00.276]    __FlashOp=0x00000000
[00:56:00.276]    __Result=0x00000000
[00:56:00.276]    
[00:56:00.276]    // User-defined
[00:56:00.277]    DbgMCU_CR=0x00000007
[00:56:00.277]    DbgMCU_APB1_Fz=0x00000000
[00:56:00.277]    DbgMCU_APB2_Fz=0x00000000
[00:56:00.277]    TraceClk_Pin=0x00040002
[00:56:00.277]    TraceD0_Pin=0x00040003
[00:56:00.277]    TraceD1_Pin=0x00040004
[00:56:00.278]    TraceD2_Pin=0x00040005
[00:56:00.278]    TraceD3_Pin=0x00040006
[00:56:00.278]  </debugvars>
[00:56:00.278]  
[00:56:00.278]  <sequence name="TraceStop" Pname="" disable="false" info="">
[00:56:00.279]    <block atomic="false" info="">
[00:56:00.279]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[00:56:00.279]        // -> [traceSWO <= 0x00000001]
[00:56:00.279]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[00:56:00.279]        // -> [traceTPIU <= 0x00000000]
[00:56:00.279]    </block>
[00:56:00.280]    <control if="traceSWO" while="" timeout="0" info="">
[00:56:00.280]      // if-block "traceSWO"
[00:56:00.280]        // =>  TRUE
[00:56:00.280]      <block atomic="false" info="">
[00:56:00.280]        Sequence("DisableTraceSWO");
[00:56:00.280]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[00:56:00.281]            <block atomic="false" info="">
[00:56:00.281]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[00:56:00.281]                // -> [dbgmcu_val <= 0x00000000]
[00:56:00.281]            </block>
[00:56:00.281]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[00:56:00.281]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[00:56:00.282]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[00:56:00.282]                // -> [dbgmcu_val <= 0x00000007]
[00:56:00.282]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[00:56:00.282]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[00:56:00.283]            </block>
[00:56:00.283]          </sequence>
[00:56:00.283]      </block>
[00:56:00.283]      // end if-block "traceSWO"
[00:56:00.283]    </control>
[00:56:00.283]    <control if="traceTPIU" while="" timeout="0" info="">
[00:56:00.283]      // if-block "traceTPIU"
[00:56:00.284]        // =>  FALSE
[00:56:00.284]      // skip if-block "traceTPIU"
[00:56:00.284]    </control>
[00:56:00.284]  </sequence>
[00:56:00.284]  
[01:00:22.616]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:00:22.616]  
[01:00:22.617]  <debugvars>
[01:00:22.617]    // Pre-defined
[01:00:22.617]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:22.617]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[01:00:22.617]    __dp=0x00000000
[01:00:22.617]    __ap=0x00000000
[01:00:22.618]    __traceout=0x00000001      (SWO Trace)
[01:00:22.618]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:22.618]    __FlashAddr=0x00000000
[01:00:22.618]    __FlashLen=0x00000000
[01:00:22.618]    __FlashArg=0x00000000
[01:00:22.618]    __FlashOp=0x00000000
[01:00:22.619]    __Result=0x00000000
[01:00:22.619]    
[01:00:22.619]    // User-defined
[01:00:22.619]    DbgMCU_CR=0x00000007
[01:00:22.619]    DbgMCU_APB1_Fz=0x00000000
[01:00:22.619]    DbgMCU_APB2_Fz=0x00000000
[01:00:22.620]    TraceClk_Pin=0x00040002
[01:00:22.620]    TraceD0_Pin=0x00040003
[01:00:22.620]    TraceD1_Pin=0x00040004
[01:00:22.620]    TraceD2_Pin=0x00040005
[01:00:22.620]    TraceD3_Pin=0x00040006
[01:00:22.620]  </debugvars>
[01:00:22.620]  
[01:00:22.621]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:00:22.621]    <block atomic="false" info="">
[01:00:22.621]      Sequence("CheckID");
[01:00:22.621]        <sequence name="CheckID" Pname="" disable="false" info="">
[01:00:22.621]          <block atomic="false" info="">
[01:00:22.621]            __var pidr1 = 0;
[01:00:22.622]              // -> [pidr1 <= 0x00000000]
[01:00:22.622]            __var pidr2 = 0;
[01:00:22.622]              // -> [pidr2 <= 0x00000000]
[01:00:22.622]            __var jep106id = 0;
[01:00:22.622]              // -> [jep106id <= 0x00000000]
[01:00:22.622]            __var ROMTableBase = 0;
[01:00:22.622]              // -> [ROMTableBase <= 0x00000000]
[01:00:22.622]            __ap = 0;      // AHB-AP
[01:00:22.623]              // -> [__ap <= 0x00000000]
[01:00:22.623]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[01:00:22.623]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[01:00:22.623]              // -> [ROMTableBase <= 0xE00FD000]
[01:00:22.623]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[01:00:22.624]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[01:00:22.624]              // -> [pidr1 <= 0x00000004]
[01:00:22.624]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[01:00:22.625]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[01:00:22.625]              // -> [pidr2 <= 0x0000001A]
[01:00:22.625]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[01:00:22.625]              // -> [jep106id <= 0x00000020]
[01:00:22.625]          </block>
[01:00:22.625]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[01:00:22.625]            // if-block "jep106id != 0x20"
[01:00:22.625]              // =>  FALSE
[01:00:22.626]            // skip if-block "jep106id != 0x20"
[01:00:22.626]          </control>
[01:00:22.626]        </sequence>
[01:00:22.626]    </block>
[01:00:22.626]  </sequence>
[01:00:22.626]  
[01:00:22.640]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[01:00:22.640]  
[01:00:22.641]  <debugvars>
[01:00:22.641]    // Pre-defined
[01:00:22.641]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:22.641]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[01:00:22.641]    __dp=0x00000000
[01:00:22.641]    __ap=0x00000000
[01:00:22.642]    __traceout=0x00000001      (SWO Trace)
[01:00:22.642]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:22.642]    __FlashAddr=0x00000000
[01:00:22.642]    __FlashLen=0x00000000
[01:00:22.642]    __FlashArg=0x00000000
[01:00:22.643]    __FlashOp=0x00000000
[01:00:22.643]    __Result=0x00000000
[01:00:22.643]    
[01:00:22.643]    // User-defined
[01:00:22.643]    DbgMCU_CR=0x00000007
[01:00:22.643]    DbgMCU_APB1_Fz=0x00000000
[01:00:22.644]    DbgMCU_APB2_Fz=0x00000000
[01:00:22.644]    TraceClk_Pin=0x00040002
[01:00:22.644]    TraceD0_Pin=0x00040003
[01:00:22.644]    TraceD1_Pin=0x00040004
[01:00:22.644]    TraceD2_Pin=0x00040005
[01:00:22.644]    TraceD3_Pin=0x00040006
[01:00:22.645]  </debugvars>
[01:00:22.645]  
[01:00:22.645]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[01:00:22.645]    <block atomic="false" info="">
[01:00:22.645]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[01:00:22.646]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:22.646]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[01:00:22.647]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:22.647]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[01:00:22.647]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:22.647]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[01:00:22.648]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:22.648]    </block>
[01:00:22.648]  </sequence>
[01:00:22.648]  
[01:00:53.944]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:00:53.944]  
[01:00:53.945]  <debugvars>
[01:00:53.945]    // Pre-defined
[01:00:53.945]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:53.946]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:00:53.946]    __dp=0x00000000
[01:00:53.946]    __ap=0x00000000
[01:00:53.946]    __traceout=0x00000001      (SWO Trace)
[01:00:53.946]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:53.947]    __FlashAddr=0x00000000
[01:00:53.947]    __FlashLen=0x00000000
[01:00:53.947]    __FlashArg=0x00000000
[01:00:53.947]    __FlashOp=0x00000000
[01:00:53.947]    __Result=0x00000000
[01:00:53.948]    
[01:00:53.948]    // User-defined
[01:00:53.948]    DbgMCU_CR=0x00000007
[01:00:53.948]    DbgMCU_APB1_Fz=0x00000000
[01:00:53.948]    DbgMCU_APB2_Fz=0x00000000
[01:00:53.948]    TraceClk_Pin=0x00040002
[01:00:53.948]    TraceD0_Pin=0x00040003
[01:00:53.949]    TraceD1_Pin=0x00040004
[01:00:53.949]    TraceD2_Pin=0x00040005
[01:00:53.949]    TraceD3_Pin=0x00040006
[01:00:53.949]  </debugvars>
[01:00:53.949]  
[01:00:53.949]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:00:53.950]    <block atomic="false" info="">
[01:00:53.950]      Sequence("CheckID");
[01:00:53.950]        <sequence name="CheckID" Pname="" disable="false" info="">
[01:00:53.950]          <block atomic="false" info="">
[01:00:53.950]            __var pidr1 = 0;
[01:00:53.950]              // -> [pidr1 <= 0x00000000]
[01:00:53.951]            __var pidr2 = 0;
[01:00:53.951]              // -> [pidr2 <= 0x00000000]
[01:00:53.951]            __var jep106id = 0;
[01:00:53.951]              // -> [jep106id <= 0x00000000]
[01:00:53.951]            __var ROMTableBase = 0;
[01:00:53.951]              // -> [ROMTableBase <= 0x00000000]
[01:00:53.951]            __ap = 0;      // AHB-AP
[01:00:53.952]              // -> [__ap <= 0x00000000]
[01:00:53.952]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[01:00:53.952]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[01:00:53.952]              // -> [ROMTableBase <= 0xE00FD000]
[01:00:53.952]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[01:00:53.953]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[01:00:53.953]              // -> [pidr1 <= 0x00000004]
[01:00:53.953]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[01:00:53.953]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[01:00:53.954]              // -> [pidr2 <= 0x0000001A]
[01:00:53.954]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[01:00:53.954]              // -> [jep106id <= 0x00000020]
[01:00:53.954]          </block>
[01:00:53.954]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[01:00:53.954]            // if-block "jep106id != 0x20"
[01:00:53.954]              // =>  FALSE
[01:00:53.955]            // skip if-block "jep106id != 0x20"
[01:00:53.955]          </control>
[01:00:53.955]        </sequence>
[01:00:53.955]    </block>
[01:00:53.955]  </sequence>
[01:00:53.955]  
[01:00:53.969]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[01:00:53.969]  
[01:00:53.969]  <debugvars>
[01:00:53.970]    // Pre-defined
[01:00:53.970]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:53.970]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:00:53.970]    __dp=0x00000000
[01:00:53.970]    __ap=0x00000000
[01:00:53.970]    __traceout=0x00000001      (SWO Trace)
[01:00:53.971]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:53.971]    __FlashAddr=0x00000000
[01:00:53.971]    __FlashLen=0x00000000
[01:00:53.971]    __FlashArg=0x00000000
[01:00:53.971]    __FlashOp=0x00000000
[01:00:53.971]    __Result=0x00000000
[01:00:53.972]    
[01:00:53.972]    // User-defined
[01:00:53.972]    DbgMCU_CR=0x00000007
[01:00:53.972]    DbgMCU_APB1_Fz=0x00000000
[01:00:53.972]    DbgMCU_APB2_Fz=0x00000000
[01:00:53.972]    TraceClk_Pin=0x00040002
[01:00:53.972]    TraceD0_Pin=0x00040003
[01:00:53.972]    TraceD1_Pin=0x00040004
[01:00:53.973]    TraceD2_Pin=0x00040005
[01:00:53.973]    TraceD3_Pin=0x00040006
[01:00:53.973]  </debugvars>
[01:00:53.973]  
[01:00:53.973]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[01:00:53.973]    <block atomic="false" info="">
[01:00:53.974]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[01:00:53.974]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:53.974]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[01:00:53.975]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:53.975]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[01:00:53.976]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:53.976]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[01:00:53.976]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:53.976]    </block>
[01:00:53.976]  </sequence>
[01:00:53.977]  
[01:00:53.993]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[01:00:53.993]  
[01:00:53.993]  <debugvars>
[01:00:53.994]    // Pre-defined
[01:00:53.994]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:53.994]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:00:53.994]    __dp=0x00000000
[01:00:53.994]    __ap=0x00000000
[01:00:53.994]    __traceout=0x00000001      (SWO Trace)
[01:00:53.995]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:53.995]    __FlashAddr=0x00000000
[01:00:53.995]    __FlashLen=0x00000000
[01:00:53.995]    __FlashArg=0x00000000
[01:00:53.995]    __FlashOp=0x00000000
[01:00:53.995]    __Result=0x00000000
[01:00:53.996]    
[01:00:53.996]    // User-defined
[01:00:53.996]    DbgMCU_CR=0x00000007
[01:00:53.996]    DbgMCU_APB1_Fz=0x00000000
[01:00:53.996]    DbgMCU_APB2_Fz=0x00000000
[01:00:53.996]    TraceClk_Pin=0x00040002
[01:00:53.996]    TraceD0_Pin=0x00040003
[01:00:53.997]    TraceD1_Pin=0x00040004
[01:00:53.997]    TraceD2_Pin=0x00040005
[01:00:53.997]    TraceD3_Pin=0x00040006
[01:00:53.997]  </debugvars>
[01:00:53.997]  
[01:00:53.997]  <sequence name="TraceStart" Pname="" disable="false" info="">
[01:00:53.998]    <block atomic="false" info="">
[01:00:53.998]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[01:00:53.998]        // -> [traceSWO <= 0x00000001]
[01:00:53.998]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[01:00:53.998]        // -> [traceTPIU <= 0x00000000]
[01:00:53.999]    </block>
[01:00:53.999]    <control if="traceSWO" while="" timeout="0" info="">
[01:00:53.999]      // if-block "traceSWO"
[01:00:53.999]        // =>  TRUE
[01:00:53.999]      <block atomic="false" info="">
[01:00:53.999]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[01:00:53.999]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[01:00:53.999]            <block atomic="false" info="">
[01:00:54.000]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[01:00:54.000]                // -> [dbgmcu_val <= 0x00000000]
[01:00:54.000]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[01:00:54.000]                // -> [dbgmcu_trace_val <= 0x00000000]
[01:00:54.000]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[01:00:54.000]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.001]                // -> [dbgmcu_val <= 0x00000007]
[01:00:54.001]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[01:00:54.001]                // -> [dbgmcu_trace_val <= 0x00000020]
[01:00:54.001]              Sequence("ConfigureTraceSWOPin");
[01:00:54.001]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[01:00:54.001]                  <block atomic="false" info="">
[01:00:54.001]                    __var pin     = 0;
[01:00:54.002]                      // -> [pin <= 0x00000000]
[01:00:54.002]                    __var port    = 0;
[01:00:54.002]                      // -> [port <= 0x00000000]
[01:00:54.002]                    __var portAdr = 0;
[01:00:54.002]                      // -> [portAdr <= 0x00000000]
[01:00:54.002]                    __var pos     = 0;
[01:00:54.002]                      // -> [pos <= 0x00000000]
[01:00:54.002]                    __var SWO_Pin = 0x00010003;          // PB3
[01:00:54.003]                      // -> [SWO_Pin <= 0x00010003]
[01:00:54.003]                  </block>
[01:00:54.003]                  <block atomic="false" info="configure SWO">
[01:00:54.003]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[01:00:54.003]                      // -> [pin <= 0x00000003]
[01:00:54.003]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[01:00:54.003]                      // -> [port <= 0x00000001]
[01:00:54.003]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[01:00:54.003]                      // -> [portAdr <= 0x40020400]
[01:00:54.004]                    pos = pin * 2;
[01:00:54.004]                      // -> [pos <= 0x00000006]
[01:00:54.004]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[01:00:54.004]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.005]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.005]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[01:00:54.005]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.006]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.006]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[01:00:54.006]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.007]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.007]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[01:00:54.007]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.008]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.008]                  </block>
[01:00:54.008]                  <control if="pin <  8" while="" timeout="0" info="">
[01:00:54.008]                    // if-block "pin <  8"
[01:00:54.008]                      // =>  TRUE
[01:00:54.008]                    <block atomic="false" info="">
[01:00:54.008]                      pos = ((pin    ) & 7) * 4;
[01:00:54.008]                        // -> [pos <= 0x0000000C]
[01:00:54.009]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[01:00:54.009]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.010]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.010]                    </block>
[01:00:54.010]                    // end if-block "pin <  8"
[01:00:54.010]                  </control>
[01:00:54.010]                  <control if="pin >= 8" while="" timeout="0" info="">
[01:00:54.010]                    // if-block "pin >= 8"
[01:00:54.010]                      // =>  FALSE
[01:00:54.010]                    // skip if-block "pin >= 8"
[01:00:54.010]                  </control>
[01:00:54.011]                </sequence>
[01:00:54.011]            </block>
[01:00:54.011]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[01:00:54.011]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[01:00:54.011]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.012]            </block>
[01:00:54.012]          </sequence>
[01:00:54.012]      </block>
[01:00:54.012]      // end if-block "traceSWO"
[01:00:54.012]    </control>
[01:00:54.012]    <control if="traceTPIU" while="" timeout="0" info="">
[01:00:54.012]      // if-block "traceTPIU"
[01:00:54.012]        // =>  FALSE
[01:00:54.012]      // skip if-block "traceTPIU"
[01:00:54.012]    </control>
[01:00:54.013]  </sequence>
[01:00:54.013]  
[01:00:54.016]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[01:00:54.016]  
[01:00:54.017]  <debugvars>
[01:00:54.017]    // Pre-defined
[01:00:54.017]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:54.017]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:00:54.017]    __dp=0x00000000
[01:00:54.017]    __ap=0x00000000
[01:00:54.017]    __traceout=0x00000001      (SWO Trace)
[01:00:54.017]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:54.018]    __FlashAddr=0x00000000
[01:00:54.018]    __FlashLen=0x00000000
[01:00:54.018]    __FlashArg=0x00000000
[01:00:54.018]    __FlashOp=0x00000000
[01:00:54.018]    __Result=0x00000000
[01:00:54.018]    
[01:00:54.018]    // User-defined
[01:00:54.018]    DbgMCU_CR=0x00000007
[01:00:54.018]    DbgMCU_APB1_Fz=0x00000000
[01:00:54.019]    DbgMCU_APB2_Fz=0x00000000
[01:00:54.019]    TraceClk_Pin=0x00040002
[01:00:54.019]    TraceD0_Pin=0x00040003
[01:00:54.019]    TraceD1_Pin=0x00040004
[01:00:54.019]    TraceD2_Pin=0x00040005
[01:00:54.019]    TraceD3_Pin=0x00040006
[01:00:54.019]  </debugvars>
[01:00:54.019]  
[01:00:54.020]  <sequence name="TraceStart" Pname="" disable="false" info="">
[01:00:54.020]    <block atomic="false" info="">
[01:00:54.020]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[01:00:54.020]        // -> [traceSWO <= 0x00000001]
[01:00:54.020]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[01:00:54.020]        // -> [traceTPIU <= 0x00000000]
[01:00:54.020]    </block>
[01:00:54.020]    <control if="traceSWO" while="" timeout="0" info="">
[01:00:54.021]      // if-block "traceSWO"
[01:00:54.021]        // =>  TRUE
[01:00:54.021]      <block atomic="false" info="">
[01:00:54.021]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[01:00:54.021]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[01:00:54.021]            <block atomic="false" info="">
[01:00:54.021]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[01:00:54.022]                // -> [dbgmcu_val <= 0x00000000]
[01:00:54.022]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[01:00:54.022]                // -> [dbgmcu_trace_val <= 0x00000000]
[01:00:54.022]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[01:00:54.023]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.023]                // -> [dbgmcu_val <= 0x00000007]
[01:00:54.023]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[01:00:54.023]                // -> [dbgmcu_trace_val <= 0x00000020]
[01:00:54.023]              Sequence("ConfigureTraceSWOPin");
[01:00:54.023]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[01:00:54.023]                  <block atomic="false" info="">
[01:00:54.024]                    __var pin     = 0;
[01:00:54.024]                      // -> [pin <= 0x00000000]
[01:00:54.024]                    __var port    = 0;
[01:00:54.024]                      // -> [port <= 0x00000000]
[01:00:54.024]                    __var portAdr = 0;
[01:00:54.024]                      // -> [portAdr <= 0x00000000]
[01:00:54.024]                    __var pos     = 0;
[01:00:54.024]                      // -> [pos <= 0x00000000]
[01:00:54.025]                    __var SWO_Pin = 0x00010003;          // PB3
[01:00:54.025]                      // -> [SWO_Pin <= 0x00010003]
[01:00:54.025]                  </block>
[01:00:54.025]                  <block atomic="false" info="configure SWO">
[01:00:54.025]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[01:00:54.025]                      // -> [pin <= 0x00000003]
[01:00:54.025]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[01:00:54.026]                      // -> [port <= 0x00000001]
[01:00:54.026]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[01:00:54.026]                      // -> [portAdr <= 0x40020400]
[01:00:54.026]                    pos = pin * 2;
[01:00:54.026]                      // -> [pos <= 0x00000006]
[01:00:54.026]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[01:00:54.027]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.027]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.027]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[01:00:54.028]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.028]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.028]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[01:00:54.029]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.029]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.029]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[01:00:54.030]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.030]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.030]                  </block>
[01:00:54.030]                  <control if="pin <  8" while="" timeout="0" info="">
[01:00:54.030]                    // if-block "pin <  8"
[01:00:54.031]                      // =>  TRUE
[01:00:54.031]                    <block atomic="false" info="">
[01:00:54.031]                      pos = ((pin    ) & 7) * 4;
[01:00:54.031]                        // -> [pos <= 0x0000000C]
[01:00:54.031]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[01:00:54.032]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.032]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.032]                    </block>
[01:00:54.032]                    // end if-block "pin <  8"
[01:00:54.032]                  </control>
[01:00:54.032]                  <control if="pin >= 8" while="" timeout="0" info="">
[01:00:54.033]                    // if-block "pin >= 8"
[01:00:54.033]                      // =>  FALSE
[01:00:54.033]                    // skip if-block "pin >= 8"
[01:00:54.033]                  </control>
[01:00:54.033]                </sequence>
[01:00:54.033]            </block>
[01:00:54.033]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[01:00:54.033]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[01:00:54.034]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.034]            </block>
[01:00:54.034]          </sequence>
[01:00:54.034]      </block>
[01:00:54.034]      // end if-block "traceSWO"
[01:00:54.034]    </control>
[01:00:54.035]    <control if="traceTPIU" while="" timeout="0" info="">
[01:00:54.035]      // if-block "traceTPIU"
[01:00:54.035]        // =>  FALSE
[01:00:54.035]      // skip if-block "traceTPIU"
[01:00:54.035]    </control>
[01:00:54.035]  </sequence>
[01:00:54.036]  
[01:00:54.255]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[01:00:54.255]  
[01:00:54.255]  <debugvars>
[01:00:54.255]    // Pre-defined
[01:00:54.255]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:54.255]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:00:54.256]    __dp=0x00000000
[01:00:54.256]    __ap=0x00000000
[01:00:54.256]    __traceout=0x00000001      (SWO Trace)
[01:00:54.256]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:54.256]    __FlashAddr=0x00000000
[01:00:54.256]    __FlashLen=0x00000000
[01:00:54.257]    __FlashArg=0x00000000
[01:00:54.257]    __FlashOp=0x00000000
[01:00:54.257]    __Result=0x00000000
[01:00:54.257]    
[01:00:54.257]    // User-defined
[01:00:54.257]    DbgMCU_CR=0x00000007
[01:00:54.257]    DbgMCU_APB1_Fz=0x00000000
[01:00:54.258]    DbgMCU_APB2_Fz=0x00000000
[01:00:54.258]    TraceClk_Pin=0x00040002
[01:00:54.258]    TraceD0_Pin=0x00040003
[01:00:54.258]    TraceD1_Pin=0x00040004
[01:00:54.258]    TraceD2_Pin=0x00040005
[01:00:54.258]    TraceD3_Pin=0x00040006
[01:00:54.258]  </debugvars>
[01:00:54.258]  
[01:00:54.259]  <sequence name="TraceStart" Pname="" disable="false" info="">
[01:00:54.259]    <block atomic="false" info="">
[01:00:54.259]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[01:00:54.259]        // -> [traceSWO <= 0x00000001]
[01:00:54.259]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[01:00:54.259]        // -> [traceTPIU <= 0x00000000]
[01:00:54.259]    </block>
[01:00:54.260]    <control if="traceSWO" while="" timeout="0" info="">
[01:00:54.260]      // if-block "traceSWO"
[01:00:54.260]        // =>  TRUE
[01:00:54.260]      <block atomic="false" info="">
[01:00:54.260]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[01:00:54.260]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[01:00:54.260]            <block atomic="false" info="">
[01:00:54.260]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[01:00:54.261]                // -> [dbgmcu_val <= 0x00000000]
[01:00:54.261]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[01:00:54.261]                // -> [dbgmcu_trace_val <= 0x00000000]
[01:00:54.261]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[01:00:54.261]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.262]                // -> [dbgmcu_val <= 0x00000007]
[01:00:54.262]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[01:00:54.262]                // -> [dbgmcu_trace_val <= 0x00000020]
[01:00:54.262]              Sequence("ConfigureTraceSWOPin");
[01:00:54.262]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[01:00:54.262]                  <block atomic="false" info="">
[01:00:54.262]                    __var pin     = 0;
[01:00:54.262]                      // -> [pin <= 0x00000000]
[01:00:54.263]                    __var port    = 0;
[01:00:54.263]                      // -> [port <= 0x00000000]
[01:00:54.263]                    __var portAdr = 0;
[01:00:54.263]                      // -> [portAdr <= 0x00000000]
[01:00:54.263]                    __var pos     = 0;
[01:00:54.263]                      // -> [pos <= 0x00000000]
[01:00:54.263]                    __var SWO_Pin = 0x00010003;          // PB3
[01:00:54.263]                      // -> [SWO_Pin <= 0x00010003]
[01:00:54.264]                  </block>
[01:00:54.264]                  <block atomic="false" info="configure SWO">
[01:00:54.264]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[01:00:54.264]                      // -> [pin <= 0x00000003]
[01:00:54.264]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[01:00:54.264]                      // -> [port <= 0x00000001]
[01:00:54.264]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[01:00:54.264]                      // -> [portAdr <= 0x40020400]
[01:00:54.265]                    pos = pin * 2;
[01:00:54.265]                      // -> [pos <= 0x00000006]
[01:00:54.265]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[01:00:54.265]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.266]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.266]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[01:00:54.266]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.267]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.267]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[01:00:54.267]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.268]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.268]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[01:00:54.268]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.269]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.269]                  </block>
[01:00:54.269]                  <control if="pin <  8" while="" timeout="0" info="">
[01:00:54.269]                    // if-block "pin <  8"
[01:00:54.269]                      // =>  TRUE
[01:00:54.269]                    <block atomic="false" info="">
[01:00:54.270]                      pos = ((pin    ) & 7) * 4;
[01:00:54.270]                        // -> [pos <= 0x0000000C]
[01:00:54.270]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[01:00:54.270]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.271]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.271]                    </block>
[01:00:54.271]                    // end if-block "pin <  8"
[01:00:54.271]                  </control>
[01:00:54.271]                  <control if="pin >= 8" while="" timeout="0" info="">
[01:00:54.271]                    // if-block "pin >= 8"
[01:00:54.271]                      // =>  FALSE
[01:00:54.272]                    // skip if-block "pin >= 8"
[01:00:54.272]                  </control>
[01:00:54.272]                </sequence>
[01:00:54.272]            </block>
[01:00:54.272]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[01:00:54.272]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[01:00:54.273]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[01:00:54.273]            </block>
[01:00:54.273]          </sequence>
[01:00:54.273]      </block>
[01:00:54.273]      // end if-block "traceSWO"
[01:00:54.273]    </control>
[01:00:54.273]    <control if="traceTPIU" while="" timeout="0" info="">
[01:00:54.273]      // if-block "traceTPIU"
[01:00:54.274]        // =>  FALSE
[01:00:54.274]      // skip if-block "traceTPIU"
[01:00:54.274]    </control>
[01:00:54.274]  </sequence>
[01:00:54.274]  
[01:03:33.182]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[01:03:33.182]  
[01:03:33.182]  <debugvars>
[01:03:33.182]    // Pre-defined
[01:03:33.183]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:03:33.183]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:03:33.183]    __dp=0x00000000
[01:03:33.183]    __ap=0x00000000
[01:03:33.183]    __traceout=0x00000001      (SWO Trace)
[01:03:33.183]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:03:33.184]    __FlashAddr=0x00000000
[01:03:33.184]    __FlashLen=0x00000000
[01:03:33.184]    __FlashArg=0x00000000
[01:03:33.184]    __FlashOp=0x00000000
[01:03:33.184]    __Result=0x00000000
[01:03:33.185]    
[01:03:33.185]    // User-defined
[01:03:33.185]    DbgMCU_CR=0x00000007
[01:03:33.185]    DbgMCU_APB1_Fz=0x00000000
[01:03:33.185]    DbgMCU_APB2_Fz=0x00000000
[01:03:33.185]    TraceClk_Pin=0x00040002
[01:03:33.186]    TraceD0_Pin=0x00040003
[01:03:33.186]    TraceD1_Pin=0x00040004
[01:03:33.186]    TraceD2_Pin=0x00040005
[01:03:33.186]    TraceD3_Pin=0x00040006
[01:03:33.186]  </debugvars>
[01:03:33.186]  
[01:03:33.187]  <sequence name="TraceStop" Pname="" disable="false" info="">
[01:03:33.187]    <block atomic="false" info="">
[01:03:33.187]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[01:03:33.187]        // -> [traceSWO <= 0x00000001]
[01:03:33.187]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[01:03:33.187]        // -> [traceTPIU <= 0x00000000]
[01:03:33.188]    </block>
[01:03:33.188]    <control if="traceSWO" while="" timeout="0" info="">
[01:03:33.188]      // if-block "traceSWO"
[01:03:33.188]        // =>  TRUE
[01:03:33.188]      <block atomic="false" info="">
[01:03:33.188]        Sequence("DisableTraceSWO");
[01:03:33.189]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[01:03:33.189]            <block atomic="false" info="">
[01:03:33.189]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[01:03:33.189]                // -> [dbgmcu_val <= 0x00000000]
[01:03:33.189]            </block>
[01:03:33.189]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[01:03:33.190]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[01:03:33.190]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[01:03:33.190]                // -> [dbgmcu_val <= 0x00000007]
[01:03:33.191]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[01:03:33.191]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[01:03:33.191]            </block>
[01:03:33.191]          </sequence>
[01:03:33.192]      </block>
[01:03:33.192]      // end if-block "traceSWO"
[01:03:33.192]    </control>
[01:03:33.192]    <control if="traceTPIU" while="" timeout="0" info="">
[01:03:33.192]      // if-block "traceTPIU"
[01:03:33.192]        // =>  FALSE
[01:03:33.192]      // skip if-block "traceTPIU"
[01:03:33.192]    </control>
[01:03:33.193]  </sequence>
[01:03:33.193]  
[01:04:24.681]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:04:24.681]  
[01:04:24.681]  <debugvars>
[01:04:24.681]    // Pre-defined
[01:04:24.681]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:04:24.681]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[01:04:24.682]    __dp=0x00000000
[01:04:24.682]    __ap=0x00000000
[01:04:24.682]    __traceout=0x00000001      (SWO Trace)
[01:04:24.682]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:04:24.682]    __FlashAddr=0x00000000
[01:04:24.682]    __FlashLen=0x00000000
[01:04:24.683]    __FlashArg=0x00000000
[01:04:24.683]    __FlashOp=0x00000000
[01:04:24.683]    __Result=0x00000000
[01:04:24.683]    
[01:04:24.683]    // User-defined
[01:04:24.683]    DbgMCU_CR=0x00000007
[01:04:24.684]    DbgMCU_APB1_Fz=0x00000000
[01:04:24.684]    DbgMCU_APB2_Fz=0x00000000
[01:04:24.684]    TraceClk_Pin=0x00040002
[01:04:24.684]    TraceD0_Pin=0x00040003
[01:04:24.684]    TraceD1_Pin=0x00040004
[01:04:24.685]    TraceD2_Pin=0x00040005
[01:04:24.685]    TraceD3_Pin=0x00040006
[01:04:24.685]  </debugvars>
[01:04:24.685]  
[01:04:24.685]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:04:24.685]    <block atomic="false" info="">
[01:04:24.686]      Sequence("CheckID");
[01:04:24.686]        <sequence name="CheckID" Pname="" disable="false" info="">
[01:04:24.686]          <block atomic="false" info="">
[01:04:24.686]            __var pidr1 = 0;
[01:04:24.686]              // -> [pidr1 <= 0x00000000]
[01:04:24.687]            __var pidr2 = 0;
[01:04:24.687]              // -> [pidr2 <= 0x00000000]
[01:04:24.687]            __var jep106id = 0;
[01:04:24.687]              // -> [jep106id <= 0x00000000]
[01:04:24.687]            __var ROMTableBase = 0;
[01:04:24.687]              // -> [ROMTableBase <= 0x00000000]
[01:04:24.688]            __ap = 0;      // AHB-AP
[01:04:24.688]              // -> [__ap <= 0x00000000]
[01:04:24.688]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[01:04:24.688]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[01:04:24.688]              // -> [ROMTableBase <= 0xE00FD000]
[01:04:24.689]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[01:04:24.689]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[01:04:24.689]              // -> [pidr1 <= 0x00000004]
[01:04:24.689]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[01:04:24.690]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[01:04:24.690]              // -> [pidr2 <= 0x0000001A]
[01:04:24.690]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[01:04:24.691]              // -> [jep106id <= 0x00000020]
[01:04:24.691]          </block>
[01:04:24.691]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[01:04:24.691]            // if-block "jep106id != 0x20"
[01:04:24.691]              // =>  FALSE
[01:04:24.691]            // skip if-block "jep106id != 0x20"
[01:04:24.691]          </control>
[01:04:24.692]        </sequence>
[01:04:24.692]    </block>
[01:04:24.692]  </sequence>
[01:04:24.692]  
[01:04:24.706]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[01:04:24.706]  
[01:04:24.706]  <debugvars>
[01:04:24.706]    // Pre-defined
[01:04:24.707]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:04:24.707]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[01:04:24.707]    __dp=0x00000000
[01:04:24.707]    __ap=0x00000000
[01:04:24.707]    __traceout=0x00000001      (SWO Trace)
[01:04:24.707]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:04:24.708]    __FlashAddr=0x00000000
[01:04:24.708]    __FlashLen=0x00000000
[01:04:24.708]    __FlashArg=0x00000000
[01:04:24.708]    __FlashOp=0x00000000
[01:04:24.708]    __Result=0x00000000
[01:04:24.709]    
[01:04:24.709]    // User-defined
[01:04:24.709]    DbgMCU_CR=0x00000007
[01:04:24.709]    DbgMCU_APB1_Fz=0x00000000
[01:04:24.709]    DbgMCU_APB2_Fz=0x00000000
[01:04:24.709]    TraceClk_Pin=0x00040002
[01:04:24.710]    TraceD0_Pin=0x00040003
[01:04:24.710]    TraceD1_Pin=0x00040004
[01:04:24.710]    TraceD2_Pin=0x00040005
[01:04:24.710]    TraceD3_Pin=0x00040006
[01:04:24.710]  </debugvars>
[01:04:24.710]  
[01:04:24.711]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[01:04:24.711]    <block atomic="false" info="">
[01:04:24.711]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[01:04:24.712]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[01:04:24.712]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[01:04:24.712]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[01:04:24.713]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[01:04:24.713]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:04:24.713]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[01:04:24.714]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:04:24.714]    </block>
[01:04:24.714]  </sequence>
[01:04:24.714]  
[01:12:23.645]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:12:23.645]  
[01:12:23.646]  <debugvars>
[01:12:23.646]    // Pre-defined
[01:12:23.646]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:12:23.646]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[01:12:23.646]    __dp=0x00000000
[01:12:23.647]    __ap=0x00000000
[01:12:23.647]    __traceout=0x00000001      (SWO Trace)
[01:12:23.647]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:12:23.647]    __FlashAddr=0x00000000
[01:12:23.647]    __FlashLen=0x00000000
[01:12:23.647]    __FlashArg=0x00000000
[01:12:23.648]    __FlashOp=0x00000000
[01:12:23.648]    __Result=0x00000000
[01:12:23.648]    
[01:12:23.648]    // User-defined
[01:12:23.648]    DbgMCU_CR=0x00000007
[01:12:23.648]    DbgMCU_APB1_Fz=0x00000000
[01:12:23.648]    DbgMCU_APB2_Fz=0x00000000
[01:12:23.649]    TraceClk_Pin=0x00040002
[01:12:23.649]    TraceD0_Pin=0x00040003
[01:12:23.649]    TraceD1_Pin=0x00040004
[01:12:23.649]    TraceD2_Pin=0x00040005
[01:12:23.649]    TraceD3_Pin=0x00040006
[01:12:23.649]  </debugvars>
[01:12:23.650]  
[01:12:23.650]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:12:23.650]    <block atomic="false" info="">
[01:12:23.650]      Sequence("CheckID");
[01:12:23.650]        <sequence name="CheckID" Pname="" disable="false" info="">
[01:12:23.650]          <block atomic="false" info="">
[01:12:23.651]            __var pidr1 = 0;
[01:12:23.651]              // -> [pidr1 <= 0x00000000]
[01:12:23.651]            __var pidr2 = 0;
[01:12:23.651]              // -> [pidr2 <= 0x00000000]
[01:12:23.651]            __var jep106id = 0;
[01:12:23.652]              // -> [jep106id <= 0x00000000]
[01:12:23.652]            __var ROMTableBase = 0;
[01:12:23.652]              // -> [ROMTableBase <= 0x00000000]
[01:12:23.652]            __ap = 0;      // AHB-AP
[01:12:23.652]              // -> [__ap <= 0x00000000]
[01:12:23.652]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[01:12:23.653]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[01:12:23.653]              // -> [ROMTableBase <= 0xE00FD000]
[01:12:23.653]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[01:12:23.653]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[01:12:23.654]              // -> [pidr1 <= 0x00000004]
[01:12:23.654]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[01:12:23.654]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[01:12:23.655]              // -> [pidr2 <= 0x0000001A]
[01:12:23.655]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[01:12:23.655]              // -> [jep106id <= 0x00000020]
[01:12:23.655]          </block>
[01:12:23.655]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[01:12:23.655]            // if-block "jep106id != 0x20"
[01:12:23.655]              // =>  FALSE
[01:12:23.655]            // skip if-block "jep106id != 0x20"
[01:12:23.656]          </control>
[01:12:23.656]        </sequence>
[01:12:23.656]    </block>
[01:12:23.656]  </sequence>
[01:12:23.656]  
[01:12:23.671]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[01:12:23.671]  
[01:12:23.671]  <debugvars>
[01:12:23.671]    // Pre-defined
[01:12:23.671]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:12:23.672]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[01:12:23.672]    __dp=0x00000000
[01:12:23.672]    __ap=0x00000000
[01:12:23.672]    __traceout=0x00000001      (SWO Trace)
[01:12:23.672]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:12:23.672]    __FlashAddr=0x00000000
[01:12:23.673]    __FlashLen=0x00000000
[01:12:23.673]    __FlashArg=0x00000000
[01:12:23.673]    __FlashOp=0x00000000
[01:12:23.673]    __Result=0x00000000
[01:12:23.673]    
[01:12:23.673]    // User-defined
[01:12:23.673]    DbgMCU_CR=0x00000007
[01:12:23.673]    DbgMCU_APB1_Fz=0x00000000
[01:12:23.674]    DbgMCU_APB2_Fz=0x00000000
[01:12:23.674]    TraceClk_Pin=0x00040002
[01:12:23.674]    TraceD0_Pin=0x00040003
[01:12:23.674]    TraceD1_Pin=0x00040004
[01:12:23.674]    TraceD2_Pin=0x00040005
[01:12:23.675]    TraceD3_Pin=0x00040006
[01:12:23.675]  </debugvars>
[01:12:23.675]  
[01:12:23.675]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[01:12:23.675]    <block atomic="false" info="">
[01:12:23.675]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[01:12:23.676]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[01:12:23.676]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[01:12:23.676]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[01:12:23.677]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[01:12:23.677]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:12:23.677]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[01:12:23.678]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:12:23.678]    </block>
[01:12:23.678]  </sequence>
[01:12:23.678]  
[01:23:04.604]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:23:04.604]  
[01:23:04.604]  <debugvars>
[01:23:04.604]    // Pre-defined
[01:23:04.604]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:04.604]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:23:04.604]    __dp=0x00000000
[01:23:04.604]    __ap=0x00000000
[01:23:04.605]    __traceout=0x00000001      (SWO Trace)
[01:23:04.605]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:04.605]    __FlashAddr=0x00000000
[01:23:04.605]    __FlashLen=0x00000000
[01:23:04.605]    __FlashArg=0x00000000
[01:23:04.605]    __FlashOp=0x00000000
[01:23:04.606]    __Result=0x00000000
[01:23:04.606]    
[01:23:04.606]    // User-defined
[01:23:04.606]    DbgMCU_CR=0x00000007
[01:23:04.606]    DbgMCU_APB1_Fz=0x00000000
[01:23:04.606]    DbgMCU_APB2_Fz=0x00000000
[01:23:04.606]    TraceClk_Pin=0x00040002
[01:23:04.607]    TraceD0_Pin=0x00040003
[01:23:04.607]    TraceD1_Pin=0x00040004
[01:23:04.607]    TraceD2_Pin=0x00040005
[01:23:04.607]    TraceD3_Pin=0x00040006
[01:23:04.607]  </debugvars>
[01:23:04.607]  
[01:23:04.607]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:23:04.608]    <block atomic="false" info="">
[01:23:04.608]      Sequence("CheckID");
[01:23:04.608]        <sequence name="CheckID" Pname="" disable="false" info="">
[01:23:04.608]          <block atomic="false" info="">
[01:23:04.608]            __var pidr1 = 0;
[01:23:04.608]              // -> [pidr1 <= 0x00000000]
[01:23:04.609]            __var pidr2 = 0;
[01:23:04.609]              // -> [pidr2 <= 0x00000000]
[01:23:04.609]            __var jep106id = 0;
[01:23:04.609]              // -> [jep106id <= 0x00000000]
[01:23:04.609]            __var ROMTableBase = 0;
[01:23:04.609]              // -> [ROMTableBase <= 0x00000000]
[01:23:04.609]            __ap = 0;      // AHB-AP
[01:23:04.609]              // -> [__ap <= 0x00000000]
[01:23:04.609]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[01:23:04.610]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.610]              // -> [ROMTableBase <= 0xE00FD000]
[01:23:04.610]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[01:23:04.611]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.611]              // -> [pidr1 <= 0x00000004]
[01:23:04.611]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[01:23:04.611]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.612]              // -> [pidr2 <= 0x0000001A]
[01:23:04.612]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[01:23:04.612]              // -> [jep106id <= 0x00000020]
[01:23:04.612]          </block>
[01:23:04.612]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[01:23:04.612]            // if-block "jep106id != 0x20"
[01:23:04.612]              // =>  FALSE
[01:23:04.612]            // skip if-block "jep106id != 0x20"
[01:23:04.612]          </control>
[01:23:04.612]        </sequence>
[01:23:04.613]    </block>
[01:23:04.613]  </sequence>
[01:23:04.613]  
[01:23:04.627]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[01:23:04.627]  
[01:23:04.628]  <debugvars>
[01:23:04.628]    // Pre-defined
[01:23:04.628]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:04.628]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:23:04.628]    __dp=0x00000000
[01:23:04.629]    __ap=0x00000000
[01:23:04.629]    __traceout=0x00000001      (SWO Trace)
[01:23:04.629]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:04.629]    __FlashAddr=0x00000000
[01:23:04.629]    __FlashLen=0x00000000
[01:23:04.630]    __FlashArg=0x00000000
[01:23:04.630]    __FlashOp=0x00000000
[01:23:04.630]    __Result=0x00000000
[01:23:04.630]    
[01:23:04.630]    // User-defined
[01:23:04.631]    DbgMCU_CR=0x00000007
[01:23:04.631]    DbgMCU_APB1_Fz=0x00000000
[01:23:04.631]    DbgMCU_APB2_Fz=0x00000000
[01:23:04.631]    TraceClk_Pin=0x00040002
[01:23:04.631]    TraceD0_Pin=0x00040003
[01:23:04.631]    TraceD1_Pin=0x00040004
[01:23:04.632]    TraceD2_Pin=0x00040005
[01:23:04.632]    TraceD3_Pin=0x00040006
[01:23:04.632]  </debugvars>
[01:23:04.632]  
[01:23:04.632]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[01:23:04.632]    <block atomic="false" info="">
[01:23:04.632]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[01:23:04.633]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.633]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[01:23:04.634]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.634]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[01:23:04.634]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.635]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[01:23:04.635]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.635]    </block>
[01:23:04.635]  </sequence>
[01:23:04.635]  
[01:23:04.652]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[01:23:04.652]  
[01:23:04.653]  <debugvars>
[01:23:04.653]    // Pre-defined
[01:23:04.653]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:04.653]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:23:04.653]    __dp=0x00000000
[01:23:04.654]    __ap=0x00000000
[01:23:04.654]    __traceout=0x00000001      (SWO Trace)
[01:23:04.654]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:04.654]    __FlashAddr=0x00000000
[01:23:04.654]    __FlashLen=0x00000000
[01:23:04.654]    __FlashArg=0x00000000
[01:23:04.655]    __FlashOp=0x00000000
[01:23:04.655]    __Result=0x00000000
[01:23:04.655]    
[01:23:04.655]    // User-defined
[01:23:04.655]    DbgMCU_CR=0x00000007
[01:23:04.655]    DbgMCU_APB1_Fz=0x00000000
[01:23:04.655]    DbgMCU_APB2_Fz=0x00000000
[01:23:04.655]    TraceClk_Pin=0x00040002
[01:23:04.656]    TraceD0_Pin=0x00040003
[01:23:04.656]    TraceD1_Pin=0x00040004
[01:23:04.656]    TraceD2_Pin=0x00040005
[01:23:04.656]    TraceD3_Pin=0x00040006
[01:23:04.656]  </debugvars>
[01:23:04.656]  
[01:23:04.657]  <sequence name="TraceStart" Pname="" disable="false" info="">
[01:23:04.657]    <block atomic="false" info="">
[01:23:04.657]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[01:23:04.657]        // -> [traceSWO <= 0x00000001]
[01:23:04.657]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[01:23:04.657]        // -> [traceTPIU <= 0x00000000]
[01:23:04.657]    </block>
[01:23:04.657]    <control if="traceSWO" while="" timeout="0" info="">
[01:23:04.658]      // if-block "traceSWO"
[01:23:04.658]        // =>  TRUE
[01:23:04.658]      <block atomic="false" info="">
[01:23:04.658]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[01:23:04.658]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[01:23:04.658]            <block atomic="false" info="">
[01:23:04.658]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[01:23:04.659]                // -> [dbgmcu_val <= 0x00000000]
[01:23:04.659]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[01:23:04.659]                // -> [dbgmcu_trace_val <= 0x00000000]
[01:23:04.659]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[01:23:04.660]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.660]                // -> [dbgmcu_val <= 0x00000007]
[01:23:04.660]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[01:23:04.660]                // -> [dbgmcu_trace_val <= 0x00000020]
[01:23:04.660]              Sequence("ConfigureTraceSWOPin");
[01:23:04.660]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[01:23:04.660]                  <block atomic="false" info="">
[01:23:04.661]                    __var pin     = 0;
[01:23:04.661]                      // -> [pin <= 0x00000000]
[01:23:04.661]                    __var port    = 0;
[01:23:04.661]                      // -> [port <= 0x00000000]
[01:23:04.661]                    __var portAdr = 0;
[01:23:04.661]                      // -> [portAdr <= 0x00000000]
[01:23:04.661]                    __var pos     = 0;
[01:23:04.661]                      // -> [pos <= 0x00000000]
[01:23:04.662]                    __var SWO_Pin = 0x00010003;          // PB3
[01:23:04.662]                      // -> [SWO_Pin <= 0x00010003]
[01:23:04.662]                  </block>
[01:23:04.662]                  <block atomic="false" info="configure SWO">
[01:23:04.662]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[01:23:04.662]                      // -> [pin <= 0x00000003]
[01:23:04.662]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[01:23:04.662]                      // -> [port <= 0x00000001]
[01:23:04.663]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[01:23:04.663]                      // -> [portAdr <= 0x40020400]
[01:23:04.663]                    pos = pin * 2;
[01:23:04.663]                      // -> [pos <= 0x00000006]
[01:23:04.663]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[01:23:04.664]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.664]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.664]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[01:23:04.665]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.665]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.665]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[01:23:04.666]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.666]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.666]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[01:23:04.667]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.667]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.667]                  </block>
[01:23:04.667]                  <control if="pin <  8" while="" timeout="0" info="">
[01:23:04.667]                    // if-block "pin <  8"
[01:23:04.668]                      // =>  TRUE
[01:23:04.668]                    <block atomic="false" info="">
[01:23:04.668]                      pos = ((pin    ) & 7) * 4;
[01:23:04.668]                        // -> [pos <= 0x0000000C]
[01:23:04.668]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[01:23:04.669]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.669]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.669]                    </block>
[01:23:04.669]                    // end if-block "pin <  8"
[01:23:04.669]                  </control>
[01:23:04.670]                  <control if="pin >= 8" while="" timeout="0" info="">
[01:23:04.670]                    // if-block "pin >= 8"
[01:23:04.670]                      // =>  FALSE
[01:23:04.670]                    // skip if-block "pin >= 8"
[01:23:04.670]                  </control>
[01:23:04.670]                </sequence>
[01:23:04.670]            </block>
[01:23:04.670]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[01:23:04.671]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[01:23:04.671]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.671]            </block>
[01:23:04.671]          </sequence>
[01:23:04.671]      </block>
[01:23:04.671]      // end if-block "traceSWO"
[01:23:04.671]    </control>
[01:23:04.672]    <control if="traceTPIU" while="" timeout="0" info="">
[01:23:04.672]      // if-block "traceTPIU"
[01:23:04.672]        // =>  FALSE
[01:23:04.672]      // skip if-block "traceTPIU"
[01:23:04.672]    </control>
[01:23:04.672]  </sequence>
[01:23:04.672]  
[01:23:04.676]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[01:23:04.676]  
[01:23:04.676]  <debugvars>
[01:23:04.676]    // Pre-defined
[01:23:04.677]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:04.677]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:23:04.677]    __dp=0x00000000
[01:23:04.677]    __ap=0x00000000
[01:23:04.677]    __traceout=0x00000001      (SWO Trace)
[01:23:04.677]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:04.678]    __FlashAddr=0x00000000
[01:23:04.678]    __FlashLen=0x00000000
[01:23:04.678]    __FlashArg=0x00000000
[01:23:04.678]    __FlashOp=0x00000000
[01:23:04.678]    __Result=0x00000000
[01:23:04.679]    
[01:23:04.679]    // User-defined
[01:23:04.679]    DbgMCU_CR=0x00000007
[01:23:04.679]    DbgMCU_APB1_Fz=0x00000000
[01:23:04.679]    DbgMCU_APB2_Fz=0x00000000
[01:23:04.679]    TraceClk_Pin=0x00040002
[01:23:04.679]    TraceD0_Pin=0x00040003
[01:23:04.679]    TraceD1_Pin=0x00040004
[01:23:04.680]    TraceD2_Pin=0x00040005
[01:23:04.680]    TraceD3_Pin=0x00040006
[01:23:04.680]  </debugvars>
[01:23:04.680]  
[01:23:04.680]  <sequence name="TraceStart" Pname="" disable="false" info="">
[01:23:04.680]    <block atomic="false" info="">
[01:23:04.680]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[01:23:04.681]        // -> [traceSWO <= 0x00000001]
[01:23:04.681]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[01:23:04.681]        // -> [traceTPIU <= 0x00000000]
[01:23:04.681]    </block>
[01:23:04.681]    <control if="traceSWO" while="" timeout="0" info="">
[01:23:04.681]      // if-block "traceSWO"
[01:23:04.681]        // =>  TRUE
[01:23:04.682]      <block atomic="false" info="">
[01:23:04.682]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[01:23:04.682]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[01:23:04.682]            <block atomic="false" info="">
[01:23:04.682]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[01:23:04.682]                // -> [dbgmcu_val <= 0x00000000]
[01:23:04.682]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[01:23:04.682]                // -> [dbgmcu_trace_val <= 0x00000000]
[01:23:04.682]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[01:23:04.683]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.683]                // -> [dbgmcu_val <= 0x00000007]
[01:23:04.683]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[01:23:04.683]                // -> [dbgmcu_trace_val <= 0x00000020]
[01:23:04.684]              Sequence("ConfigureTraceSWOPin");
[01:23:04.684]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[01:23:04.684]                  <block atomic="false" info="">
[01:23:04.684]                    __var pin     = 0;
[01:23:04.684]                      // -> [pin <= 0x00000000]
[01:23:04.684]                    __var port    = 0;
[01:23:04.684]                      // -> [port <= 0x00000000]
[01:23:04.684]                    __var portAdr = 0;
[01:23:04.684]                      // -> [portAdr <= 0x00000000]
[01:23:04.684]                    __var pos     = 0;
[01:23:04.685]                      // -> [pos <= 0x00000000]
[01:23:04.685]                    __var SWO_Pin = 0x00010003;          // PB3
[01:23:04.685]                      // -> [SWO_Pin <= 0x00010003]
[01:23:04.685]                  </block>
[01:23:04.685]                  <block atomic="false" info="configure SWO">
[01:23:04.685]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[01:23:04.685]                      // -> [pin <= 0x00000003]
[01:23:04.686]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[01:23:04.686]                      // -> [port <= 0x00000001]
[01:23:04.686]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[01:23:04.686]                      // -> [portAdr <= 0x40020400]
[01:23:04.686]                    pos = pin * 2;
[01:23:04.686]                      // -> [pos <= 0x00000006]
[01:23:04.686]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[01:23:04.687]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.687]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.687]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[01:23:04.688]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.688]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.688]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[01:23:04.689]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.689]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.689]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[01:23:04.690]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.690]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.690]                  </block>
[01:23:04.690]                  <control if="pin <  8" while="" timeout="0" info="">
[01:23:04.691]                    // if-block "pin <  8"
[01:23:04.691]                      // =>  TRUE
[01:23:04.691]                    <block atomic="false" info="">
[01:23:04.691]                      pos = ((pin    ) & 7) * 4;
[01:23:04.691]                        // -> [pos <= 0x0000000C]
[01:23:04.691]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[01:23:04.691]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.692]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.692]                    </block>
[01:23:04.692]                    // end if-block "pin <  8"
[01:23:04.692]                  </control>
[01:23:04.693]                  <control if="pin >= 8" while="" timeout="0" info="">
[01:23:04.693]                    // if-block "pin >= 8"
[01:23:04.693]                      // =>  FALSE
[01:23:04.693]                    // skip if-block "pin >= 8"
[01:23:04.693]                  </control>
[01:23:04.693]                </sequence>
[01:23:04.693]            </block>
[01:23:04.693]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[01:23:04.693]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[01:23:04.694]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.694]            </block>
[01:23:04.694]          </sequence>
[01:23:04.694]      </block>
[01:23:04.694]      // end if-block "traceSWO"
[01:23:04.695]    </control>
[01:23:04.695]    <control if="traceTPIU" while="" timeout="0" info="">
[01:23:04.695]      // if-block "traceTPIU"
[01:23:04.695]        // =>  FALSE
[01:23:04.695]      // skip if-block "traceTPIU"
[01:23:04.695]    </control>
[01:23:04.695]  </sequence>
[01:23:04.695]  
[01:23:04.917]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[01:23:04.917]  
[01:23:04.917]  <debugvars>
[01:23:04.917]    // Pre-defined
[01:23:04.917]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:04.917]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:23:04.917]    __dp=0x00000000
[01:23:04.918]    __ap=0x00000000
[01:23:04.918]    __traceout=0x00000001      (SWO Trace)
[01:23:04.918]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:04.918]    __FlashAddr=0x00000000
[01:23:04.918]    __FlashLen=0x00000000
[01:23:04.918]    __FlashArg=0x00000000
[01:23:04.918]    __FlashOp=0x00000000
[01:23:04.919]    __Result=0x00000000
[01:23:04.919]    
[01:23:04.919]    // User-defined
[01:23:04.919]    DbgMCU_CR=0x00000007
[01:23:04.919]    DbgMCU_APB1_Fz=0x00000000
[01:23:04.919]    DbgMCU_APB2_Fz=0x00000000
[01:23:04.919]    TraceClk_Pin=0x00040002
[01:23:04.919]    TraceD0_Pin=0x00040003
[01:23:04.920]    TraceD1_Pin=0x00040004
[01:23:04.920]    TraceD2_Pin=0x00040005
[01:23:04.920]    TraceD3_Pin=0x00040006
[01:23:04.920]  </debugvars>
[01:23:04.920]  
[01:23:04.920]  <sequence name="TraceStart" Pname="" disable="false" info="">
[01:23:04.920]    <block atomic="false" info="">
[01:23:04.920]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[01:23:04.921]        // -> [traceSWO <= 0x00000001]
[01:23:04.921]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[01:23:04.921]        // -> [traceTPIU <= 0x00000000]
[01:23:04.921]    </block>
[01:23:04.921]    <control if="traceSWO" while="" timeout="0" info="">
[01:23:04.921]      // if-block "traceSWO"
[01:23:04.922]        // =>  TRUE
[01:23:04.922]      <block atomic="false" info="">
[01:23:04.922]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[01:23:04.922]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[01:23:04.922]            <block atomic="false" info="">
[01:23:04.922]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[01:23:04.922]                // -> [dbgmcu_val <= 0x00000000]
[01:23:04.922]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[01:23:04.922]                // -> [dbgmcu_trace_val <= 0x00000000]
[01:23:04.923]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[01:23:04.923]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.923]                // -> [dbgmcu_val <= 0x00000007]
[01:23:04.923]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[01:23:04.924]                // -> [dbgmcu_trace_val <= 0x00000020]
[01:23:04.924]              Sequence("ConfigureTraceSWOPin");
[01:23:04.924]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[01:23:04.924]                  <block atomic="false" info="">
[01:23:04.924]                    __var pin     = 0;
[01:23:04.924]                      // -> [pin <= 0x00000000]
[01:23:04.924]                    __var port    = 0;
[01:23:04.924]                      // -> [port <= 0x00000000]
[01:23:04.924]                    __var portAdr = 0;
[01:23:04.925]                      // -> [portAdr <= 0x00000000]
[01:23:04.925]                    __var pos     = 0;
[01:23:04.925]                      // -> [pos <= 0x00000000]
[01:23:04.925]                    __var SWO_Pin = 0x00010003;          // PB3
[01:23:04.925]                      // -> [SWO_Pin <= 0x00010003]
[01:23:04.925]                  </block>
[01:23:04.925]                  <block atomic="false" info="configure SWO">
[01:23:04.925]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[01:23:04.926]                      // -> [pin <= 0x00000003]
[01:23:04.926]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[01:23:04.926]                      // -> [port <= 0x00000001]
[01:23:04.926]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[01:23:04.926]                      // -> [portAdr <= 0x40020400]
[01:23:04.926]                    pos = pin * 2;
[01:23:04.926]                      // -> [pos <= 0x00000006]
[01:23:04.926]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[01:23:04.927]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.927]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.927]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[01:23:04.928]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.928]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.928]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[01:23:04.929]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.929]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.929]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[01:23:04.930]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.930]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.930]                  </block>
[01:23:04.930]                  <control if="pin <  8" while="" timeout="0" info="">
[01:23:04.931]                    // if-block "pin <  8"
[01:23:04.931]                      // =>  TRUE
[01:23:04.931]                    <block atomic="false" info="">
[01:23:04.931]                      pos = ((pin    ) & 7) * 4;
[01:23:04.931]                        // -> [pos <= 0x0000000C]
[01:23:04.931]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[01:23:04.932]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.932]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.932]                    </block>
[01:23:04.932]                    // end if-block "pin <  8"
[01:23:04.933]                  </control>
[01:23:04.933]                  <control if="pin >= 8" while="" timeout="0" info="">
[01:23:04.933]                    // if-block "pin >= 8"
[01:23:04.933]                      // =>  FALSE
[01:23:04.933]                    // skip if-block "pin >= 8"
[01:23:04.933]                  </control>
[01:23:04.933]                </sequence>
[01:23:04.933]            </block>
[01:23:04.933]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[01:23:04.933]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[01:23:04.934]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:04.934]            </block>
[01:23:04.934]          </sequence>
[01:23:04.934]      </block>
[01:23:04.934]      // end if-block "traceSWO"
[01:23:04.934]    </control>
[01:23:04.935]    <control if="traceTPIU" while="" timeout="0" info="">
[01:23:04.935]      // if-block "traceTPIU"
[01:23:04.935]        // =>  FALSE
[01:23:04.935]      // skip if-block "traceTPIU"
[01:23:04.935]    </control>
[01:23:04.935]  </sequence>
[01:23:04.935]  
[01:23:45.337]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[01:23:45.337]  
[01:23:45.338]  <debugvars>
[01:23:45.338]    // Pre-defined
[01:23:45.338]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:45.338]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:23:45.338]    __dp=0x00000000
[01:23:45.338]    __ap=0x00000000
[01:23:45.339]    __traceout=0x00000001      (SWO Trace)
[01:23:45.339]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:45.339]    __FlashAddr=0x00000000
[01:23:45.339]    __FlashLen=0x00000000
[01:23:45.339]    __FlashArg=0x00000000
[01:23:45.340]    __FlashOp=0x00000000
[01:23:45.340]    __Result=0x00000000
[01:23:45.340]    
[01:23:45.340]    // User-defined
[01:23:45.340]    DbgMCU_CR=0x00000007
[01:23:45.340]    DbgMCU_APB1_Fz=0x00000000
[01:23:45.341]    DbgMCU_APB2_Fz=0x00000000
[01:23:45.341]    TraceClk_Pin=0x00040002
[01:23:45.341]    TraceD0_Pin=0x00040003
[01:23:45.341]    TraceD1_Pin=0x00040004
[01:23:45.341]    TraceD2_Pin=0x00040005
[01:23:45.341]    TraceD3_Pin=0x00040006
[01:23:45.342]  </debugvars>
[01:23:45.342]  
[01:23:45.342]  <sequence name="TraceStart" Pname="" disable="false" info="">
[01:23:45.342]    <block atomic="false" info="">
[01:23:45.342]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[01:23:45.342]        // -> [traceSWO <= 0x00000001]
[01:23:45.342]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[01:23:45.343]        // -> [traceTPIU <= 0x00000000]
[01:23:45.343]    </block>
[01:23:45.343]    <control if="traceSWO" while="" timeout="0" info="">
[01:23:45.343]      // if-block "traceSWO"
[01:23:45.343]        // =>  TRUE
[01:23:45.344]      <block atomic="false" info="">
[01:23:45.344]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[01:23:45.344]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[01:23:45.344]            <block atomic="false" info="">
[01:23:45.344]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[01:23:45.344]                // -> [dbgmcu_val <= 0x00000000]
[01:23:45.344]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[01:23:45.345]                // -> [dbgmcu_trace_val <= 0x00000000]
[01:23:45.345]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[01:23:45.345]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[01:23:45.345]                // -> [dbgmcu_val <= 0x00000007]
[01:23:45.346]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[01:23:45.346]                // -> [dbgmcu_trace_val <= 0x00000020]
[01:23:45.346]              Sequence("ConfigureTraceSWOPin");
[01:23:45.346]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[01:23:45.346]                  <block atomic="false" info="">
[01:23:45.346]                    __var pin     = 0;
[01:23:45.346]                      // -> [pin <= 0x00000000]
[01:23:45.347]                    __var port    = 0;
[01:23:45.347]                      // -> [port <= 0x00000000]
[01:23:45.347]                    __var portAdr = 0;
[01:23:45.347]                      // -> [portAdr <= 0x00000000]
[01:23:45.347]                    __var pos     = 0;
[01:23:45.347]                      // -> [pos <= 0x00000000]
[01:23:45.347]                    __var SWO_Pin = 0x00010003;          // PB3
[01:23:45.347]                      // -> [SWO_Pin <= 0x00010003]
[01:23:45.348]                  </block>
[01:23:45.348]                  <block atomic="false" info="configure SWO">
[01:23:45.348]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[01:23:45.348]                      // -> [pin <= 0x00000003]
[01:23:45.348]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[01:23:45.348]                      // -> [port <= 0x00000001]
[01:23:45.348]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[01:23:45.348]                      // -> [portAdr <= 0x40020400]
[01:23:45.349]                    pos = pin * 2;
[01:23:45.349]                      // -> [pos <= 0x00000006]
[01:23:45.349]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[01:23:45.349]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[01:23:45.350]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:45.350]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[01:23:45.350]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[01:23:45.351]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:45.351]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[01:23:45.351]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[01:23:45.352]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:45.352]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[01:23:45.352]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[01:23:45.353]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:45.353]                  </block>
[01:23:45.353]                  <control if="pin <  8" while="" timeout="0" info="">
[01:23:45.353]                    // if-block "pin <  8"
[01:23:45.353]                      // =>  TRUE
[01:23:45.353]                    <block atomic="false" info="">
[01:23:45.353]                      pos = ((pin    ) & 7) * 4;
[01:23:45.353]                        // -> [pos <= 0x0000000C]
[01:23:45.354]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[01:23:45.354]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[01:23:45.355]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:45.355]                    </block>
[01:23:45.355]                    // end if-block "pin <  8"
[01:23:45.355]                  </control>
[01:23:45.355]                  <control if="pin >= 8" while="" timeout="0" info="">
[01:23:45.355]                    // if-block "pin >= 8"
[01:23:45.355]                      // =>  FALSE
[01:23:45.356]                    // skip if-block "pin >= 8"
[01:23:45.356]                  </control>
[01:23:45.356]                </sequence>
[01:23:45.356]            </block>
[01:23:45.356]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[01:23:45.356]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[01:23:45.357]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:45.357]            </block>
[01:23:45.357]          </sequence>
[01:23:45.357]      </block>
[01:23:45.357]      // end if-block "traceSWO"
[01:23:45.358]    </control>
[01:23:45.358]    <control if="traceTPIU" while="" timeout="0" info="">
[01:23:45.358]      // if-block "traceTPIU"
[01:23:45.358]        // =>  FALSE
[01:23:45.358]      // skip if-block "traceTPIU"
[01:23:45.358]    </control>
[01:23:45.358]  </sequence>
[01:23:45.358]  
[01:23:47.590]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[01:23:47.590]  
[01:23:47.782]  <debugvars>
[01:23:47.782]    // Pre-defined
[01:23:47.783]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:47.783]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:23:47.783]    __dp=0x00000000
[01:23:47.783]    __ap=0x00000000
[01:23:47.784]    __traceout=0x00000001      (SWO Trace)
[01:23:47.784]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:47.784]    __FlashAddr=0x00000000
[01:23:47.784]    __FlashLen=0x00000000
[01:23:47.784]    __FlashArg=0x00000000
[01:23:47.785]    __FlashOp=0x00000000
[01:23:47.785]    __Result=0x00000000
[01:23:47.785]    
[01:23:47.785]    // User-defined
[01:23:47.785]    DbgMCU_CR=0x00000007
[01:23:47.785]    DbgMCU_APB1_Fz=0x00000000
[01:23:47.786]    DbgMCU_APB2_Fz=0x00000000
[01:23:47.786]    TraceClk_Pin=0x00040002
[01:23:47.786]    TraceD0_Pin=0x00040003
[01:23:47.786]    TraceD1_Pin=0x00040004
[01:23:47.786]    TraceD2_Pin=0x00040005
[01:23:47.786]    TraceD3_Pin=0x00040006
[01:23:47.787]  </debugvars>
[01:23:47.787]  
[01:23:47.787]  <sequence name="TraceStop" Pname="" disable="false" info="">
[01:23:47.787]    <block atomic="false" info="">
[01:23:47.787]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[01:23:47.787]        // -> [traceSWO <= 0x00000001]
[01:23:47.788]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[01:23:47.788]        // -> [traceTPIU <= 0x00000000]
[01:23:47.788]    </block>
[01:23:47.788]    <control if="traceSWO" while="" timeout="0" info="">
[01:23:47.788]      // if-block "traceSWO"
[01:23:47.789]        // =>  TRUE
[01:23:47.789]      <block atomic="false" info="">
[01:23:47.789]        Sequence("DisableTraceSWO");
[01:23:47.789]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[01:23:47.789]            <block atomic="false" info="">
[01:23:47.789]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[01:23:47.789]                // -> [dbgmcu_val <= 0x00000000]
[01:23:47.790]            </block>
[01:23:47.790]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[01:23:47.790]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[01:23:47.790]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[01:23:47.791]                // -> [dbgmcu_val <= 0x00000007]
[01:23:47.791]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[01:23:47.791]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[01:23:47.791]            </block>
[01:23:47.792]          </sequence>
[01:23:47.792]      </block>
[01:23:47.792]      // end if-block "traceSWO"
[01:23:47.792]    </control>
[01:23:47.792]    <control if="traceTPIU" while="" timeout="0" info="">
[01:23:47.792]      // if-block "traceTPIU"
[01:23:47.792]        // =>  FALSE
[01:23:47.792]      // skip if-block "traceTPIU"
[01:23:47.793]    </control>
[01:23:47.793]  </sequence>
[01:23:47.793]  
[01:48:05.671]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:48:05.671]  
[01:48:05.672]  <debugvars>
[01:48:05.672]    // Pre-defined
[01:48:05.672]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:48:05.672]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[01:48:05.673]    __dp=0x00000000
[01:48:05.673]    __ap=0x00000000
[01:48:05.673]    __traceout=0x00000001      (SWO Trace)
[01:48:05.673]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:48:05.673]    __FlashAddr=0x00000000
[01:48:05.674]    __FlashLen=0x00000000
[01:48:05.674]    __FlashArg=0x00000000
[01:48:05.674]    __FlashOp=0x00000000
[01:48:05.674]    __Result=0x00000000
[01:48:05.674]    
[01:48:05.674]    // User-defined
[01:48:05.675]    DbgMCU_CR=0x00000007
[01:48:05.675]    DbgMCU_APB1_Fz=0x00000000
[01:48:05.675]    DbgMCU_APB2_Fz=0x00000000
[01:48:05.675]    TraceClk_Pin=0x00040002
[01:48:05.675]    TraceD0_Pin=0x00040003
[01:48:05.675]    TraceD1_Pin=0x00040004
[01:48:05.675]    TraceD2_Pin=0x00040005
[01:48:05.676]    TraceD3_Pin=0x00040006
[01:48:05.676]  </debugvars>
[01:48:05.676]  
[01:48:05.676]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:48:05.676]    <block atomic="false" info="">
[01:48:05.676]      Sequence("CheckID");
[01:48:05.677]        <sequence name="CheckID" Pname="" disable="false" info="">
[01:48:05.677]          <block atomic="false" info="">
[01:48:05.677]            __var pidr1 = 0;
[01:48:05.677]              // -> [pidr1 <= 0x00000000]
[01:48:05.677]            __var pidr2 = 0;
[01:48:05.677]              // -> [pidr2 <= 0x00000000]
[01:48:05.678]            __var jep106id = 0;
[01:48:05.678]              // -> [jep106id <= 0x00000000]
[01:48:05.678]            __var ROMTableBase = 0;
[01:48:05.678]              // -> [ROMTableBase <= 0x00000000]
[01:48:05.678]            __ap = 0;      // AHB-AP
[01:48:05.678]              // -> [__ap <= 0x00000000]
[01:48:05.678]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[01:48:05.679]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[01:48:05.679]              // -> [ROMTableBase <= 0xE00FD000]
[01:48:05.679]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[01:48:05.680]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[01:48:05.680]              // -> [pidr1 <= 0x00000004]
[01:48:05.680]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[01:48:05.681]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[01:48:05.681]              // -> [pidr2 <= 0x0000001A]
[01:48:05.681]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[01:48:05.681]              // -> [jep106id <= 0x00000020]
[01:48:05.681]          </block>
[01:48:05.681]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[01:48:05.681]            // if-block "jep106id != 0x20"
[01:48:05.682]              // =>  FALSE
[01:48:05.682]            // skip if-block "jep106id != 0x20"
[01:48:05.682]          </control>
[01:48:05.682]        </sequence>
[01:48:05.682]    </block>
[01:48:05.682]  </sequence>
[01:48:05.682]  
[01:48:05.698]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[01:48:05.698]  
[01:48:05.698]  <debugvars>
[01:48:05.698]    // Pre-defined
[01:48:05.698]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:48:05.698]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[01:48:05.699]    __dp=0x00000000
[01:48:05.699]    __ap=0x00000000
[01:48:05.699]    __traceout=0x00000001      (SWO Trace)
[01:48:05.699]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:48:05.699]    __FlashAddr=0x00000000
[01:48:05.700]    __FlashLen=0x00000000
[01:48:05.700]    __FlashArg=0x00000000
[01:48:05.700]    __FlashOp=0x00000000
[01:48:05.700]    __Result=0x00000000
[01:48:05.700]    
[01:48:05.700]    // User-defined
[01:48:05.701]    DbgMCU_CR=0x00000007
[01:48:05.701]    DbgMCU_APB1_Fz=0x00000000
[01:48:05.701]    DbgMCU_APB2_Fz=0x00000000
[01:48:05.701]    TraceClk_Pin=0x00040002
[01:48:05.701]    TraceD0_Pin=0x00040003
[01:48:05.701]    TraceD1_Pin=0x00040004
[01:48:05.701]    TraceD2_Pin=0x00040005
[01:48:05.702]    TraceD3_Pin=0x00040006
[01:48:05.702]  </debugvars>
[01:48:05.702]  
[01:48:05.702]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[01:48:05.702]    <block atomic="false" info="">
[01:48:05.702]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[01:48:05.703]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:05.703]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[01:48:05.704]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:05.704]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[01:48:05.704]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:05.705]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[01:48:05.705]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:05.705]    </block>
[01:48:05.705]  </sequence>
[01:48:05.705]  
[01:48:36.973]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:48:36.973]  
[01:48:36.973]  <debugvars>
[01:48:36.973]    // Pre-defined
[01:48:36.973]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:48:36.973]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:48:36.973]    __dp=0x00000000
[01:48:36.973]    __ap=0x00000000
[01:48:36.974]    __traceout=0x00000001      (SWO Trace)
[01:48:36.974]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:48:36.974]    __FlashAddr=0x00000000
[01:48:36.974]    __FlashLen=0x00000000
[01:48:36.974]    __FlashArg=0x00000000
[01:48:36.974]    __FlashOp=0x00000000
[01:48:36.974]    __Result=0x00000000
[01:48:36.974]    
[01:48:36.974]    // User-defined
[01:48:36.975]    DbgMCU_CR=0x00000007
[01:48:36.975]    DbgMCU_APB1_Fz=0x00000000
[01:48:36.975]    DbgMCU_APB2_Fz=0x00000000
[01:48:36.975]    TraceClk_Pin=0x00040002
[01:48:36.975]    TraceD0_Pin=0x00040003
[01:48:36.975]    TraceD1_Pin=0x00040004
[01:48:36.975]    TraceD2_Pin=0x00040005
[01:48:36.976]    TraceD3_Pin=0x00040006
[01:48:36.976]  </debugvars>
[01:48:36.976]  
[01:48:36.976]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:48:36.976]    <block atomic="false" info="">
[01:48:36.976]      Sequence("CheckID");
[01:48:36.976]        <sequence name="CheckID" Pname="" disable="false" info="">
[01:48:36.977]          <block atomic="false" info="">
[01:48:36.977]            __var pidr1 = 0;
[01:48:36.977]              // -> [pidr1 <= 0x00000000]
[01:48:36.977]            __var pidr2 = 0;
[01:48:36.977]              // -> [pidr2 <= 0x00000000]
[01:48:36.977]            __var jep106id = 0;
[01:48:36.977]              // -> [jep106id <= 0x00000000]
[01:48:36.977]            __var ROMTableBase = 0;
[01:48:36.978]              // -> [ROMTableBase <= 0x00000000]
[01:48:36.978]            __ap = 0;      // AHB-AP
[01:48:36.978]              // -> [__ap <= 0x00000000]
[01:48:36.978]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[01:48:36.978]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[01:48:36.978]              // -> [ROMTableBase <= 0xE00FD000]
[01:48:36.979]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[01:48:36.979]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[01:48:36.979]              // -> [pidr1 <= 0x00000004]
[01:48:36.979]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[01:48:36.980]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[01:48:36.980]              // -> [pidr2 <= 0x0000001A]
[01:48:36.980]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[01:48:36.980]              // -> [jep106id <= 0x00000020]
[01:48:36.980]          </block>
[01:48:36.980]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[01:48:36.981]            // if-block "jep106id != 0x20"
[01:48:36.981]              // =>  FALSE
[01:48:36.981]            // skip if-block "jep106id != 0x20"
[01:48:36.981]          </control>
[01:48:36.981]        </sequence>
[01:48:36.981]    </block>
[01:48:36.981]  </sequence>
[01:48:36.982]  
[01:48:36.996]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[01:48:36.996]  
[01:48:36.997]  <debugvars>
[01:48:36.997]    // Pre-defined
[01:48:36.997]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:48:36.997]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:48:36.997]    __dp=0x00000000
[01:48:36.997]    __ap=0x00000000
[01:48:36.997]    __traceout=0x00000001      (SWO Trace)
[01:48:36.997]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:48:36.997]    __FlashAddr=0x00000000
[01:48:36.998]    __FlashLen=0x00000000
[01:48:36.998]    __FlashArg=0x00000000
[01:48:36.998]    __FlashOp=0x00000000
[01:48:36.998]    __Result=0x00000000
[01:48:36.998]    
[01:48:36.998]    // User-defined
[01:48:36.998]    DbgMCU_CR=0x00000007
[01:48:36.999]    DbgMCU_APB1_Fz=0x00000000
[01:48:36.999]    DbgMCU_APB2_Fz=0x00000000
[01:48:36.999]    TraceClk_Pin=0x00040002
[01:48:36.999]    TraceD0_Pin=0x00040003
[01:48:36.999]    TraceD1_Pin=0x00040004
[01:48:36.999]    TraceD2_Pin=0x00040005
[01:48:36.999]    TraceD3_Pin=0x00040006
[01:48:36.999]  </debugvars>
[01:48:36.999]  
[01:48:36.999]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[01:48:37.000]    <block atomic="false" info="">
[01:48:37.000]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[01:48:37.000]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.001]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[01:48:37.001]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.001]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[01:48:37.002]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.002]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[01:48:37.002]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.002]    </block>
[01:48:37.003]  </sequence>
[01:48:37.003]  
[01:48:37.019]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[01:48:37.019]  
[01:48:37.019]  <debugvars>
[01:48:37.019]    // Pre-defined
[01:48:37.019]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:48:37.019]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:48:37.019]    __dp=0x00000000
[01:48:37.019]    __ap=0x00000000
[01:48:37.020]    __traceout=0x00000001      (SWO Trace)
[01:48:37.020]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:48:37.020]    __FlashAddr=0x00000000
[01:48:37.020]    __FlashLen=0x00000000
[01:48:37.020]    __FlashArg=0x00000000
[01:48:37.020]    __FlashOp=0x00000000
[01:48:37.020]    __Result=0x00000000
[01:48:37.020]    
[01:48:37.020]    // User-defined
[01:48:37.021]    DbgMCU_CR=0x00000007
[01:48:37.021]    DbgMCU_APB1_Fz=0x00000000
[01:48:37.021]    DbgMCU_APB2_Fz=0x00000000
[01:48:37.021]    TraceClk_Pin=0x00040002
[01:48:37.021]    TraceD0_Pin=0x00040003
[01:48:37.021]    TraceD1_Pin=0x00040004
[01:48:37.021]    TraceD2_Pin=0x00040005
[01:48:37.022]    TraceD3_Pin=0x00040006
[01:48:37.022]  </debugvars>
[01:48:37.022]  
[01:48:37.022]  <sequence name="TraceStart" Pname="" disable="false" info="">
[01:48:37.022]    <block atomic="false" info="">
[01:48:37.022]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[01:48:37.022]        // -> [traceSWO <= 0x00000001]
[01:48:37.022]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[01:48:37.022]        // -> [traceTPIU <= 0x00000000]
[01:48:37.023]    </block>
[01:48:37.023]    <control if="traceSWO" while="" timeout="0" info="">
[01:48:37.023]      // if-block "traceSWO"
[01:48:37.023]        // =>  TRUE
[01:48:37.023]      <block atomic="false" info="">
[01:48:37.023]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[01:48:37.023]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[01:48:37.024]            <block atomic="false" info="">
[01:48:37.024]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[01:48:37.024]                // -> [dbgmcu_val <= 0x00000000]
[01:48:37.024]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[01:48:37.024]                // -> [dbgmcu_trace_val <= 0x00000000]
[01:48:37.024]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[01:48:37.024]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.025]                // -> [dbgmcu_val <= 0x00000007]
[01:48:37.025]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[01:48:37.025]                // -> [dbgmcu_trace_val <= 0x00000020]
[01:48:37.025]              Sequence("ConfigureTraceSWOPin");
[01:48:37.025]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[01:48:37.025]                  <block atomic="false" info="">
[01:48:37.025]                    __var pin     = 0;
[01:48:37.026]                      // -> [pin <= 0x00000000]
[01:48:37.026]                    __var port    = 0;
[01:48:37.026]                      // -> [port <= 0x00000000]
[01:48:37.026]                    __var portAdr = 0;
[01:48:37.026]                      // -> [portAdr <= 0x00000000]
[01:48:37.026]                    __var pos     = 0;
[01:48:37.026]                      // -> [pos <= 0x00000000]
[01:48:37.026]                    __var SWO_Pin = 0x00010003;          // PB3
[01:48:37.027]                      // -> [SWO_Pin <= 0x00010003]
[01:48:37.027]                  </block>
[01:48:37.027]                  <block atomic="false" info="configure SWO">
[01:48:37.027]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[01:48:37.027]                      // -> [pin <= 0x00000003]
[01:48:37.027]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[01:48:37.027]                      // -> [port <= 0x00000001]
[01:48:37.028]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[01:48:37.028]                      // -> [portAdr <= 0x40020400]
[01:48:37.028]                    pos = pin * 2;
[01:48:37.028]                      // -> [pos <= 0x00000006]
[01:48:37.028]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[01:48:37.029]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.029]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.029]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[01:48:37.030]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.030]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.030]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[01:48:37.031]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.031]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.031]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[01:48:37.032]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.032]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.032]                  </block>
[01:48:37.032]                  <control if="pin <  8" while="" timeout="0" info="">
[01:48:37.032]                    // if-block "pin <  8"
[01:48:37.032]                      // =>  TRUE
[01:48:37.033]                    <block atomic="false" info="">
[01:48:37.033]                      pos = ((pin    ) & 7) * 4;
[01:48:37.033]                        // -> [pos <= 0x0000000C]
[01:48:37.033]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[01:48:37.033]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.034]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.034]                    </block>
[01:48:37.034]                    // end if-block "pin <  8"
[01:48:37.034]                  </control>
[01:48:37.034]                  <control if="pin >= 8" while="" timeout="0" info="">
[01:48:37.034]                    // if-block "pin >= 8"
[01:48:37.035]                      // =>  FALSE
[01:48:37.035]                    // skip if-block "pin >= 8"
[01:48:37.035]                  </control>
[01:48:37.035]                </sequence>
[01:48:37.035]            </block>
[01:48:37.035]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[01:48:37.035]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[01:48:37.036]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.036]            </block>
[01:48:37.036]          </sequence>
[01:48:37.036]      </block>
[01:48:37.036]      // end if-block "traceSWO"
[01:48:37.036]    </control>
[01:48:37.037]    <control if="traceTPIU" while="" timeout="0" info="">
[01:48:37.037]      // if-block "traceTPIU"
[01:48:37.037]        // =>  FALSE
[01:48:37.037]      // skip if-block "traceTPIU"
[01:48:37.037]    </control>
[01:48:37.037]  </sequence>
[01:48:37.037]  
[01:48:37.041]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[01:48:37.041]  
[01:48:37.041]  <debugvars>
[01:48:37.041]    // Pre-defined
[01:48:37.041]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:48:37.041]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:48:37.042]    __dp=0x00000000
[01:48:37.042]    __ap=0x00000000
[01:48:37.042]    __traceout=0x00000001      (SWO Trace)
[01:48:37.042]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:48:37.042]    __FlashAddr=0x00000000
[01:48:37.043]    __FlashLen=0x00000000
[01:48:37.043]    __FlashArg=0x00000000
[01:48:37.043]    __FlashOp=0x00000000
[01:48:37.043]    __Result=0x00000000
[01:48:37.043]    
[01:48:37.043]    // User-defined
[01:48:37.043]    DbgMCU_CR=0x00000007
[01:48:37.043]    DbgMCU_APB1_Fz=0x00000000
[01:48:37.044]    DbgMCU_APB2_Fz=0x00000000
[01:48:37.044]    TraceClk_Pin=0x00040002
[01:48:37.044]    TraceD0_Pin=0x00040003
[01:48:37.044]    TraceD1_Pin=0x00040004
[01:48:37.044]    TraceD2_Pin=0x00040005
[01:48:37.044]    TraceD3_Pin=0x00040006
[01:48:37.044]  </debugvars>
[01:48:37.044]  
[01:48:37.044]  <sequence name="TraceStart" Pname="" disable="false" info="">
[01:48:37.045]    <block atomic="false" info="">
[01:48:37.045]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[01:48:37.045]        // -> [traceSWO <= 0x00000001]
[01:48:37.045]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[01:48:37.045]        // -> [traceTPIU <= 0x00000000]
[01:48:37.045]    </block>
[01:48:37.046]    <control if="traceSWO" while="" timeout="0" info="">
[01:48:37.046]      // if-block "traceSWO"
[01:48:37.046]        // =>  TRUE
[01:48:37.046]      <block atomic="false" info="">
[01:48:37.046]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[01:48:37.046]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[01:48:37.046]            <block atomic="false" info="">
[01:48:37.046]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[01:48:37.046]                // -> [dbgmcu_val <= 0x00000000]
[01:48:37.046]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[01:48:37.047]                // -> [dbgmcu_trace_val <= 0x00000000]
[01:48:37.047]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[01:48:37.047]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.047]                // -> [dbgmcu_val <= 0x00000007]
[01:48:37.048]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[01:48:37.048]                // -> [dbgmcu_trace_val <= 0x00000020]
[01:48:37.048]              Sequence("ConfigureTraceSWOPin");
[01:48:37.048]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[01:48:37.048]                  <block atomic="false" info="">
[01:48:37.048]                    __var pin     = 0;
[01:48:37.048]                      // -> [pin <= 0x00000000]
[01:48:37.048]                    __var port    = 0;
[01:48:37.048]                      // -> [port <= 0x00000000]
[01:48:37.049]                    __var portAdr = 0;
[01:48:37.049]                      // -> [portAdr <= 0x00000000]
[01:48:37.049]                    __var pos     = 0;
[01:48:37.049]                      // -> [pos <= 0x00000000]
[01:48:37.049]                    __var SWO_Pin = 0x00010003;          // PB3
[01:48:37.049]                      // -> [SWO_Pin <= 0x00010003]
[01:48:37.049]                  </block>
[01:48:37.050]                  <block atomic="false" info="configure SWO">
[01:48:37.050]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[01:48:37.050]                      // -> [pin <= 0x00000003]
[01:48:37.050]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[01:48:37.050]                      // -> [port <= 0x00000001]
[01:48:37.050]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[01:48:37.050]                      // -> [portAdr <= 0x40020400]
[01:48:37.050]                    pos = pin * 2;
[01:48:37.050]                      // -> [pos <= 0x00000006]
[01:48:37.051]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[01:48:37.051]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.051]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.052]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[01:48:37.052]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.052]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.053]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[01:48:37.053]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.053]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.054]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[01:48:37.054]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.054]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.054]                  </block>
[01:48:37.055]                  <control if="pin <  8" while="" timeout="0" info="">
[01:48:37.055]                    // if-block "pin <  8"
[01:48:37.055]                      // =>  TRUE
[01:48:37.055]                    <block atomic="false" info="">
[01:48:37.055]                      pos = ((pin    ) & 7) * 4;
[01:48:37.055]                        // -> [pos <= 0x0000000C]
[01:48:37.055]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[01:48:37.056]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.056]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.056]                    </block>
[01:48:37.056]                    // end if-block "pin <  8"
[01:48:37.057]                  </control>
[01:48:37.057]                  <control if="pin >= 8" while="" timeout="0" info="">
[01:48:37.057]                    // if-block "pin >= 8"
[01:48:37.057]                      // =>  FALSE
[01:48:37.057]                    // skip if-block "pin >= 8"
[01:48:37.057]                  </control>
[01:48:37.057]                </sequence>
[01:48:37.057]            </block>
[01:48:37.058]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[01:48:37.058]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[01:48:37.058]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.058]            </block>
[01:48:37.058]          </sequence>
[01:48:37.058]      </block>
[01:48:37.059]      // end if-block "traceSWO"
[01:48:37.059]    </control>
[01:48:37.059]    <control if="traceTPIU" while="" timeout="0" info="">
[01:48:37.059]      // if-block "traceTPIU"
[01:48:37.059]        // =>  FALSE
[01:48:37.059]      // skip if-block "traceTPIU"
[01:48:37.059]    </control>
[01:48:37.059]  </sequence>
[01:48:37.060]  
[01:48:37.272]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[01:48:37.272]  
[01:48:37.272]  <debugvars>
[01:48:37.273]    // Pre-defined
[01:48:37.273]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:48:37.273]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:48:37.273]    __dp=0x00000000
[01:48:37.273]    __ap=0x00000000
[01:48:37.273]    __traceout=0x00000001      (SWO Trace)
[01:48:37.273]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:48:37.273]    __FlashAddr=0x00000000
[01:48:37.274]    __FlashLen=0x00000000
[01:48:37.274]    __FlashArg=0x00000000
[01:48:37.274]    __FlashOp=0x00000000
[01:48:37.274]    __Result=0x00000000
[01:48:37.274]    
[01:48:37.274]    // User-defined
[01:48:37.274]    DbgMCU_CR=0x00000007
[01:48:37.274]    DbgMCU_APB1_Fz=0x00000000
[01:48:37.274]    DbgMCU_APB2_Fz=0x00000000
[01:48:37.274]    TraceClk_Pin=0x00040002
[01:48:37.275]    TraceD0_Pin=0x00040003
[01:48:37.275]    TraceD1_Pin=0x00040004
[01:48:37.275]    TraceD2_Pin=0x00040005
[01:48:37.275]    TraceD3_Pin=0x00040006
[01:48:37.275]  </debugvars>
[01:48:37.275]  
[01:48:37.275]  <sequence name="TraceStart" Pname="" disable="false" info="">
[01:48:37.276]    <block atomic="false" info="">
[01:48:37.276]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[01:48:37.276]        // -> [traceSWO <= 0x00000001]
[01:48:37.276]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[01:48:37.276]        // -> [traceTPIU <= 0x00000000]
[01:48:37.276]    </block>
[01:48:37.276]    <control if="traceSWO" while="" timeout="0" info="">
[01:48:37.276]      // if-block "traceSWO"
[01:48:37.277]        // =>  TRUE
[01:48:37.277]      <block atomic="false" info="">
[01:48:37.277]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[01:48:37.277]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[01:48:37.277]            <block atomic="false" info="">
[01:48:37.277]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[01:48:37.277]                // -> [dbgmcu_val <= 0x00000000]
[01:48:37.277]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[01:48:37.278]                // -> [dbgmcu_trace_val <= 0x00000000]
[01:48:37.278]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[01:48:37.278]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.278]                // -> [dbgmcu_val <= 0x00000007]
[01:48:37.278]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[01:48:37.278]                // -> [dbgmcu_trace_val <= 0x00000020]
[01:48:37.279]              Sequence("ConfigureTraceSWOPin");
[01:48:37.279]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[01:48:37.279]                  <block atomic="false" info="">
[01:48:37.279]                    __var pin     = 0;
[01:48:37.279]                      // -> [pin <= 0x00000000]
[01:48:37.279]                    __var port    = 0;
[01:48:37.279]                      // -> [port <= 0x00000000]
[01:48:37.280]                    __var portAdr = 0;
[01:48:37.280]                      // -> [portAdr <= 0x00000000]
[01:48:37.280]                    __var pos     = 0;
[01:48:37.280]                      // -> [pos <= 0x00000000]
[01:48:37.280]                    __var SWO_Pin = 0x00010003;          // PB3
[01:48:37.280]                      // -> [SWO_Pin <= 0x00010003]
[01:48:37.280]                  </block>
[01:48:37.281]                  <block atomic="false" info="configure SWO">
[01:48:37.281]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[01:48:37.281]                      // -> [pin <= 0x00000003]
[01:48:37.281]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[01:48:37.281]                      // -> [port <= 0x00000001]
[01:48:37.281]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[01:48:37.281]                      // -> [portAdr <= 0x40020400]
[01:48:37.282]                    pos = pin * 2;
[01:48:37.282]                      // -> [pos <= 0x00000006]
[01:48:37.282]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[01:48:37.282]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.283]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.283]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[01:48:37.283]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.284]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.284]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[01:48:37.284]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.285]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.285]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[01:48:37.285]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.286]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.286]                  </block>
[01:48:37.286]                  <control if="pin <  8" while="" timeout="0" info="">
[01:48:37.286]                    // if-block "pin <  8"
[01:48:37.286]                      // =>  TRUE
[01:48:37.286]                    <block atomic="false" info="">
[01:48:37.287]                      pos = ((pin    ) & 7) * 4;
[01:48:37.287]                        // -> [pos <= 0x0000000C]
[01:48:37.287]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[01:48:37.287]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.288]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.288]                    </block>
[01:48:37.288]                    // end if-block "pin <  8"
[01:48:37.288]                  </control>
[01:48:37.288]                  <control if="pin >= 8" while="" timeout="0" info="">
[01:48:37.288]                    // if-block "pin >= 8"
[01:48:37.289]                      // =>  FALSE
[01:48:37.289]                    // skip if-block "pin >= 8"
[01:48:37.289]                  </control>
[01:48:37.289]                </sequence>
[01:48:37.289]            </block>
[01:48:37.289]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[01:48:37.289]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[01:48:37.290]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[01:48:37.290]            </block>
[01:48:37.290]          </sequence>
[01:48:37.290]      </block>
[01:48:37.291]      // end if-block "traceSWO"
[01:48:37.291]    </control>
[01:48:37.291]    <control if="traceTPIU" while="" timeout="0" info="">
[01:48:37.291]      // if-block "traceTPIU"
[01:48:37.291]        // =>  FALSE
[01:48:37.291]      // skip if-block "traceTPIU"
[01:48:37.291]    </control>
[01:48:37.291]  </sequence>
[01:48:37.291]  
[01:58:16.237]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[01:58:16.237]  
[01:58:16.237]  <debugvars>
[01:58:16.237]    // Pre-defined
[01:58:16.238]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:58:16.238]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[01:58:16.238]    __dp=0x00000000
[01:58:16.238]    __ap=0x00000000
[01:58:16.238]    __traceout=0x00000001      (SWO Trace)
[01:58:16.239]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:58:16.239]    __FlashAddr=0x00000000
[01:58:16.239]    __FlashLen=0x00000000
[01:58:16.239]    __FlashArg=0x00000000
[01:58:16.239]    __FlashOp=0x00000000
[01:58:16.239]    __Result=0x00000000
[01:58:16.239]    
[01:58:16.239]    // User-defined
[01:58:16.240]    DbgMCU_CR=0x00000007
[01:58:16.240]    DbgMCU_APB1_Fz=0x00000000
[01:58:16.240]    DbgMCU_APB2_Fz=0x00000000
[01:58:16.240]    TraceClk_Pin=0x00040002
[01:58:16.240]    TraceD0_Pin=0x00040003
[01:58:16.240]    TraceD1_Pin=0x00040004
[01:58:16.241]    TraceD2_Pin=0x00040005
[01:58:16.241]    TraceD3_Pin=0x00040006
[01:58:16.241]  </debugvars>
[01:58:16.241]  
[01:58:16.241]  <sequence name="TraceStop" Pname="" disable="false" info="">
[01:58:16.241]    <block atomic="false" info="">
[01:58:16.242]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[01:58:16.242]        // -> [traceSWO <= 0x00000001]
[01:58:16.242]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[01:58:16.242]        // -> [traceTPIU <= 0x00000000]
[01:58:16.242]    </block>
[01:58:16.242]    <control if="traceSWO" while="" timeout="0" info="">
[01:58:16.242]      // if-block "traceSWO"
[01:58:16.243]        // =>  TRUE
[01:58:16.243]      <block atomic="false" info="">
[01:58:16.243]        Sequence("DisableTraceSWO");
[01:58:16.243]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[01:58:16.243]            <block atomic="false" info="">
[01:58:16.243]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[01:58:16.244]                // -> [dbgmcu_val <= 0x00000000]
[01:58:16.244]            </block>
[01:58:16.244]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[01:58:16.244]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[01:58:16.244]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[01:58:16.245]                // -> [dbgmcu_val <= 0x00000007]
[01:58:16.245]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[01:58:16.245]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[01:58:16.245]            </block>
[01:58:16.246]          </sequence>
[01:58:16.246]      </block>
[01:58:16.246]      // end if-block "traceSWO"
[01:58:16.246]    </control>
[01:58:16.246]    <control if="traceTPIU" while="" timeout="0" info="">
[01:58:16.246]      // if-block "traceTPIU"
[01:58:16.246]        // =>  FALSE
[01:58:16.247]      // skip if-block "traceTPIU"
[01:58:16.247]    </control>
[01:58:16.247]  </sequence>
[01:58:16.247]  
[01:59:52.539]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:59:52.539]  
[01:59:52.540]  <debugvars>
[01:59:52.540]    // Pre-defined
[01:59:52.540]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:59:52.540]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[01:59:52.540]    __dp=0x00000000
[01:59:52.541]    __ap=0x00000000
[01:59:52.541]    __traceout=0x00000001      (SWO Trace)
[01:59:52.541]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:59:52.541]    __FlashAddr=0x00000000
[01:59:52.541]    __FlashLen=0x00000000
[01:59:52.541]    __FlashArg=0x00000000
[01:59:52.541]    __FlashOp=0x00000000
[01:59:52.542]    __Result=0x00000000
[01:59:52.542]    
[01:59:52.542]    // User-defined
[01:59:52.542]    DbgMCU_CR=0x00000007
[01:59:52.542]    DbgMCU_APB1_Fz=0x00000000
[01:59:52.542]    DbgMCU_APB2_Fz=0x00000000
[01:59:52.543]    TraceClk_Pin=0x00040002
[01:59:52.543]    TraceD0_Pin=0x00040003
[01:59:52.543]    TraceD1_Pin=0x00040004
[01:59:52.543]    TraceD2_Pin=0x00040005
[01:59:52.543]    TraceD3_Pin=0x00040006
[01:59:52.543]  </debugvars>
[01:59:52.543]  
[01:59:52.544]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:59:52.544]    <block atomic="false" info="">
[01:59:52.544]      Sequence("CheckID");
[01:59:52.544]        <sequence name="CheckID" Pname="" disable="false" info="">
[01:59:52.544]          <block atomic="false" info="">
[01:59:52.544]            __var pidr1 = 0;
[01:59:52.545]              // -> [pidr1 <= 0x00000000]
[01:59:52.545]            __var pidr2 = 0;
[01:59:52.545]              // -> [pidr2 <= 0x00000000]
[01:59:52.545]            __var jep106id = 0;
[01:59:52.545]              // -> [jep106id <= 0x00000000]
[01:59:52.545]            __var ROMTableBase = 0;
[01:59:52.545]              // -> [ROMTableBase <= 0x00000000]
[01:59:52.545]            __ap = 0;      // AHB-AP
[01:59:52.545]              // -> [__ap <= 0x00000000]
[01:59:52.546]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[01:59:52.546]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[01:59:52.546]              // -> [ROMTableBase <= 0xE00FD000]
[01:59:52.546]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[01:59:52.547]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[01:59:52.547]              // -> [pidr1 <= 0x00000004]
[01:59:52.547]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[01:59:52.547]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[01:59:52.548]              // -> [pidr2 <= 0x0000001A]
[01:59:52.548]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[01:59:52.548]              // -> [jep106id <= 0x00000020]
[01:59:52.548]          </block>
[01:59:52.548]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[01:59:52.548]            // if-block "jep106id != 0x20"
[01:59:52.548]              // =>  FALSE
[01:59:52.548]            // skip if-block "jep106id != 0x20"
[01:59:52.548]          </control>
[01:59:52.548]        </sequence>
[01:59:52.549]    </block>
[01:59:52.549]  </sequence>
[01:59:52.549]  
[01:59:52.564]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[01:59:52.564]  
[01:59:52.564]  <debugvars>
[01:59:52.564]    // Pre-defined
[01:59:52.565]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:59:52.565]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[01:59:52.565]    __dp=0x00000000
[01:59:52.565]    __ap=0x00000000
[01:59:52.565]    __traceout=0x00000001      (SWO Trace)
[01:59:52.566]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:59:52.566]    __FlashAddr=0x00000000
[01:59:52.566]    __FlashLen=0x00000000
[01:59:52.566]    __FlashArg=0x00000000
[01:59:52.566]    __FlashOp=0x00000000
[01:59:52.566]    __Result=0x00000000
[01:59:52.567]    
[01:59:52.567]    // User-defined
[01:59:52.567]    DbgMCU_CR=0x00000007
[01:59:52.567]    DbgMCU_APB1_Fz=0x00000000
[01:59:52.567]    DbgMCU_APB2_Fz=0x00000000
[01:59:52.567]    TraceClk_Pin=0x00040002
[01:59:52.568]    TraceD0_Pin=0x00040003
[01:59:52.568]    TraceD1_Pin=0x00040004
[01:59:52.568]    TraceD2_Pin=0x00040005
[01:59:52.568]    TraceD3_Pin=0x00040006
[01:59:52.568]  </debugvars>
[01:59:52.568]  
[01:59:52.568]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[01:59:52.569]    <block atomic="false" info="">
[01:59:52.569]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[01:59:52.569]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[01:59:52.570]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[01:59:52.570]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[01:59:52.570]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[01:59:52.571]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:59:52.571]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[01:59:52.571]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[01:59:52.572]    </block>
[01:59:52.572]  </sequence>
[01:59:52.572]  
[02:00:34.572]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:00:34.572]  
[02:00:34.572]  <debugvars>
[02:00:34.572]    // Pre-defined
[02:00:34.572]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:00:34.573]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:00:34.573]    __dp=0x00000000
[02:00:34.573]    __ap=0x00000000
[02:00:34.573]    __traceout=0x00000001      (SWO Trace)
[02:00:34.573]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:00:34.573]    __FlashAddr=0x00000000
[02:00:34.574]    __FlashLen=0x00000000
[02:00:34.574]    __FlashArg=0x00000000
[02:00:34.574]    __FlashOp=0x00000000
[02:00:34.574]    __Result=0x00000000
[02:00:34.574]    
[02:00:34.574]    // User-defined
[02:00:34.574]    DbgMCU_CR=0x00000007
[02:00:34.575]    DbgMCU_APB1_Fz=0x00000000
[02:00:34.575]    DbgMCU_APB2_Fz=0x00000000
[02:00:34.575]    TraceClk_Pin=0x00040002
[02:00:34.575]    TraceD0_Pin=0x00040003
[02:00:34.575]    TraceD1_Pin=0x00040004
[02:00:34.575]    TraceD2_Pin=0x00040005
[02:00:34.575]    TraceD3_Pin=0x00040006
[02:00:34.576]  </debugvars>
[02:00:34.576]  
[02:00:34.576]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:00:34.576]    <block atomic="false" info="">
[02:00:34.576]      Sequence("CheckID");
[02:00:34.576]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:00:34.576]          <block atomic="false" info="">
[02:00:34.577]            __var pidr1 = 0;
[02:00:34.577]              // -> [pidr1 <= 0x00000000]
[02:00:34.577]            __var pidr2 = 0;
[02:00:34.577]              // -> [pidr2 <= 0x00000000]
[02:00:34.577]            __var jep106id = 0;
[02:00:34.577]              // -> [jep106id <= 0x00000000]
[02:00:34.577]            __var ROMTableBase = 0;
[02:00:34.578]              // -> [ROMTableBase <= 0x00000000]
[02:00:34.578]            __ap = 0;      // AHB-AP
[02:00:34.578]              // -> [__ap <= 0x00000000]
[02:00:34.578]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:00:34.578]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.579]              // -> [ROMTableBase <= 0xE00FD000]
[02:00:34.579]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:00:34.579]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.579]              // -> [pidr1 <= 0x00000004]
[02:00:34.579]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:00:34.580]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.580]              // -> [pidr2 <= 0x0000001A]
[02:00:34.580]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:00:34.580]              // -> [jep106id <= 0x00000020]
[02:00:34.580]          </block>
[02:00:34.580]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:00:34.580]            // if-block "jep106id != 0x20"
[02:00:34.581]              // =>  FALSE
[02:00:34.581]            // skip if-block "jep106id != 0x20"
[02:00:34.581]          </control>
[02:00:34.581]        </sequence>
[02:00:34.581]    </block>
[02:00:34.581]  </sequence>
[02:00:34.582]  
[02:00:34.596]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:00:34.596]  
[02:00:34.596]  <debugvars>
[02:00:34.596]    // Pre-defined
[02:00:34.596]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:00:34.596]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:00:34.597]    __dp=0x00000000
[02:00:34.597]    __ap=0x00000000
[02:00:34.597]    __traceout=0x00000001      (SWO Trace)
[02:00:34.597]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:00:34.597]    __FlashAddr=0x00000000
[02:00:34.598]    __FlashLen=0x00000000
[02:00:34.598]    __FlashArg=0x00000000
[02:00:34.598]    __FlashOp=0x00000000
[02:00:34.598]    __Result=0x00000000
[02:00:34.598]    
[02:00:34.598]    // User-defined
[02:00:34.599]    DbgMCU_CR=0x00000007
[02:00:34.599]    DbgMCU_APB1_Fz=0x00000000
[02:00:34.599]    DbgMCU_APB2_Fz=0x00000000
[02:00:34.599]    TraceClk_Pin=0x00040002
[02:00:34.599]    TraceD0_Pin=0x00040003
[02:00:34.599]    TraceD1_Pin=0x00040004
[02:00:34.600]    TraceD2_Pin=0x00040005
[02:00:34.600]    TraceD3_Pin=0x00040006
[02:00:34.600]  </debugvars>
[02:00:34.600]  
[02:00:34.600]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:00:34.600]    <block atomic="false" info="">
[02:00:34.600]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:00:34.601]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.601]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:00:34.602]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.602]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:00:34.602]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.603]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:00:34.603]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.603]    </block>
[02:00:34.603]  </sequence>
[02:00:34.603]  
[02:00:34.618]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[02:00:34.618]  
[02:00:34.618]  <debugvars>
[02:00:34.619]    // Pre-defined
[02:00:34.619]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:00:34.619]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:00:34.619]    __dp=0x00000000
[02:00:34.619]    __ap=0x00000000
[02:00:34.619]    __traceout=0x00000001      (SWO Trace)
[02:00:34.620]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:00:34.620]    __FlashAddr=0x00000000
[02:00:34.620]    __FlashLen=0x00000000
[02:00:34.620]    __FlashArg=0x00000000
[02:00:34.620]    __FlashOp=0x00000000
[02:00:34.621]    __Result=0x00000000
[02:00:34.621]    
[02:00:34.621]    // User-defined
[02:00:34.621]    DbgMCU_CR=0x00000007
[02:00:34.621]    DbgMCU_APB1_Fz=0x00000000
[02:00:34.621]    DbgMCU_APB2_Fz=0x00000000
[02:00:34.621]    TraceClk_Pin=0x00040002
[02:00:34.621]    TraceD0_Pin=0x00040003
[02:00:34.621]    TraceD1_Pin=0x00040004
[02:00:34.621]    TraceD2_Pin=0x00040005
[02:00:34.621]    TraceD3_Pin=0x00040006
[02:00:34.622]  </debugvars>
[02:00:34.622]  
[02:00:34.622]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:00:34.622]    <block atomic="false" info="">
[02:00:34.622]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:00:34.622]        // -> [traceSWO <= 0x00000001]
[02:00:34.623]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:00:34.623]        // -> [traceTPIU <= 0x00000000]
[02:00:34.623]    </block>
[02:00:34.623]    <control if="traceSWO" while="" timeout="0" info="">
[02:00:34.623]      // if-block "traceSWO"
[02:00:34.623]        // =>  TRUE
[02:00:34.623]      <block atomic="false" info="">
[02:00:34.624]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:00:34.624]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:00:34.624]            <block atomic="false" info="">
[02:00:34.624]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:00:34.624]                // -> [dbgmcu_val <= 0x00000000]
[02:00:34.624]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:00:34.625]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:00:34.625]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:00:34.625]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.625]                // -> [dbgmcu_val <= 0x00000007]
[02:00:34.625]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:00:34.626]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:00:34.626]              Sequence("ConfigureTraceSWOPin");
[02:00:34.626]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:00:34.626]                  <block atomic="false" info="">
[02:00:34.626]                    __var pin     = 0;
[02:00:34.626]                      // -> [pin <= 0x00000000]
[02:00:34.626]                    __var port    = 0;
[02:00:34.626]                      // -> [port <= 0x00000000]
[02:00:34.627]                    __var portAdr = 0;
[02:00:34.627]                      // -> [portAdr <= 0x00000000]
[02:00:34.627]                    __var pos     = 0;
[02:00:34.627]                      // -> [pos <= 0x00000000]
[02:00:34.627]                    __var SWO_Pin = 0x00010003;          // PB3
[02:00:34.627]                      // -> [SWO_Pin <= 0x00010003]
[02:00:34.627]                  </block>
[02:00:34.627]                  <block atomic="false" info="configure SWO">
[02:00:34.628]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:00:34.628]                      // -> [pin <= 0x00000003]
[02:00:34.628]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:00:34.628]                      // -> [port <= 0x00000001]
[02:00:34.628]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:00:34.628]                      // -> [portAdr <= 0x40020400]
[02:00:34.628]                    pos = pin * 2;
[02:00:34.628]                      // -> [pos <= 0x00000006]
[02:00:34.629]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:00:34.629]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.629]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.630]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:00:34.630]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.630]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.632]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:00:34.632]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.633]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.633]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:00:34.633]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.634]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.634]                  </block>
[02:00:34.634]                  <control if="pin <  8" while="" timeout="0" info="">
[02:00:34.634]                    // if-block "pin <  8"
[02:00:34.634]                      // =>  TRUE
[02:00:34.634]                    <block atomic="false" info="">
[02:00:34.634]                      pos = ((pin    ) & 7) * 4;
[02:00:34.635]                        // -> [pos <= 0x0000000C]
[02:00:34.635]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:00:34.635]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.636]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.636]                    </block>
[02:00:34.636]                    // end if-block "pin <  8"
[02:00:34.636]                  </control>
[02:00:34.636]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:00:34.636]                    // if-block "pin >= 8"
[02:00:34.636]                      // =>  FALSE
[02:00:34.636]                    // skip if-block "pin >= 8"
[02:00:34.636]                  </control>
[02:00:34.637]                </sequence>
[02:00:34.637]            </block>
[02:00:34.637]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:00:34.637]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:00:34.637]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.638]            </block>
[02:00:34.638]          </sequence>
[02:00:34.638]      </block>
[02:00:34.638]      // end if-block "traceSWO"
[02:00:34.638]    </control>
[02:00:34.638]    <control if="traceTPIU" while="" timeout="0" info="">
[02:00:34.638]      // if-block "traceTPIU"
[02:00:34.638]        // =>  FALSE
[02:00:34.639]      // skip if-block "traceTPIU"
[02:00:34.639]    </control>
[02:00:34.639]  </sequence>
[02:00:34.639]  
[02:00:34.643]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:00:34.643]  
[02:00:34.643]  <debugvars>
[02:00:34.643]    // Pre-defined
[02:00:34.643]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:00:34.643]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:00:34.643]    __dp=0x00000000
[02:00:34.643]    __ap=0x00000000
[02:00:34.644]    __traceout=0x00000001      (SWO Trace)
[02:00:34.644]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:00:34.644]    __FlashAddr=0x00000000
[02:00:34.644]    __FlashLen=0x00000000
[02:00:34.644]    __FlashArg=0x00000000
[02:00:34.644]    __FlashOp=0x00000000
[02:00:34.644]    __Result=0x00000000
[02:00:34.644]    
[02:00:34.644]    // User-defined
[02:00:34.645]    DbgMCU_CR=0x00000007
[02:00:34.645]    DbgMCU_APB1_Fz=0x00000000
[02:00:34.645]    DbgMCU_APB2_Fz=0x00000000
[02:00:34.645]    TraceClk_Pin=0x00040002
[02:00:34.645]    TraceD0_Pin=0x00040003
[02:00:34.645]    TraceD1_Pin=0x00040004
[02:00:34.645]    TraceD2_Pin=0x00040005
[02:00:34.645]    TraceD3_Pin=0x00040006
[02:00:34.645]  </debugvars>
[02:00:34.646]  
[02:00:34.646]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:00:34.646]    <block atomic="false" info="">
[02:00:34.646]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:00:34.646]        // -> [traceSWO <= 0x00000001]
[02:00:34.646]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:00:34.646]        // -> [traceTPIU <= 0x00000000]
[02:00:34.647]    </block>
[02:00:34.647]    <control if="traceSWO" while="" timeout="0" info="">
[02:00:34.647]      // if-block "traceSWO"
[02:00:34.647]        // =>  TRUE
[02:00:34.647]      <block atomic="false" info="">
[02:00:34.647]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:00:34.647]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:00:34.647]            <block atomic="false" info="">
[02:00:34.647]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:00:34.648]                // -> [dbgmcu_val <= 0x00000000]
[02:00:34.648]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:00:34.648]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:00:34.648]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:00:34.648]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.649]                // -> [dbgmcu_val <= 0x00000007]
[02:00:34.649]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:00:34.649]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:00:34.649]              Sequence("ConfigureTraceSWOPin");
[02:00:34.649]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:00:34.649]                  <block atomic="false" info="">
[02:00:34.649]                    __var pin     = 0;
[02:00:34.649]                      // -> [pin <= 0x00000000]
[02:00:34.649]                    __var port    = 0;
[02:00:34.649]                      // -> [port <= 0x00000000]
[02:00:34.650]                    __var portAdr = 0;
[02:00:34.650]                      // -> [portAdr <= 0x00000000]
[02:00:34.650]                    __var pos     = 0;
[02:00:34.650]                      // -> [pos <= 0x00000000]
[02:00:34.650]                    __var SWO_Pin = 0x00010003;          // PB3
[02:00:34.650]                      // -> [SWO_Pin <= 0x00010003]
[02:00:34.650]                  </block>
[02:00:34.651]                  <block atomic="false" info="configure SWO">
[02:00:34.651]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:00:34.651]                      // -> [pin <= 0x00000003]
[02:00:34.651]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:00:34.651]                      // -> [port <= 0x00000001]
[02:00:34.651]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:00:34.651]                      // -> [portAdr <= 0x40020400]
[02:00:34.651]                    pos = pin * 2;
[02:00:34.652]                      // -> [pos <= 0x00000006]
[02:00:34.652]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:00:34.652]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.652]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.653]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:00:34.653]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.653]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.653]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:00:34.654]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.654]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.654]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:00:34.655]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.655]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.655]                  </block>
[02:00:34.655]                  <control if="pin <  8" while="" timeout="0" info="">
[02:00:34.656]                    // if-block "pin <  8"
[02:00:34.656]                      // =>  TRUE
[02:00:34.656]                    <block atomic="false" info="">
[02:00:34.656]                      pos = ((pin    ) & 7) * 4;
[02:00:34.656]                        // -> [pos <= 0x0000000C]
[02:00:34.656]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:00:34.657]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.657]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.657]                    </block>
[02:00:34.657]                    // end if-block "pin <  8"
[02:00:34.657]                  </control>
[02:00:34.658]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:00:34.658]                    // if-block "pin >= 8"
[02:00:34.658]                      // =>  FALSE
[02:00:34.658]                    // skip if-block "pin >= 8"
[02:00:34.658]                  </control>
[02:00:34.658]                </sequence>
[02:00:34.658]            </block>
[02:00:34.658]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:00:34.659]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:00:34.659]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.659]            </block>
[02:00:34.659]          </sequence>
[02:00:34.659]      </block>
[02:00:34.659]      // end if-block "traceSWO"
[02:00:34.660]    </control>
[02:00:34.660]    <control if="traceTPIU" while="" timeout="0" info="">
[02:00:34.660]      // if-block "traceTPIU"
[02:00:34.660]        // =>  FALSE
[02:00:34.660]      // skip if-block "traceTPIU"
[02:00:34.660]    </control>
[02:00:34.660]  </sequence>
[02:00:34.660]  
[02:00:34.887]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:00:34.887]  
[02:00:34.887]  <debugvars>
[02:00:34.887]    // Pre-defined
[02:00:34.887]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:00:34.887]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:00:34.887]    __dp=0x00000000
[02:00:34.888]    __ap=0x00000000
[02:00:34.888]    __traceout=0x00000001      (SWO Trace)
[02:00:34.888]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:00:34.888]    __FlashAddr=0x00000000
[02:00:34.888]    __FlashLen=0x00000000
[02:00:34.889]    __FlashArg=0x00000000
[02:00:34.889]    __FlashOp=0x00000000
[02:00:34.889]    __Result=0x00000000
[02:00:34.889]    
[02:00:34.889]    // User-defined
[02:00:34.890]    DbgMCU_CR=0x00000007
[02:00:34.890]    DbgMCU_APB1_Fz=0x00000000
[02:00:34.890]    DbgMCU_APB2_Fz=0x00000000
[02:00:34.890]    TraceClk_Pin=0x00040002
[02:00:34.890]    TraceD0_Pin=0x00040003
[02:00:34.890]    TraceD1_Pin=0x00040004
[02:00:34.890]    TraceD2_Pin=0x00040005
[02:00:34.891]    TraceD3_Pin=0x00040006
[02:00:34.891]  </debugvars>
[02:00:34.891]  
[02:00:34.891]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:00:34.891]    <block atomic="false" info="">
[02:00:34.891]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:00:34.891]        // -> [traceSWO <= 0x00000001]
[02:00:34.892]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:00:34.892]        // -> [traceTPIU <= 0x00000000]
[02:00:34.892]    </block>
[02:00:34.892]    <control if="traceSWO" while="" timeout="0" info="">
[02:00:34.892]      // if-block "traceSWO"
[02:00:34.892]        // =>  TRUE
[02:00:34.892]      <block atomic="false" info="">
[02:00:34.893]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:00:34.893]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:00:34.893]            <block atomic="false" info="">
[02:00:34.893]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:00:34.893]                // -> [dbgmcu_val <= 0x00000000]
[02:00:34.893]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:00:34.893]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:00:34.893]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:00:34.894]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.894]                // -> [dbgmcu_val <= 0x00000007]
[02:00:34.894]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:00:34.894]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:00:34.894]              Sequence("ConfigureTraceSWOPin");
[02:00:34.895]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:00:34.895]                  <block atomic="false" info="">
[02:00:34.895]                    __var pin     = 0;
[02:00:34.895]                      // -> [pin <= 0x00000000]
[02:00:34.895]                    __var port    = 0;
[02:00:34.895]                      // -> [port <= 0x00000000]
[02:00:34.895]                    __var portAdr = 0;
[02:00:34.895]                      // -> [portAdr <= 0x00000000]
[02:00:34.895]                    __var pos     = 0;
[02:00:34.895]                      // -> [pos <= 0x00000000]
[02:00:34.896]                    __var SWO_Pin = 0x00010003;          // PB3
[02:00:34.896]                      // -> [SWO_Pin <= 0x00010003]
[02:00:34.896]                  </block>
[02:00:34.896]                  <block atomic="false" info="configure SWO">
[02:00:34.896]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:00:34.896]                      // -> [pin <= 0x00000003]
[02:00:34.896]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:00:34.897]                      // -> [port <= 0x00000001]
[02:00:34.897]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:00:34.897]                      // -> [portAdr <= 0x40020400]
[02:00:34.897]                    pos = pin * 2;
[02:00:34.897]                      // -> [pos <= 0x00000006]
[02:00:34.897]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:00:34.898]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.898]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.898]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:00:34.899]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.899]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.899]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:00:34.900]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.900]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.900]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:00:34.901]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.901]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.901]                  </block>
[02:00:34.901]                  <control if="pin <  8" while="" timeout="0" info="">
[02:00:34.901]                    // if-block "pin <  8"
[02:00:34.901]                      // =>  TRUE
[02:00:34.901]                    <block atomic="false" info="">
[02:00:34.902]                      pos = ((pin    ) & 7) * 4;
[02:00:34.902]                        // -> [pos <= 0x0000000C]
[02:00:34.902]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:00:34.902]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.903]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.903]                    </block>
[02:00:34.903]                    // end if-block "pin <  8"
[02:00:34.903]                  </control>
[02:00:34.903]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:00:34.903]                    // if-block "pin >= 8"
[02:00:34.903]                      // =>  FALSE
[02:00:34.904]                    // skip if-block "pin >= 8"
[02:00:34.904]                  </control>
[02:00:34.904]                </sequence>
[02:00:34.904]            </block>
[02:00:34.904]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:00:34.904]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:00:34.905]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:00:34.905]            </block>
[02:00:34.905]          </sequence>
[02:00:34.905]      </block>
[02:00:34.905]      // end if-block "traceSWO"
[02:00:34.905]    </control>
[02:00:34.905]    <control if="traceTPIU" while="" timeout="0" info="">
[02:00:34.905]      // if-block "traceTPIU"
[02:00:34.905]        // =>  FALSE
[02:00:34.906]      // skip if-block "traceTPIU"
[02:00:34.906]    </control>
[02:00:34.906]  </sequence>
[02:00:34.906]  
[02:01:51.240]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[02:01:51.240]  
[02:01:51.240]  <debugvars>
[02:01:51.240]    // Pre-defined
[02:01:51.240]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:01:51.241]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:01:51.241]    __dp=0x00000000
[02:01:51.241]    __ap=0x00000000
[02:01:51.241]    __traceout=0x00000001      (SWO Trace)
[02:01:51.241]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:01:51.242]    __FlashAddr=0x00000000
[02:01:51.242]    __FlashLen=0x00000000
[02:01:51.242]    __FlashArg=0x00000000
[02:01:51.242]    __FlashOp=0x00000000
[02:01:51.242]    __Result=0x00000000
[02:01:51.243]    
[02:01:51.243]    // User-defined
[02:01:51.243]    DbgMCU_CR=0x00000007
[02:01:51.243]    DbgMCU_APB1_Fz=0x00000000
[02:01:51.243]    DbgMCU_APB2_Fz=0x00000000
[02:01:51.243]    TraceClk_Pin=0x00040002
[02:01:51.243]    TraceD0_Pin=0x00040003
[02:01:51.244]    TraceD1_Pin=0x00040004
[02:01:51.244]    TraceD2_Pin=0x00040005
[02:01:51.244]    TraceD3_Pin=0x00040006
[02:01:51.244]  </debugvars>
[02:01:51.244]  
[02:01:51.244]  <sequence name="TraceStop" Pname="" disable="false" info="">
[02:01:51.245]    <block atomic="false" info="">
[02:01:51.245]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[02:01:51.245]        // -> [traceSWO <= 0x00000001]
[02:01:51.245]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[02:01:51.245]        // -> [traceTPIU <= 0x00000000]
[02:01:51.245]    </block>
[02:01:51.246]    <control if="traceSWO" while="" timeout="0" info="">
[02:01:51.246]      // if-block "traceSWO"
[02:01:51.246]        // =>  TRUE
[02:01:51.246]      <block atomic="false" info="">
[02:01:51.246]        Sequence("DisableTraceSWO");
[02:01:51.246]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[02:01:51.246]            <block atomic="false" info="">
[02:01:51.247]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:01:51.247]                // -> [dbgmcu_val <= 0x00000000]
[02:01:51.247]            </block>
[02:01:51.247]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[02:01:51.247]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[02:01:51.248]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:01:51.248]                // -> [dbgmcu_val <= 0x00000007]
[02:01:51.248]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[02:01:51.248]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:01:51.249]            </block>
[02:01:51.249]          </sequence>
[02:01:51.249]      </block>
[02:01:51.249]      // end if-block "traceSWO"
[02:01:51.249]    </control>
[02:01:51.249]    <control if="traceTPIU" while="" timeout="0" info="">
[02:01:51.249]      // if-block "traceTPIU"
[02:01:51.249]        // =>  FALSE
[02:01:51.249]      // skip if-block "traceTPIU"
[02:01:51.250]    </control>
[02:01:51.250]  </sequence>
[02:01:51.250]  
[02:02:00.108]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:02:00.108]  
[02:02:00.108]  <debugvars>
[02:02:00.108]    // Pre-defined
[02:02:00.108]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:02:00.108]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:02:00.109]    __dp=0x00000000
[02:02:00.109]    __ap=0x00000000
[02:02:00.109]    __traceout=0x00000001      (SWO Trace)
[02:02:00.109]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:02:00.109]    __FlashAddr=0x00000000
[02:02:00.109]    __FlashLen=0x00000000
[02:02:00.110]    __FlashArg=0x00000000
[02:02:00.110]    __FlashOp=0x00000000
[02:02:00.110]    __Result=0x00000000
[02:02:00.110]    
[02:02:00.110]    // User-defined
[02:02:00.111]    DbgMCU_CR=0x00000007
[02:02:00.111]    DbgMCU_APB1_Fz=0x00000000
[02:02:00.111]    DbgMCU_APB2_Fz=0x00000000
[02:02:00.111]    TraceClk_Pin=0x00040002
[02:02:00.111]    TraceD0_Pin=0x00040003
[02:02:00.111]    TraceD1_Pin=0x00040004
[02:02:00.112]    TraceD2_Pin=0x00040005
[02:02:00.112]    TraceD3_Pin=0x00040006
[02:02:00.112]  </debugvars>
[02:02:00.112]  
[02:02:00.112]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:02:00.112]    <block atomic="false" info="">
[02:02:00.113]      Sequence("CheckID");
[02:02:00.113]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:02:00.113]          <block atomic="false" info="">
[02:02:00.113]            __var pidr1 = 0;
[02:02:00.113]              // -> [pidr1 <= 0x00000000]
[02:02:00.113]            __var pidr2 = 0;
[02:02:00.113]              // -> [pidr2 <= 0x00000000]
[02:02:00.114]            __var jep106id = 0;
[02:02:00.114]              // -> [jep106id <= 0x00000000]
[02:02:00.114]            __var ROMTableBase = 0;
[02:02:00.114]              // -> [ROMTableBase <= 0x00000000]
[02:02:00.114]            __ap = 0;      // AHB-AP
[02:02:00.114]              // -> [__ap <= 0x00000000]
[02:02:00.114]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:02:00.115]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:02:00.115]              // -> [ROMTableBase <= 0xE00FD000]
[02:02:00.115]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:02:00.115]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:02:00.116]              // -> [pidr1 <= 0x00000004]
[02:02:00.116]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:02:00.116]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:02:00.116]              // -> [pidr2 <= 0x0000001A]
[02:02:00.117]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:02:00.117]              // -> [jep106id <= 0x00000020]
[02:02:00.117]          </block>
[02:02:00.117]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:02:00.117]            // if-block "jep106id != 0x20"
[02:02:00.117]              // =>  FALSE
[02:02:00.117]            // skip if-block "jep106id != 0x20"
[02:02:00.117]          </control>
[02:02:00.118]        </sequence>
[02:02:00.118]    </block>
[02:02:00.118]  </sequence>
[02:02:00.118]  
[02:02:00.133]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:02:00.133]  
[02:02:00.133]  <debugvars>
[02:02:00.134]    // Pre-defined
[02:02:00.134]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:02:00.134]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:02:00.134]    __dp=0x00000000
[02:02:00.134]    __ap=0x00000000
[02:02:00.134]    __traceout=0x00000001      (SWO Trace)
[02:02:00.135]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:02:00.135]    __FlashAddr=0x00000000
[02:02:00.135]    __FlashLen=0x00000000
[02:02:00.135]    __FlashArg=0x00000000
[02:02:00.135]    __FlashOp=0x00000000
[02:02:00.136]    __Result=0x00000000
[02:02:00.136]    
[02:02:00.136]    // User-defined
[02:02:00.136]    DbgMCU_CR=0x00000007
[02:02:00.136]    DbgMCU_APB1_Fz=0x00000000
[02:02:00.136]    DbgMCU_APB2_Fz=0x00000000
[02:02:00.136]    TraceClk_Pin=0x00040002
[02:02:00.137]    TraceD0_Pin=0x00040003
[02:02:00.137]    TraceD1_Pin=0x00040004
[02:02:00.137]    TraceD2_Pin=0x00040005
[02:02:00.137]    TraceD3_Pin=0x00040006
[02:02:00.137]  </debugvars>
[02:02:00.137]  
[02:02:00.137]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:02:00.137]    <block atomic="false" info="">
[02:02:00.138]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:02:00.138]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:00.138]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:02:00.139]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:00.139]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:02:00.139]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:00.140]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:02:00.140]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:00.140]    </block>
[02:02:00.140]  </sequence>
[02:02:00.140]  
[02:02:31.354]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:02:31.354]  
[02:02:31.355]  <debugvars>
[02:02:31.355]    // Pre-defined
[02:02:31.355]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:02:31.355]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:02:31.355]    __dp=0x00000000
[02:02:31.355]    __ap=0x00000000
[02:02:31.355]    __traceout=0x00000001      (SWO Trace)
[02:02:31.356]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:02:31.356]    __FlashAddr=0x00000000
[02:02:31.356]    __FlashLen=0x00000000
[02:02:31.356]    __FlashArg=0x00000000
[02:02:31.356]    __FlashOp=0x00000000
[02:02:31.356]    __Result=0x00000000
[02:02:31.357]    
[02:02:31.357]    // User-defined
[02:02:31.357]    DbgMCU_CR=0x00000007
[02:02:31.357]    DbgMCU_APB1_Fz=0x00000000
[02:02:31.357]    DbgMCU_APB2_Fz=0x00000000
[02:02:31.357]    TraceClk_Pin=0x00040002
[02:02:31.357]    TraceD0_Pin=0x00040003
[02:02:31.357]    TraceD1_Pin=0x00040004
[02:02:31.358]    TraceD2_Pin=0x00040005
[02:02:31.358]    TraceD3_Pin=0x00040006
[02:02:31.358]  </debugvars>
[02:02:31.358]  
[02:02:31.358]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:02:31.358]    <block atomic="false" info="">
[02:02:31.359]      Sequence("CheckID");
[02:02:31.359]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:02:31.359]          <block atomic="false" info="">
[02:02:31.359]            __var pidr1 = 0;
[02:02:31.359]              // -> [pidr1 <= 0x00000000]
[02:02:31.359]            __var pidr2 = 0;
[02:02:31.360]              // -> [pidr2 <= 0x00000000]
[02:02:31.360]            __var jep106id = 0;
[02:02:31.360]              // -> [jep106id <= 0x00000000]
[02:02:31.360]            __var ROMTableBase = 0;
[02:02:31.360]              // -> [ROMTableBase <= 0x00000000]
[02:02:31.360]            __ap = 0;      // AHB-AP
[02:02:31.360]              // -> [__ap <= 0x00000000]
[02:02:31.360]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:02:31.361]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.361]              // -> [ROMTableBase <= 0xE00FD000]
[02:02:31.361]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:02:31.362]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.362]              // -> [pidr1 <= 0x00000004]
[02:02:31.362]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:02:31.363]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.363]              // -> [pidr2 <= 0x0000001A]
[02:02:31.363]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:02:31.363]              // -> [jep106id <= 0x00000020]
[02:02:31.363]          </block>
[02:02:31.364]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:02:31.364]            // if-block "jep106id != 0x20"
[02:02:31.364]              // =>  FALSE
[02:02:31.364]            // skip if-block "jep106id != 0x20"
[02:02:31.364]          </control>
[02:02:31.364]        </sequence>
[02:02:31.364]    </block>
[02:02:31.365]  </sequence>
[02:02:31.365]  
[02:02:31.379]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:02:31.379]  
[02:02:31.379]  <debugvars>
[02:02:31.379]    // Pre-defined
[02:02:31.379]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:02:31.380]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:02:31.380]    __dp=0x00000000
[02:02:31.380]    __ap=0x00000000
[02:02:31.380]    __traceout=0x00000001      (SWO Trace)
[02:02:31.380]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:02:31.380]    __FlashAddr=0x00000000
[02:02:31.380]    __FlashLen=0x00000000
[02:02:31.381]    __FlashArg=0x00000000
[02:02:31.381]    __FlashOp=0x00000000
[02:02:31.381]    __Result=0x00000000
[02:02:31.381]    
[02:02:31.381]    // User-defined
[02:02:31.382]    DbgMCU_CR=0x00000007
[02:02:31.382]    DbgMCU_APB1_Fz=0x00000000
[02:02:31.382]    DbgMCU_APB2_Fz=0x00000000
[02:02:31.382]    TraceClk_Pin=0x00040002
[02:02:31.382]    TraceD0_Pin=0x00040003
[02:02:31.382]    TraceD1_Pin=0x00040004
[02:02:31.382]    TraceD2_Pin=0x00040005
[02:02:31.382]    TraceD3_Pin=0x00040006
[02:02:31.383]  </debugvars>
[02:02:31.383]  
[02:02:31.383]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:02:31.383]    <block atomic="false" info="">
[02:02:31.383]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:02:31.384]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.384]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:02:31.384]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.385]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:02:31.385]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.385]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:02:31.386]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.386]    </block>
[02:02:31.386]  </sequence>
[02:02:31.386]  
[02:02:31.402]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[02:02:31.402]  
[02:02:31.402]  <debugvars>
[02:02:31.402]    // Pre-defined
[02:02:31.402]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:02:31.402]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:02:31.403]    __dp=0x00000000
[02:02:31.403]    __ap=0x00000000
[02:02:31.403]    __traceout=0x00000001      (SWO Trace)
[02:02:31.403]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:02:31.403]    __FlashAddr=0x00000000
[02:02:31.403]    __FlashLen=0x00000000
[02:02:31.404]    __FlashArg=0x00000000
[02:02:31.404]    __FlashOp=0x00000000
[02:02:31.404]    __Result=0x00000000
[02:02:31.404]    
[02:02:31.404]    // User-defined
[02:02:31.404]    DbgMCU_CR=0x00000007
[02:02:31.405]    DbgMCU_APB1_Fz=0x00000000
[02:02:31.405]    DbgMCU_APB2_Fz=0x00000000
[02:02:31.405]    TraceClk_Pin=0x00040002
[02:02:31.405]    TraceD0_Pin=0x00040003
[02:02:31.405]    TraceD1_Pin=0x00040004
[02:02:31.405]    TraceD2_Pin=0x00040005
[02:02:31.406]    TraceD3_Pin=0x00040006
[02:02:31.406]  </debugvars>
[02:02:31.406]  
[02:02:31.406]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:02:31.406]    <block atomic="false" info="">
[02:02:31.406]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:02:31.407]        // -> [traceSWO <= 0x00000001]
[02:02:31.407]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:02:31.407]        // -> [traceTPIU <= 0x00000000]
[02:02:31.407]    </block>
[02:02:31.407]    <control if="traceSWO" while="" timeout="0" info="">
[02:02:31.407]      // if-block "traceSWO"
[02:02:31.408]        // =>  TRUE
[02:02:31.408]      <block atomic="false" info="">
[02:02:31.408]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:02:31.408]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:02:31.408]            <block atomic="false" info="">
[02:02:31.408]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:02:31.408]                // -> [dbgmcu_val <= 0x00000000]
[02:02:31.408]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:02:31.409]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:02:31.409]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:02:31.409]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.410]                // -> [dbgmcu_val <= 0x00000007]
[02:02:31.410]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:02:31.410]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:02:31.410]              Sequence("ConfigureTraceSWOPin");
[02:02:31.410]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:02:31.410]                  <block atomic="false" info="">
[02:02:31.410]                    __var pin     = 0;
[02:02:31.411]                      // -> [pin <= 0x00000000]
[02:02:31.411]                    __var port    = 0;
[02:02:31.411]                      // -> [port <= 0x00000000]
[02:02:31.411]                    __var portAdr = 0;
[02:02:31.411]                      // -> [portAdr <= 0x00000000]
[02:02:31.411]                    __var pos     = 0;
[02:02:31.412]                      // -> [pos <= 0x00000000]
[02:02:31.412]                    __var SWO_Pin = 0x00010003;          // PB3
[02:02:31.412]                      // -> [SWO_Pin <= 0x00010003]
[02:02:31.412]                  </block>
[02:02:31.412]                  <block atomic="false" info="configure SWO">
[02:02:31.412]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:02:31.413]                      // -> [pin <= 0x00000003]
[02:02:31.413]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:02:31.413]                      // -> [port <= 0x00000001]
[02:02:31.413]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:02:31.413]                      // -> [portAdr <= 0x40020400]
[02:02:31.413]                    pos = pin * 2;
[02:02:31.413]                      // -> [pos <= 0x00000006]
[02:02:31.414]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:02:31.414]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.414]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.415]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:02:31.415]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.416]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.416]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:02:31.416]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.417]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.417]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:02:31.417]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.418]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.418]                  </block>
[02:02:31.418]                  <control if="pin <  8" while="" timeout="0" info="">
[02:02:31.418]                    // if-block "pin <  8"
[02:02:31.418]                      // =>  TRUE
[02:02:31.418]                    <block atomic="false" info="">
[02:02:31.418]                      pos = ((pin    ) & 7) * 4;
[02:02:31.419]                        // -> [pos <= 0x0000000C]
[02:02:31.419]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:02:31.419]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.420]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.420]                    </block>
[02:02:31.420]                    // end if-block "pin <  8"
[02:02:31.420]                  </control>
[02:02:31.420]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:02:31.420]                    // if-block "pin >= 8"
[02:02:31.420]                      // =>  FALSE
[02:02:31.421]                    // skip if-block "pin >= 8"
[02:02:31.421]                  </control>
[02:02:31.421]                </sequence>
[02:02:31.421]            </block>
[02:02:31.421]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:02:31.421]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:02:31.422]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.422]            </block>
[02:02:31.422]          </sequence>
[02:02:31.422]      </block>
[02:02:31.422]      // end if-block "traceSWO"
[02:02:31.422]    </control>
[02:02:31.422]    <control if="traceTPIU" while="" timeout="0" info="">
[02:02:31.423]      // if-block "traceTPIU"
[02:02:31.423]        // =>  FALSE
[02:02:31.423]      // skip if-block "traceTPIU"
[02:02:31.423]    </control>
[02:02:31.423]  </sequence>
[02:02:31.423]  
[02:02:31.427]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:02:31.427]  
[02:02:31.427]  <debugvars>
[02:02:31.427]    // Pre-defined
[02:02:31.427]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:02:31.427]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:02:31.428]    __dp=0x00000000
[02:02:31.428]    __ap=0x00000000
[02:02:31.428]    __traceout=0x00000001      (SWO Trace)
[02:02:31.428]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:02:31.428]    __FlashAddr=0x00000000
[02:02:31.428]    __FlashLen=0x00000000
[02:02:31.429]    __FlashArg=0x00000000
[02:02:31.429]    __FlashOp=0x00000000
[02:02:31.429]    __Result=0x00000000
[02:02:31.429]    
[02:02:31.429]    // User-defined
[02:02:31.429]    DbgMCU_CR=0x00000007
[02:02:31.429]    DbgMCU_APB1_Fz=0x00000000
[02:02:31.430]    DbgMCU_APB2_Fz=0x00000000
[02:02:31.430]    TraceClk_Pin=0x00040002
[02:02:31.430]    TraceD0_Pin=0x00040003
[02:02:31.430]    TraceD1_Pin=0x00040004
[02:02:31.430]    TraceD2_Pin=0x00040005
[02:02:31.430]    TraceD3_Pin=0x00040006
[02:02:31.430]  </debugvars>
[02:02:31.431]  
[02:02:31.431]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:02:31.431]    <block atomic="false" info="">
[02:02:31.431]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:02:31.431]        // -> [traceSWO <= 0x00000001]
[02:02:31.431]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:02:31.431]        // -> [traceTPIU <= 0x00000000]
[02:02:31.432]    </block>
[02:02:31.432]    <control if="traceSWO" while="" timeout="0" info="">
[02:02:31.432]      // if-block "traceSWO"
[02:02:31.432]        // =>  TRUE
[02:02:31.432]      <block atomic="false" info="">
[02:02:31.432]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:02:31.432]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:02:31.432]            <block atomic="false" info="">
[02:02:31.433]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:02:31.433]                // -> [dbgmcu_val <= 0x00000000]
[02:02:31.433]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:02:31.433]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:02:31.433]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:02:31.434]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.434]                // -> [dbgmcu_val <= 0x00000007]
[02:02:31.434]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:02:31.434]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:02:31.434]              Sequence("ConfigureTraceSWOPin");
[02:02:31.434]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:02:31.434]                  <block atomic="false" info="">
[02:02:31.435]                    __var pin     = 0;
[02:02:31.435]                      // -> [pin <= 0x00000000]
[02:02:31.435]                    __var port    = 0;
[02:02:31.435]                      // -> [port <= 0x00000000]
[02:02:31.435]                    __var portAdr = 0;
[02:02:31.435]                      // -> [portAdr <= 0x00000000]
[02:02:31.435]                    __var pos     = 0;
[02:02:31.436]                      // -> [pos <= 0x00000000]
[02:02:31.436]                    __var SWO_Pin = 0x00010003;          // PB3
[02:02:31.436]                      // -> [SWO_Pin <= 0x00010003]
[02:02:31.436]                  </block>
[02:02:31.436]                  <block atomic="false" info="configure SWO">
[02:02:31.436]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:02:31.436]                      // -> [pin <= 0x00000003]
[02:02:31.437]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:02:31.437]                      // -> [port <= 0x00000001]
[02:02:31.437]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:02:31.437]                      // -> [portAdr <= 0x40020400]
[02:02:31.437]                    pos = pin * 2;
[02:02:31.437]                      // -> [pos <= 0x00000006]
[02:02:31.437]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:02:31.438]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.438]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.438]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:02:31.439]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.439]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.439]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:02:31.440]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.440]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.440]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:02:31.441]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.441]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.441]                  </block>
[02:02:31.441]                  <control if="pin <  8" while="" timeout="0" info="">
[02:02:31.442]                    // if-block "pin <  8"
[02:02:31.442]                      // =>  TRUE
[02:02:31.442]                    <block atomic="false" info="">
[02:02:31.442]                      pos = ((pin    ) & 7) * 4;
[02:02:31.442]                        // -> [pos <= 0x0000000C]
[02:02:31.442]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:02:31.443]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.443]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.443]                    </block>
[02:02:31.443]                    // end if-block "pin <  8"
[02:02:31.443]                  </control>
[02:02:31.444]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:02:31.444]                    // if-block "pin >= 8"
[02:02:31.444]                      // =>  FALSE
[02:02:31.444]                    // skip if-block "pin >= 8"
[02:02:31.444]                  </control>
[02:02:31.444]                </sequence>
[02:02:31.444]            </block>
[02:02:31.444]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:02:31.445]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:02:31.445]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.445]            </block>
[02:02:31.445]          </sequence>
[02:02:31.446]      </block>
[02:02:31.446]      // end if-block "traceSWO"
[02:02:31.446]    </control>
[02:02:31.446]    <control if="traceTPIU" while="" timeout="0" info="">
[02:02:31.446]      // if-block "traceTPIU"
[02:02:31.446]        // =>  FALSE
[02:02:31.446]      // skip if-block "traceTPIU"
[02:02:31.446]    </control>
[02:02:31.447]  </sequence>
[02:02:31.447]  
[02:02:31.664]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:02:31.664]  
[02:02:31.665]  <debugvars>
[02:02:31.665]    // Pre-defined
[02:02:31.665]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:02:31.665]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:02:31.665]    __dp=0x00000000
[02:02:31.665]    __ap=0x00000000
[02:02:31.665]    __traceout=0x00000001      (SWO Trace)
[02:02:31.666]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:02:31.666]    __FlashAddr=0x00000000
[02:02:31.666]    __FlashLen=0x00000000
[02:02:31.666]    __FlashArg=0x00000000
[02:02:31.666]    __FlashOp=0x00000000
[02:02:31.666]    __Result=0x00000000
[02:02:31.666]    
[02:02:31.666]    // User-defined
[02:02:31.666]    DbgMCU_CR=0x00000007
[02:02:31.667]    DbgMCU_APB1_Fz=0x00000000
[02:02:31.667]    DbgMCU_APB2_Fz=0x00000000
[02:02:31.667]    TraceClk_Pin=0x00040002
[02:02:31.667]    TraceD0_Pin=0x00040003
[02:02:31.667]    TraceD1_Pin=0x00040004
[02:02:31.667]    TraceD2_Pin=0x00040005
[02:02:31.667]    TraceD3_Pin=0x00040006
[02:02:31.667]  </debugvars>
[02:02:31.668]  
[02:02:31.668]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:02:31.668]    <block atomic="false" info="">
[02:02:31.668]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:02:31.668]        // -> [traceSWO <= 0x00000001]
[02:02:31.668]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:02:31.668]        // -> [traceTPIU <= 0x00000000]
[02:02:31.668]    </block>
[02:02:31.669]    <control if="traceSWO" while="" timeout="0" info="">
[02:02:31.669]      // if-block "traceSWO"
[02:02:31.669]        // =>  TRUE
[02:02:31.669]      <block atomic="false" info="">
[02:02:31.669]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:02:31.669]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:02:31.669]            <block atomic="false" info="">
[02:02:31.669]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:02:31.670]                // -> [dbgmcu_val <= 0x00000000]
[02:02:31.670]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:02:31.670]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:02:31.670]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:02:31.670]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.670]                // -> [dbgmcu_val <= 0x00000007]
[02:02:31.671]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:02:31.671]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:02:31.671]              Sequence("ConfigureTraceSWOPin");
[02:02:31.671]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:02:31.671]                  <block atomic="false" info="">
[02:02:31.671]                    __var pin     = 0;
[02:02:31.671]                      // -> [pin <= 0x00000000]
[02:02:31.671]                    __var port    = 0;
[02:02:31.672]                      // -> [port <= 0x00000000]
[02:02:31.672]                    __var portAdr = 0;
[02:02:31.672]                      // -> [portAdr <= 0x00000000]
[02:02:31.672]                    __var pos     = 0;
[02:02:31.672]                      // -> [pos <= 0x00000000]
[02:02:31.672]                    __var SWO_Pin = 0x00010003;          // PB3
[02:02:31.672]                      // -> [SWO_Pin <= 0x00010003]
[02:02:31.672]                  </block>
[02:02:31.673]                  <block atomic="false" info="configure SWO">
[02:02:31.673]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:02:31.673]                      // -> [pin <= 0x00000003]
[02:02:31.673]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:02:31.673]                      // -> [port <= 0x00000001]
[02:02:31.673]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:02:31.673]                      // -> [portAdr <= 0x40020400]
[02:02:31.674]                    pos = pin * 2;
[02:02:31.674]                      // -> [pos <= 0x00000006]
[02:02:31.674]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:02:31.674]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.675]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.675]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:02:31.675]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.676]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.676]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:02:31.676]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.677]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.677]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:02:31.678]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.678]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.678]                  </block>
[02:02:31.678]                  <control if="pin <  8" while="" timeout="0" info="">
[02:02:31.678]                    // if-block "pin <  8"
[02:02:31.679]                      // =>  TRUE
[02:02:31.679]                    <block atomic="false" info="">
[02:02:31.679]                      pos = ((pin    ) & 7) * 4;
[02:02:31.679]                        // -> [pos <= 0x0000000C]
[02:02:31.679]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:02:31.680]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.680]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.680]                    </block>
[02:02:31.680]                    // end if-block "pin <  8"
[02:02:31.681]                  </control>
[02:02:31.681]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:02:31.681]                    // if-block "pin >= 8"
[02:02:31.681]                      // =>  FALSE
[02:02:31.681]                    // skip if-block "pin >= 8"
[02:02:31.681]                  </control>
[02:02:31.681]                </sequence>
[02:02:31.681]            </block>
[02:02:31.682]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:02:31.682]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:02:31.682]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:02:31.682]            </block>
[02:02:31.682]          </sequence>
[02:02:31.682]      </block>
[02:02:31.683]      // end if-block "traceSWO"
[02:02:31.683]    </control>
[02:02:31.683]    <control if="traceTPIU" while="" timeout="0" info="">
[02:02:31.683]      // if-block "traceTPIU"
[02:02:31.683]        // =>  FALSE
[02:02:31.683]      // skip if-block "traceTPIU"
[02:02:31.683]    </control>
[02:02:31.683]  </sequence>
[02:02:31.684]  
[02:03:17.695]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[02:03:17.695]  
[02:03:17.696]  <debugvars>
[02:03:17.696]    // Pre-defined
[02:03:17.696]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:03:17.696]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:03:17.697]    __dp=0x00000000
[02:03:17.697]    __ap=0x00000000
[02:03:17.697]    __traceout=0x00000001      (SWO Trace)
[02:03:17.697]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:03:17.698]    __FlashAddr=0x00000000
[02:03:17.698]    __FlashLen=0x00000000
[02:03:17.698]    __FlashArg=0x00000000
[02:03:17.698]    __FlashOp=0x00000000
[02:03:17.699]    __Result=0x00000000
[02:03:17.699]    
[02:03:17.699]    // User-defined
[02:03:17.699]    DbgMCU_CR=0x00000007
[02:03:17.699]    DbgMCU_APB1_Fz=0x00000000
[02:03:17.699]    DbgMCU_APB2_Fz=0x00000000
[02:03:17.699]    TraceClk_Pin=0x00040002
[02:03:17.699]    TraceD0_Pin=0x00040003
[02:03:17.700]    TraceD1_Pin=0x00040004
[02:03:17.700]    TraceD2_Pin=0x00040005
[02:03:17.700]    TraceD3_Pin=0x00040006
[02:03:17.700]  </debugvars>
[02:03:17.700]  
[02:03:17.700]  <sequence name="TraceStop" Pname="" disable="false" info="">
[02:03:17.701]    <block atomic="false" info="">
[02:03:17.701]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[02:03:17.701]        // -> [traceSWO <= 0x00000001]
[02:03:17.701]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[02:03:17.701]        // -> [traceTPIU <= 0x00000000]
[02:03:17.701]    </block>
[02:03:17.701]    <control if="traceSWO" while="" timeout="0" info="">
[02:03:17.701]      // if-block "traceSWO"
[02:03:17.702]        // =>  TRUE
[02:03:17.702]      <block atomic="false" info="">
[02:03:17.702]        Sequence("DisableTraceSWO");
[02:03:17.702]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[02:03:17.702]            <block atomic="false" info="">
[02:03:17.702]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:03:17.702]                // -> [dbgmcu_val <= 0x00000000]
[02:03:17.703]            </block>
[02:03:17.703]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[02:03:17.703]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[02:03:17.703]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:03:17.703]                // -> [dbgmcu_val <= 0x00000007]
[02:03:17.704]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[02:03:17.704]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:03:17.704]            </block>
[02:03:17.704]          </sequence>
[02:03:17.704]      </block>
[02:03:17.704]      // end if-block "traceSWO"
[02:03:17.705]    </control>
[02:03:17.705]    <control if="traceTPIU" while="" timeout="0" info="">
[02:03:17.705]      // if-block "traceTPIU"
[02:03:17.705]        // =>  FALSE
[02:03:17.705]      // skip if-block "traceTPIU"
[02:03:17.705]    </control>
[02:03:17.705]  </sequence>
[02:03:17.705]  
[02:09:53.654]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:09:53.654]  
[02:09:53.654]  <debugvars>
[02:09:53.654]    // Pre-defined
[02:09:53.654]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:09:53.654]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:09:53.655]    __dp=0x00000000
[02:09:53.655]    __ap=0x00000000
[02:09:53.655]    __traceout=0x00000001      (SWO Trace)
[02:09:53.655]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:09:53.655]    __FlashAddr=0x00000000
[02:09:53.655]    __FlashLen=0x00000000
[02:09:53.656]    __FlashArg=0x00000000
[02:09:53.656]    __FlashOp=0x00000000
[02:09:53.656]    __Result=0x00000000
[02:09:53.656]    
[02:09:53.656]    // User-defined
[02:09:53.656]    DbgMCU_CR=0x00000007
[02:09:53.656]    DbgMCU_APB1_Fz=0x00000000
[02:09:53.657]    DbgMCU_APB2_Fz=0x00000000
[02:09:53.657]    TraceClk_Pin=0x00040002
[02:09:53.657]    TraceD0_Pin=0x00040003
[02:09:53.657]    TraceD1_Pin=0x00040004
[02:09:53.657]    TraceD2_Pin=0x00040005
[02:09:53.657]    TraceD3_Pin=0x00040006
[02:09:53.658]  </debugvars>
[02:09:53.658]  
[02:09:53.658]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:09:53.658]    <block atomic="false" info="">
[02:09:53.658]      Sequence("CheckID");
[02:09:53.658]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:09:53.659]          <block atomic="false" info="">
[02:09:53.659]            __var pidr1 = 0;
[02:09:53.659]              // -> [pidr1 <= 0x00000000]
[02:09:53.659]            __var pidr2 = 0;
[02:09:53.659]              // -> [pidr2 <= 0x00000000]
[02:09:53.659]            __var jep106id = 0;
[02:09:53.659]              // -> [jep106id <= 0x00000000]
[02:09:53.660]            __var ROMTableBase = 0;
[02:09:53.660]              // -> [ROMTableBase <= 0x00000000]
[02:09:53.660]            __ap = 0;      // AHB-AP
[02:09:53.660]              // -> [__ap <= 0x00000000]
[02:09:53.660]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:09:53.661]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:09:53.661]              // -> [ROMTableBase <= 0xE00FD000]
[02:09:53.661]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:09:53.661]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:09:53.662]              // -> [pidr1 <= 0x00000004]
[02:09:53.662]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:09:53.662]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:09:53.662]              // -> [pidr2 <= 0x0000001A]
[02:09:53.662]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:09:53.663]              // -> [jep106id <= 0x00000020]
[02:09:53.663]          </block>
[02:09:53.663]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:09:53.663]            // if-block "jep106id != 0x20"
[02:09:53.663]              // =>  FALSE
[02:09:53.663]            // skip if-block "jep106id != 0x20"
[02:09:53.663]          </control>
[02:09:53.664]        </sequence>
[02:09:53.664]    </block>
[02:09:53.664]  </sequence>
[02:09:53.664]  
[02:09:53.679]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:09:53.679]  
[02:09:53.679]  <debugvars>
[02:09:53.679]    // Pre-defined
[02:09:53.679]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:09:53.680]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:09:53.680]    __dp=0x00000000
[02:09:53.680]    __ap=0x00000000
[02:09:53.680]    __traceout=0x00000001      (SWO Trace)
[02:09:53.680]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:09:53.681]    __FlashAddr=0x00000000
[02:09:53.681]    __FlashLen=0x00000000
[02:09:53.681]    __FlashArg=0x00000000
[02:09:53.681]    __FlashOp=0x00000000
[02:09:53.681]    __Result=0x00000000
[02:09:53.681]    
[02:09:53.681]    // User-defined
[02:09:53.682]    DbgMCU_CR=0x00000007
[02:09:53.682]    DbgMCU_APB1_Fz=0x00000000
[02:09:53.682]    DbgMCU_APB2_Fz=0x00000000
[02:09:53.682]    TraceClk_Pin=0x00040002
[02:09:53.682]    TraceD0_Pin=0x00040003
[02:09:53.682]    TraceD1_Pin=0x00040004
[02:09:53.682]    TraceD2_Pin=0x00040005
[02:09:53.683]    TraceD3_Pin=0x00040006
[02:09:53.683]  </debugvars>
[02:09:53.683]  
[02:09:53.683]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:09:53.683]    <block atomic="false" info="">
[02:09:53.683]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:09:53.684]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:09:53.684]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:09:53.685]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:09:53.685]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:09:53.685]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:09:53.686]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:09:53.686]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:09:53.686]    </block>
[02:09:53.686]  </sequence>
[02:09:53.687]  
[02:10:24.977]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:10:24.977]  
[02:10:24.977]  <debugvars>
[02:10:24.977]    // Pre-defined
[02:10:24.977]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:10:24.978]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:10:24.978]    __dp=0x00000000
[02:10:24.978]    __ap=0x00000000
[02:10:24.978]    __traceout=0x00000001      (SWO Trace)
[02:10:24.978]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:10:24.978]    __FlashAddr=0x00000000
[02:10:24.979]    __FlashLen=0x00000000
[02:10:24.979]    __FlashArg=0x00000000
[02:10:24.979]    __FlashOp=0x00000000
[02:10:24.979]    __Result=0x00000000
[02:10:24.979]    
[02:10:24.979]    // User-defined
[02:10:24.979]    DbgMCU_CR=0x00000007
[02:10:24.980]    DbgMCU_APB1_Fz=0x00000000
[02:10:24.980]    DbgMCU_APB2_Fz=0x00000000
[02:10:24.980]    TraceClk_Pin=0x00040002
[02:10:24.980]    TraceD0_Pin=0x00040003
[02:10:24.980]    TraceD1_Pin=0x00040004
[02:10:24.980]    TraceD2_Pin=0x00040005
[02:10:24.980]    TraceD3_Pin=0x00040006
[02:10:24.981]  </debugvars>
[02:10:24.981]  
[02:10:24.981]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:10:24.981]    <block atomic="false" info="">
[02:10:24.981]      Sequence("CheckID");
[02:10:24.981]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:10:24.981]          <block atomic="false" info="">
[02:10:24.981]            __var pidr1 = 0;
[02:10:24.981]              // -> [pidr1 <= 0x00000000]
[02:10:24.982]            __var pidr2 = 0;
[02:10:24.982]              // -> [pidr2 <= 0x00000000]
[02:10:24.982]            __var jep106id = 0;
[02:10:24.982]              // -> [jep106id <= 0x00000000]
[02:10:24.982]            __var ROMTableBase = 0;
[02:10:24.982]              // -> [ROMTableBase <= 0x00000000]
[02:10:24.982]            __ap = 0;      // AHB-AP
[02:10:24.982]              // -> [__ap <= 0x00000000]
[02:10:24.982]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:10:24.983]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:10:24.983]              // -> [ROMTableBase <= 0xE00FD000]
[02:10:24.983]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:10:24.984]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:10:24.984]              // -> [pidr1 <= 0x00000004]
[02:10:24.984]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:10:24.984]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:10:24.984]              // -> [pidr2 <= 0x0000001A]
[02:10:24.985]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:10:24.985]              // -> [jep106id <= 0x00000020]
[02:10:24.985]          </block>
[02:10:24.985]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:10:24.985]            // if-block "jep106id != 0x20"
[02:10:24.985]              // =>  FALSE
[02:10:24.985]            // skip if-block "jep106id != 0x20"
[02:10:24.985]          </control>
[02:10:24.986]        </sequence>
[02:10:24.986]    </block>
[02:10:24.986]  </sequence>
[02:10:24.986]  
[02:10:25.000]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:10:25.000]  
[02:10:25.000]  <debugvars>
[02:10:25.000]    // Pre-defined
[02:10:25.001]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:10:25.001]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:10:25.001]    __dp=0x00000000
[02:10:25.001]    __ap=0x00000000
[02:10:25.001]    __traceout=0x00000001      (SWO Trace)
[02:10:25.002]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:10:25.002]    __FlashAddr=0x00000000
[02:10:25.002]    __FlashLen=0x00000000
[02:10:25.002]    __FlashArg=0x00000000
[02:10:25.002]    __FlashOp=0x00000000
[02:10:25.002]    __Result=0x00000000
[02:10:25.003]    
[02:10:25.003]    // User-defined
[02:10:25.003]    DbgMCU_CR=0x00000007
[02:10:25.003]    DbgMCU_APB1_Fz=0x00000000
[02:10:25.003]    DbgMCU_APB2_Fz=0x00000000
[02:10:25.003]    TraceClk_Pin=0x00040002
[02:10:25.004]    TraceD0_Pin=0x00040003
[02:10:25.004]    TraceD1_Pin=0x00040004
[02:10:25.004]    TraceD2_Pin=0x00040005
[02:10:25.004]    TraceD3_Pin=0x00040006
[02:10:25.004]  </debugvars>
[02:10:25.004]  
[02:10:25.005]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:10:25.005]    <block atomic="false" info="">
[02:10:25.005]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:10:25.006]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.006]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:10:25.006]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.006]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:10:25.007]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.007]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:10:25.007]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.008]    </block>
[02:10:25.008]  </sequence>
[02:10:25.008]  
[02:10:25.024]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[02:10:25.024]  
[02:10:25.024]  <debugvars>
[02:10:25.024]    // Pre-defined
[02:10:25.024]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:10:25.024]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:10:25.024]    __dp=0x00000000
[02:10:25.024]    __ap=0x00000000
[02:10:25.025]    __traceout=0x00000001      (SWO Trace)
[02:10:25.025]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:10:25.025]    __FlashAddr=0x00000000
[02:10:25.025]    __FlashLen=0x00000000
[02:10:25.025]    __FlashArg=0x00000000
[02:10:25.025]    __FlashOp=0x00000000
[02:10:25.025]    __Result=0x00000000
[02:10:25.025]    
[02:10:25.025]    // User-defined
[02:10:25.025]    DbgMCU_CR=0x00000007
[02:10:25.026]    DbgMCU_APB1_Fz=0x00000000
[02:10:25.026]    DbgMCU_APB2_Fz=0x00000000
[02:10:25.026]    TraceClk_Pin=0x00040002
[02:10:25.026]    TraceD0_Pin=0x00040003
[02:10:25.026]    TraceD1_Pin=0x00040004
[02:10:25.026]    TraceD2_Pin=0x00040005
[02:10:25.026]    TraceD3_Pin=0x00040006
[02:10:25.026]  </debugvars>
[02:10:25.026]  
[02:10:25.027]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:10:25.027]    <block atomic="false" info="">
[02:10:25.027]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:10:25.027]        // -> [traceSWO <= 0x00000001]
[02:10:25.027]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:10:25.027]        // -> [traceTPIU <= 0x00000000]
[02:10:25.027]    </block>
[02:10:25.027]    <control if="traceSWO" while="" timeout="0" info="">
[02:10:25.027]      // if-block "traceSWO"
[02:10:25.028]        // =>  TRUE
[02:10:25.028]      <block atomic="false" info="">
[02:10:25.028]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:10:25.028]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:10:25.028]            <block atomic="false" info="">
[02:10:25.028]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:10:25.028]                // -> [dbgmcu_val <= 0x00000000]
[02:10:25.028]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:10:25.029]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:10:25.029]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:10:25.029]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.029]                // -> [dbgmcu_val <= 0x00000007]
[02:10:25.029]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:10:25.029]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:10:25.030]              Sequence("ConfigureTraceSWOPin");
[02:10:25.030]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:10:25.030]                  <block atomic="false" info="">
[02:10:25.030]                    __var pin     = 0;
[02:10:25.030]                      // -> [pin <= 0x00000000]
[02:10:25.030]                    __var port    = 0;
[02:10:25.030]                      // -> [port <= 0x00000000]
[02:10:25.030]                    __var portAdr = 0;
[02:10:25.030]                      // -> [portAdr <= 0x00000000]
[02:10:25.031]                    __var pos     = 0;
[02:10:25.031]                      // -> [pos <= 0x00000000]
[02:10:25.031]                    __var SWO_Pin = 0x00010003;          // PB3
[02:10:25.031]                      // -> [SWO_Pin <= 0x00010003]
[02:10:25.031]                  </block>
[02:10:25.031]                  <block atomic="false" info="configure SWO">
[02:10:25.031]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:10:25.031]                      // -> [pin <= 0x00000003]
[02:10:25.031]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:10:25.032]                      // -> [port <= 0x00000001]
[02:10:25.032]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:10:25.032]                      // -> [portAdr <= 0x40020400]
[02:10:25.032]                    pos = pin * 2;
[02:10:25.032]                      // -> [pos <= 0x00000006]
[02:10:25.032]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:10:25.033]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.033]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.033]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:10:25.034]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.034]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.034]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:10:25.034]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.035]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.035]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:10:25.035]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.036]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.036]                  </block>
[02:10:25.036]                  <control if="pin <  8" while="" timeout="0" info="">
[02:10:25.036]                    // if-block "pin <  8"
[02:10:25.036]                      // =>  TRUE
[02:10:25.037]                    <block atomic="false" info="">
[02:10:25.037]                      pos = ((pin    ) & 7) * 4;
[02:10:25.037]                        // -> [pos <= 0x0000000C]
[02:10:25.037]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:10:25.037]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.038]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.038]                    </block>
[02:10:25.038]                    // end if-block "pin <  8"
[02:10:25.038]                  </control>
[02:10:25.038]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:10:25.039]                    // if-block "pin >= 8"
[02:10:25.039]                      // =>  FALSE
[02:10:25.039]                    // skip if-block "pin >= 8"
[02:10:25.039]                  </control>
[02:10:25.039]                </sequence>
[02:10:25.039]            </block>
[02:10:25.039]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:10:25.040]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:10:25.040]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.040]            </block>
[02:10:25.040]          </sequence>
[02:10:25.040]      </block>
[02:10:25.041]      // end if-block "traceSWO"
[02:10:25.041]    </control>
[02:10:25.041]    <control if="traceTPIU" while="" timeout="0" info="">
[02:10:25.041]      // if-block "traceTPIU"
[02:10:25.041]        // =>  FALSE
[02:10:25.041]      // skip if-block "traceTPIU"
[02:10:25.041]    </control>
[02:10:25.041]  </sequence>
[02:10:25.041]  
[02:10:25.045]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:10:25.045]  
[02:10:25.045]  <debugvars>
[02:10:25.045]    // Pre-defined
[02:10:25.046]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:10:25.046]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:10:25.046]    __dp=0x00000000
[02:10:25.046]    __ap=0x00000000
[02:10:25.046]    __traceout=0x00000001      (SWO Trace)
[02:10:25.047]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:10:25.047]    __FlashAddr=0x00000000
[02:10:25.047]    __FlashLen=0x00000000
[02:10:25.047]    __FlashArg=0x00000000
[02:10:25.047]    __FlashOp=0x00000000
[02:10:25.047]    __Result=0x00000000
[02:10:25.048]    
[02:10:25.048]    // User-defined
[02:10:25.048]    DbgMCU_CR=0x00000007
[02:10:25.048]    DbgMCU_APB1_Fz=0x00000000
[02:10:25.048]    DbgMCU_APB2_Fz=0x00000000
[02:10:25.048]    TraceClk_Pin=0x00040002
[02:10:25.048]    TraceD0_Pin=0x00040003
[02:10:25.048]    TraceD1_Pin=0x00040004
[02:10:25.049]    TraceD2_Pin=0x00040005
[02:10:25.049]    TraceD3_Pin=0x00040006
[02:10:25.049]  </debugvars>
[02:10:25.049]  
[02:10:25.049]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:10:25.049]    <block atomic="false" info="">
[02:10:25.049]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:10:25.049]        // -> [traceSWO <= 0x00000001]
[02:10:25.050]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:10:25.050]        // -> [traceTPIU <= 0x00000000]
[02:10:25.050]    </block>
[02:10:25.050]    <control if="traceSWO" while="" timeout="0" info="">
[02:10:25.050]      // if-block "traceSWO"
[02:10:25.050]        // =>  TRUE
[02:10:25.050]      <block atomic="false" info="">
[02:10:25.050]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:10:25.051]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:10:25.051]            <block atomic="false" info="">
[02:10:25.051]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:10:25.051]                // -> [dbgmcu_val <= 0x00000000]
[02:10:25.051]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:10:25.051]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:10:25.051]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:10:25.052]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.052]                // -> [dbgmcu_val <= 0x00000007]
[02:10:25.052]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:10:25.052]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:10:25.052]              Sequence("ConfigureTraceSWOPin");
[02:10:25.052]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:10:25.053]                  <block atomic="false" info="">
[02:10:25.053]                    __var pin     = 0;
[02:10:25.053]                      // -> [pin <= 0x00000000]
[02:10:25.053]                    __var port    = 0;
[02:10:25.053]                      // -> [port <= 0x00000000]
[02:10:25.053]                    __var portAdr = 0;
[02:10:25.053]                      // -> [portAdr <= 0x00000000]
[02:10:25.053]                    __var pos     = 0;
[02:10:25.053]                      // -> [pos <= 0x00000000]
[02:10:25.054]                    __var SWO_Pin = 0x00010003;          // PB3
[02:10:25.054]                      // -> [SWO_Pin <= 0x00010003]
[02:10:25.054]                  </block>
[02:10:25.054]                  <block atomic="false" info="configure SWO">
[02:10:25.054]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:10:25.054]                      // -> [pin <= 0x00000003]
[02:10:25.054]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:10:25.054]                      // -> [port <= 0x00000001]
[02:10:25.055]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:10:25.055]                      // -> [portAdr <= 0x40020400]
[02:10:25.055]                    pos = pin * 2;
[02:10:25.055]                      // -> [pos <= 0x00000006]
[02:10:25.055]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:10:25.055]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.056]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.056]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:10:25.056]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.057]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.057]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:10:25.057]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.058]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.058]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:10:25.058]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.059]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.059]                  </block>
[02:10:25.059]                  <control if="pin <  8" while="" timeout="0" info="">
[02:10:25.059]                    // if-block "pin <  8"
[02:10:25.059]                      // =>  TRUE
[02:10:25.059]                    <block atomic="false" info="">
[02:10:25.059]                      pos = ((pin    ) & 7) * 4;
[02:10:25.059]                        // -> [pos <= 0x0000000C]
[02:10:25.060]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:10:25.060]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.060]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.061]                    </block>
[02:10:25.061]                    // end if-block "pin <  8"
[02:10:25.061]                  </control>
[02:10:25.061]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:10:25.061]                    // if-block "pin >= 8"
[02:10:25.061]                      // =>  FALSE
[02:10:25.061]                    // skip if-block "pin >= 8"
[02:10:25.061]                  </control>
[02:10:25.061]                </sequence>
[02:10:25.062]            </block>
[02:10:25.062]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:10:25.062]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:10:25.062]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.062]            </block>
[02:10:25.062]          </sequence>
[02:10:25.063]      </block>
[02:10:25.063]      // end if-block "traceSWO"
[02:10:25.063]    </control>
[02:10:25.063]    <control if="traceTPIU" while="" timeout="0" info="">
[02:10:25.063]      // if-block "traceTPIU"
[02:10:25.063]        // =>  FALSE
[02:10:25.063]      // skip if-block "traceTPIU"
[02:10:25.063]    </control>
[02:10:25.063]  </sequence>
[02:10:25.064]  
[02:10:25.276]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:10:25.276]  
[02:10:25.276]  <debugvars>
[02:10:25.276]    // Pre-defined
[02:10:25.276]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:10:25.276]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:10:25.277]    __dp=0x00000000
[02:10:25.277]    __ap=0x00000000
[02:10:25.277]    __traceout=0x00000001      (SWO Trace)
[02:10:25.277]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:10:25.277]    __FlashAddr=0x00000000
[02:10:25.277]    __FlashLen=0x00000000
[02:10:25.278]    __FlashArg=0x00000000
[02:10:25.278]    __FlashOp=0x00000000
[02:10:25.278]    __Result=0x00000000
[02:10:25.278]    
[02:10:25.278]    // User-defined
[02:10:25.278]    DbgMCU_CR=0x00000007
[02:10:25.278]    DbgMCU_APB1_Fz=0x00000000
[02:10:25.279]    DbgMCU_APB2_Fz=0x00000000
[02:10:25.279]    TraceClk_Pin=0x00040002
[02:10:25.279]    TraceD0_Pin=0x00040003
[02:10:25.279]    TraceD1_Pin=0x00040004
[02:10:25.279]    TraceD2_Pin=0x00040005
[02:10:25.279]    TraceD3_Pin=0x00040006
[02:10:25.280]  </debugvars>
[02:10:25.280]  
[02:10:25.280]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:10:25.280]    <block atomic="false" info="">
[02:10:25.280]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:10:25.280]        // -> [traceSWO <= 0x00000001]
[02:10:25.280]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:10:25.281]        // -> [traceTPIU <= 0x00000000]
[02:10:25.281]    </block>
[02:10:25.281]    <control if="traceSWO" while="" timeout="0" info="">
[02:10:25.281]      // if-block "traceSWO"
[02:10:25.281]        // =>  TRUE
[02:10:25.281]      <block atomic="false" info="">
[02:10:25.281]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:10:25.281]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:10:25.281]            <block atomic="false" info="">
[02:10:25.282]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:10:25.282]                // -> [dbgmcu_val <= 0x00000000]
[02:10:25.282]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:10:25.282]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:10:25.282]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:10:25.282]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.283]                // -> [dbgmcu_val <= 0x00000007]
[02:10:25.283]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:10:25.283]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:10:25.283]              Sequence("ConfigureTraceSWOPin");
[02:10:25.283]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:10:25.283]                  <block atomic="false" info="">
[02:10:25.283]                    __var pin     = 0;
[02:10:25.283]                      // -> [pin <= 0x00000000]
[02:10:25.284]                    __var port    = 0;
[02:10:25.284]                      // -> [port <= 0x00000000]
[02:10:25.284]                    __var portAdr = 0;
[02:10:25.284]                      // -> [portAdr <= 0x00000000]
[02:10:25.284]                    __var pos     = 0;
[02:10:25.284]                      // -> [pos <= 0x00000000]
[02:10:25.284]                    __var SWO_Pin = 0x00010003;          // PB3
[02:10:25.284]                      // -> [SWO_Pin <= 0x00010003]
[02:10:25.284]                  </block>
[02:10:25.285]                  <block atomic="false" info="configure SWO">
[02:10:25.285]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:10:25.285]                      // -> [pin <= 0x00000003]
[02:10:25.285]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:10:25.285]                      // -> [port <= 0x00000001]
[02:10:25.285]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:10:25.285]                      // -> [portAdr <= 0x40020400]
[02:10:25.285]                    pos = pin * 2;
[02:10:25.285]                      // -> [pos <= 0x00000006]
[02:10:25.286]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:10:25.286]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.286]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.287]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:10:25.287]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.287]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.288]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:10:25.288]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.288]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.289]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:10:25.289]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.289]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.290]                  </block>
[02:10:25.290]                  <control if="pin <  8" while="" timeout="0" info="">
[02:10:25.290]                    // if-block "pin <  8"
[02:10:25.290]                      // =>  TRUE
[02:10:25.290]                    <block atomic="false" info="">
[02:10:25.290]                      pos = ((pin    ) & 7) * 4;
[02:10:25.290]                        // -> [pos <= 0x0000000C]
[02:10:25.291]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:10:25.291]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.291]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.292]                    </block>
[02:10:25.292]                    // end if-block "pin <  8"
[02:10:25.292]                  </control>
[02:10:25.292]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:10:25.292]                    // if-block "pin >= 8"
[02:10:25.292]                      // =>  FALSE
[02:10:25.292]                    // skip if-block "pin >= 8"
[02:10:25.293]                  </control>
[02:10:25.293]                </sequence>
[02:10:25.293]            </block>
[02:10:25.293]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:10:25.293]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:10:25.294]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:10:25.294]            </block>
[02:10:25.294]          </sequence>
[02:10:25.294]      </block>
[02:10:25.294]      // end if-block "traceSWO"
[02:10:25.294]    </control>
[02:10:25.294]    <control if="traceTPIU" while="" timeout="0" info="">
[02:10:25.295]      // if-block "traceTPIU"
[02:10:25.295]        // =>  FALSE
[02:10:25.295]      // skip if-block "traceTPIU"
[02:10:25.295]    </control>
[02:10:25.295]  </sequence>
[02:10:25.295]  
[02:16:35.306]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[02:16:35.306]  
[02:16:35.306]  <debugvars>
[02:16:35.306]    // Pre-defined
[02:16:35.306]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:16:35.306]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:16:35.307]    __dp=0x00000000
[02:16:35.307]    __ap=0x00000000
[02:16:35.307]    __traceout=0x00000001      (SWO Trace)
[02:16:35.307]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:16:35.307]    __FlashAddr=0x00000000
[02:16:35.307]    __FlashLen=0x00000000
[02:16:35.307]    __FlashArg=0x00000000
[02:16:35.307]    __FlashOp=0x00000000
[02:16:35.308]    __Result=0x00000000
[02:16:35.308]    
[02:16:35.308]    // User-defined
[02:16:35.308]    DbgMCU_CR=0x00000007
[02:16:35.308]    DbgMCU_APB1_Fz=0x00000000
[02:16:35.308]    DbgMCU_APB2_Fz=0x00000000
[02:16:35.308]    TraceClk_Pin=0x00040002
[02:16:35.308]    TraceD0_Pin=0x00040003
[02:16:35.308]    TraceD1_Pin=0x00040004
[02:16:35.309]    TraceD2_Pin=0x00040005
[02:16:35.309]    TraceD3_Pin=0x00040006
[02:16:35.309]  </debugvars>
[02:16:35.309]  
[02:16:35.309]  <sequence name="TraceStop" Pname="" disable="false" info="">
[02:16:35.309]    <block atomic="false" info="">
[02:16:35.309]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[02:16:35.309]        // -> [traceSWO <= 0x00000001]
[02:16:35.309]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[02:16:35.310]        // -> [traceTPIU <= 0x00000000]
[02:16:35.310]    </block>
[02:16:35.310]    <control if="traceSWO" while="" timeout="0" info="">
[02:16:35.310]      // if-block "traceSWO"
[02:16:35.310]        // =>  TRUE
[02:16:35.310]      <block atomic="false" info="">
[02:16:35.310]        Sequence("DisableTraceSWO");
[02:16:35.310]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[02:16:35.310]            <block atomic="false" info="">
[02:16:35.311]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:16:35.311]                // -> [dbgmcu_val <= 0x00000000]
[02:16:35.311]            </block>
[02:16:35.311]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[02:16:35.311]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[02:16:35.312]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:16:35.312]                // -> [dbgmcu_val <= 0x00000007]
[02:16:35.312]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[02:16:35.312]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:16:35.312]            </block>
[02:16:35.313]          </sequence>
[02:16:35.313]      </block>
[02:16:35.313]      // end if-block "traceSWO"
[02:16:35.313]    </control>
[02:16:35.313]    <control if="traceTPIU" while="" timeout="0" info="">
[02:16:35.313]      // if-block "traceTPIU"
[02:16:35.313]        // =>  FALSE
[02:16:35.313]      // skip if-block "traceTPIU"
[02:16:35.314]    </control>
[02:16:35.314]  </sequence>
[02:16:35.314]  
[02:16:50.107]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:16:50.107]  
[02:16:50.108]  <debugvars>
[02:16:50.108]    // Pre-defined
[02:16:50.108]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:16:50.108]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:16:50.108]    __dp=0x00000000
[02:16:50.109]    __ap=0x00000000
[02:16:50.109]    __traceout=0x00000001      (SWO Trace)
[02:16:50.109]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:16:50.109]    __FlashAddr=0x00000000
[02:16:50.109]    __FlashLen=0x00000000
[02:16:50.109]    __FlashArg=0x00000000
[02:16:50.110]    __FlashOp=0x00000000
[02:16:50.110]    __Result=0x00000000
[02:16:50.110]    
[02:16:50.110]    // User-defined
[02:16:50.110]    DbgMCU_CR=0x00000007
[02:16:50.110]    DbgMCU_APB1_Fz=0x00000000
[02:16:50.111]    DbgMCU_APB2_Fz=0x00000000
[02:16:50.111]    TraceClk_Pin=0x00040002
[02:16:50.111]    TraceD0_Pin=0x00040003
[02:16:50.111]    TraceD1_Pin=0x00040004
[02:16:50.111]    TraceD2_Pin=0x00040005
[02:16:50.111]    TraceD3_Pin=0x00040006
[02:16:50.112]  </debugvars>
[02:16:50.112]  
[02:16:50.112]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:16:50.112]    <block atomic="false" info="">
[02:16:50.112]      Sequence("CheckID");
[02:16:50.112]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:16:50.112]          <block atomic="false" info="">
[02:16:50.113]            __var pidr1 = 0;
[02:16:50.113]              // -> [pidr1 <= 0x00000000]
[02:16:50.113]            __var pidr2 = 0;
[02:16:50.113]              // -> [pidr2 <= 0x00000000]
[02:16:50.113]            __var jep106id = 0;
[02:16:50.113]              // -> [jep106id <= 0x00000000]
[02:16:50.113]            __var ROMTableBase = 0;
[02:16:50.113]              // -> [ROMTableBase <= 0x00000000]
[02:16:50.113]            __ap = 0;      // AHB-AP
[02:16:50.114]              // -> [__ap <= 0x00000000]
[02:16:50.114]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:16:50.114]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:16:50.114]              // -> [ROMTableBase <= 0xE00FD000]
[02:16:50.114]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:16:50.115]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:16:50.115]              // -> [pidr1 <= 0x00000004]
[02:16:50.115]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:16:50.116]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:16:50.116]              // -> [pidr2 <= 0x0000001A]
[02:16:50.116]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:16:50.116]              // -> [jep106id <= 0x00000020]
[02:16:50.116]          </block>
[02:16:50.117]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:16:50.117]            // if-block "jep106id != 0x20"
[02:16:50.117]              // =>  FALSE
[02:16:50.117]            // skip if-block "jep106id != 0x20"
[02:16:50.117]          </control>
[02:16:50.117]        </sequence>
[02:16:50.117]    </block>
[02:16:50.117]  </sequence>
[02:16:50.118]  
[02:16:50.133]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:16:50.133]  
[02:16:50.133]  <debugvars>
[02:16:50.134]    // Pre-defined
[02:16:50.134]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:16:50.134]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:16:50.134]    __dp=0x00000000
[02:16:50.134]    __ap=0x00000000
[02:16:50.134]    __traceout=0x00000001      (SWO Trace)
[02:16:50.135]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:16:50.135]    __FlashAddr=0x00000000
[02:16:50.135]    __FlashLen=0x00000000
[02:16:50.135]    __FlashArg=0x00000000
[02:16:50.135]    __FlashOp=0x00000000
[02:16:50.135]    __Result=0x00000000
[02:16:50.135]    
[02:16:50.135]    // User-defined
[02:16:50.136]    DbgMCU_CR=0x00000007
[02:16:50.136]    DbgMCU_APB1_Fz=0x00000000
[02:16:50.136]    DbgMCU_APB2_Fz=0x00000000
[02:16:50.136]    TraceClk_Pin=0x00040002
[02:16:50.136]    TraceD0_Pin=0x00040003
[02:16:50.136]    TraceD1_Pin=0x00040004
[02:16:50.137]    TraceD2_Pin=0x00040005
[02:16:50.137]    TraceD3_Pin=0x00040006
[02:16:50.137]  </debugvars>
[02:16:50.137]  
[02:16:50.137]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:16:50.137]    <block atomic="false" info="">
[02:16:50.137]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:16:50.138]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:16:50.138]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:16:50.138]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:16:50.139]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:16:50.139]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:16:50.139]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:16:50.140]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:16:50.140]    </block>
[02:16:50.140]  </sequence>
[02:16:50.140]  
[02:17:21.382]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:17:21.382]  
[02:17:21.382]  <debugvars>
[02:17:21.382]    // Pre-defined
[02:17:21.382]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:21.383]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:17:21.383]    __dp=0x00000000
[02:17:21.383]    __ap=0x00000000
[02:17:21.383]    __traceout=0x00000001      (SWO Trace)
[02:17:21.383]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:21.383]    __FlashAddr=0x00000000
[02:17:21.384]    __FlashLen=0x00000000
[02:17:21.384]    __FlashArg=0x00000000
[02:17:21.384]    __FlashOp=0x00000000
[02:17:21.384]    __Result=0x00000000
[02:17:21.384]    
[02:17:21.384]    // User-defined
[02:17:21.385]    DbgMCU_CR=0x00000007
[02:17:21.385]    DbgMCU_APB1_Fz=0x00000000
[02:17:21.385]    DbgMCU_APB2_Fz=0x00000000
[02:17:21.385]    TraceClk_Pin=0x00040002
[02:17:21.385]    TraceD0_Pin=0x00040003
[02:17:21.385]    TraceD1_Pin=0x00040004
[02:17:21.386]    TraceD2_Pin=0x00040005
[02:17:21.386]    TraceD3_Pin=0x00040006
[02:17:21.386]  </debugvars>
[02:17:21.386]  
[02:17:21.386]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:17:21.386]    <block atomic="false" info="">
[02:17:21.387]      Sequence("CheckID");
[02:17:21.387]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:17:21.387]          <block atomic="false" info="">
[02:17:21.387]            __var pidr1 = 0;
[02:17:21.387]              // -> [pidr1 <= 0x00000000]
[02:17:21.387]            __var pidr2 = 0;
[02:17:21.388]              // -> [pidr2 <= 0x00000000]
[02:17:21.388]            __var jep106id = 0;
[02:17:21.388]              // -> [jep106id <= 0x00000000]
[02:17:21.388]            __var ROMTableBase = 0;
[02:17:21.388]              // -> [ROMTableBase <= 0x00000000]
[02:17:21.388]            __ap = 0;      // AHB-AP
[02:17:21.389]              // -> [__ap <= 0x00000000]
[02:17:21.389]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:17:21.389]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.389]              // -> [ROMTableBase <= 0xE00FD000]
[02:17:21.389]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:17:21.390]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.390]              // -> [pidr1 <= 0x00000004]
[02:17:21.390]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:17:21.391]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.391]              // -> [pidr2 <= 0x0000001A]
[02:17:21.391]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:17:21.391]              // -> [jep106id <= 0x00000020]
[02:17:21.391]          </block>
[02:17:21.391]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:17:21.391]            // if-block "jep106id != 0x20"
[02:17:21.391]              // =>  FALSE
[02:17:21.392]            // skip if-block "jep106id != 0x20"
[02:17:21.392]          </control>
[02:17:21.392]        </sequence>
[02:17:21.392]    </block>
[02:17:21.392]  </sequence>
[02:17:21.392]  
[02:17:21.406]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:17:21.406]  
[02:17:21.407]  <debugvars>
[02:17:21.407]    // Pre-defined
[02:17:21.407]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:21.407]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:17:21.407]    __dp=0x00000000
[02:17:21.408]    __ap=0x00000000
[02:17:21.408]    __traceout=0x00000001      (SWO Trace)
[02:17:21.408]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:21.408]    __FlashAddr=0x00000000
[02:17:21.408]    __FlashLen=0x00000000
[02:17:21.409]    __FlashArg=0x00000000
[02:17:21.409]    __FlashOp=0x00000000
[02:17:21.409]    __Result=0x00000000
[02:17:21.409]    
[02:17:21.409]    // User-defined
[02:17:21.409]    DbgMCU_CR=0x00000007
[02:17:21.410]    DbgMCU_APB1_Fz=0x00000000
[02:17:21.410]    DbgMCU_APB2_Fz=0x00000000
[02:17:21.410]    TraceClk_Pin=0x00040002
[02:17:21.410]    TraceD0_Pin=0x00040003
[02:17:21.410]    TraceD1_Pin=0x00040004
[02:17:21.411]    TraceD2_Pin=0x00040005
[02:17:21.411]    TraceD3_Pin=0x00040006
[02:17:21.411]  </debugvars>
[02:17:21.411]  
[02:17:21.411]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:17:21.411]    <block atomic="false" info="">
[02:17:21.411]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:17:21.412]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.412]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:17:21.413]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.413]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:17:21.414]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.414]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:17:21.414]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.414]    </block>
[02:17:21.415]  </sequence>
[02:17:21.415]  
[02:17:21.431]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[02:17:21.431]  
[02:17:21.431]  <debugvars>
[02:17:21.431]    // Pre-defined
[02:17:21.431]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:21.432]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:17:21.432]    __dp=0x00000000
[02:17:21.432]    __ap=0x00000000
[02:17:21.432]    __traceout=0x00000001      (SWO Trace)
[02:17:21.432]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:21.433]    __FlashAddr=0x00000000
[02:17:21.433]    __FlashLen=0x00000000
[02:17:21.433]    __FlashArg=0x00000000
[02:17:21.433]    __FlashOp=0x00000000
[02:17:21.433]    __Result=0x00000000
[02:17:21.433]    
[02:17:21.433]    // User-defined
[02:17:21.434]    DbgMCU_CR=0x00000007
[02:17:21.434]    DbgMCU_APB1_Fz=0x00000000
[02:17:21.434]    DbgMCU_APB2_Fz=0x00000000
[02:17:21.434]    TraceClk_Pin=0x00040002
[02:17:21.434]    TraceD0_Pin=0x00040003
[02:17:21.434]    TraceD1_Pin=0x00040004
[02:17:21.434]    TraceD2_Pin=0x00040005
[02:17:21.435]    TraceD3_Pin=0x00040006
[02:17:21.435]  </debugvars>
[02:17:21.435]  
[02:17:21.435]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:17:21.435]    <block atomic="false" info="">
[02:17:21.435]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:17:21.436]        // -> [traceSWO <= 0x00000001]
[02:17:21.436]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:17:21.436]        // -> [traceTPIU <= 0x00000000]
[02:17:21.436]    </block>
[02:17:21.436]    <control if="traceSWO" while="" timeout="0" info="">
[02:17:21.436]      // if-block "traceSWO"
[02:17:21.437]        // =>  TRUE
[02:17:21.437]      <block atomic="false" info="">
[02:17:21.437]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:17:21.437]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:17:21.437]            <block atomic="false" info="">
[02:17:21.437]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:17:21.437]                // -> [dbgmcu_val <= 0x00000000]
[02:17:21.438]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:17:21.438]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:17:21.438]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:17:21.438]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.439]                // -> [dbgmcu_val <= 0x00000007]
[02:17:21.439]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:17:21.439]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:17:21.439]              Sequence("ConfigureTraceSWOPin");
[02:17:21.439]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:17:21.439]                  <block atomic="false" info="">
[02:17:21.439]                    __var pin     = 0;
[02:17:21.439]                      // -> [pin <= 0x00000000]
[02:17:21.439]                    __var port    = 0;
[02:17:21.440]                      // -> [port <= 0x00000000]
[02:17:21.440]                    __var portAdr = 0;
[02:17:21.440]                      // -> [portAdr <= 0x00000000]
[02:17:21.440]                    __var pos     = 0;
[02:17:21.440]                      // -> [pos <= 0x00000000]
[02:17:21.440]                    __var SWO_Pin = 0x00010003;          // PB3
[02:17:21.440]                      // -> [SWO_Pin <= 0x00010003]
[02:17:21.440]                  </block>
[02:17:21.441]                  <block atomic="false" info="configure SWO">
[02:17:21.441]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:17:21.441]                      // -> [pin <= 0x00000003]
[02:17:21.441]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:17:21.441]                      // -> [port <= 0x00000001]
[02:17:21.441]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:17:21.441]                      // -> [portAdr <= 0x40020400]
[02:17:21.441]                    pos = pin * 2;
[02:17:21.442]                      // -> [pos <= 0x00000006]
[02:17:21.442]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:17:21.442]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.443]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.443]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:17:21.443]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.444]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.444]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:17:21.444]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.444]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.445]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:17:21.445]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.445]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.446]                  </block>
[02:17:21.446]                  <control if="pin <  8" while="" timeout="0" info="">
[02:17:21.446]                    // if-block "pin <  8"
[02:17:21.446]                      // =>  TRUE
[02:17:21.446]                    <block atomic="false" info="">
[02:17:21.446]                      pos = ((pin    ) & 7) * 4;
[02:17:21.446]                        // -> [pos <= 0x0000000C]
[02:17:21.446]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:17:21.447]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.447]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.447]                    </block>
[02:17:21.447]                    // end if-block "pin <  8"
[02:17:21.448]                  </control>
[02:17:21.448]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:17:21.448]                    // if-block "pin >= 8"
[02:17:21.448]                      // =>  FALSE
[02:17:21.448]                    // skip if-block "pin >= 8"
[02:17:21.448]                  </control>
[02:17:21.448]                </sequence>
[02:17:21.448]            </block>
[02:17:21.448]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:17:21.449]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:17:21.449]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.449]            </block>
[02:17:21.449]          </sequence>
[02:17:21.449]      </block>
[02:17:21.450]      // end if-block "traceSWO"
[02:17:21.450]    </control>
[02:17:21.450]    <control if="traceTPIU" while="" timeout="0" info="">
[02:17:21.450]      // if-block "traceTPIU"
[02:17:21.450]        // =>  FALSE
[02:17:21.450]      // skip if-block "traceTPIU"
[02:17:21.450]    </control>
[02:17:21.451]  </sequence>
[02:17:21.451]  
[02:17:21.454]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:17:21.454]  
[02:17:21.454]  <debugvars>
[02:17:21.455]    // Pre-defined
[02:17:21.455]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:21.455]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:17:21.455]    __dp=0x00000000
[02:17:21.455]    __ap=0x00000000
[02:17:21.455]    __traceout=0x00000001      (SWO Trace)
[02:17:21.456]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:21.456]    __FlashAddr=0x00000000
[02:17:21.456]    __FlashLen=0x00000000
[02:17:21.456]    __FlashArg=0x00000000
[02:17:21.456]    __FlashOp=0x00000000
[02:17:21.456]    __Result=0x00000000
[02:17:21.456]    
[02:17:21.456]    // User-defined
[02:17:21.457]    DbgMCU_CR=0x00000007
[02:17:21.457]    DbgMCU_APB1_Fz=0x00000000
[02:17:21.457]    DbgMCU_APB2_Fz=0x00000000
[02:17:21.457]    TraceClk_Pin=0x00040002
[02:17:21.457]    TraceD0_Pin=0x00040003
[02:17:21.457]    TraceD1_Pin=0x00040004
[02:17:21.457]    TraceD2_Pin=0x00040005
[02:17:21.457]    TraceD3_Pin=0x00040006
[02:17:21.457]  </debugvars>
[02:17:21.458]  
[02:17:21.458]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:17:21.458]    <block atomic="false" info="">
[02:17:21.458]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:17:21.458]        // -> [traceSWO <= 0x00000001]
[02:17:21.458]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:17:21.458]        // -> [traceTPIU <= 0x00000000]
[02:17:21.458]    </block>
[02:17:21.459]    <control if="traceSWO" while="" timeout="0" info="">
[02:17:21.459]      // if-block "traceSWO"
[02:17:21.459]        // =>  TRUE
[02:17:21.459]      <block atomic="false" info="">
[02:17:21.459]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:17:21.459]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:17:21.459]            <block atomic="false" info="">
[02:17:21.459]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:17:21.460]                // -> [dbgmcu_val <= 0x00000000]
[02:17:21.460]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:17:21.460]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:17:21.460]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:17:21.460]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.461]                // -> [dbgmcu_val <= 0x00000007]
[02:17:21.461]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:17:21.461]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:17:21.461]              Sequence("ConfigureTraceSWOPin");
[02:17:21.461]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:17:21.461]                  <block atomic="false" info="">
[02:17:21.461]                    __var pin     = 0;
[02:17:21.461]                      // -> [pin <= 0x00000000]
[02:17:21.461]                    __var port    = 0;
[02:17:21.462]                      // -> [port <= 0x00000000]
[02:17:21.462]                    __var portAdr = 0;
[02:17:21.462]                      // -> [portAdr <= 0x00000000]
[02:17:21.462]                    __var pos     = 0;
[02:17:21.462]                      // -> [pos <= 0x00000000]
[02:17:21.462]                    __var SWO_Pin = 0x00010003;          // PB3
[02:17:21.462]                      // -> [SWO_Pin <= 0x00010003]
[02:17:21.462]                  </block>
[02:17:21.462]                  <block atomic="false" info="configure SWO">
[02:17:21.463]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:17:21.463]                      // -> [pin <= 0x00000003]
[02:17:21.463]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:17:21.463]                      // -> [port <= 0x00000001]
[02:17:21.463]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:17:21.463]                      // -> [portAdr <= 0x40020400]
[02:17:21.463]                    pos = pin * 2;
[02:17:21.463]                      // -> [pos <= 0x00000006]
[02:17:21.463]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:17:21.464]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.464]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.465]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:17:21.465]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.465]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.466]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:17:21.466]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.466]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.467]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:17:21.467]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.468]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.468]                  </block>
[02:17:21.468]                  <control if="pin <  8" while="" timeout="0" info="">
[02:17:21.468]                    // if-block "pin <  8"
[02:17:21.468]                      // =>  TRUE
[02:17:21.468]                    <block atomic="false" info="">
[02:17:21.468]                      pos = ((pin    ) & 7) * 4;
[02:17:21.468]                        // -> [pos <= 0x0000000C]
[02:17:21.469]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:17:21.469]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.470]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.470]                    </block>
[02:17:21.470]                    // end if-block "pin <  8"
[02:17:21.470]                  </control>
[02:17:21.470]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:17:21.470]                    // if-block "pin >= 8"
[02:17:21.470]                      // =>  FALSE
[02:17:21.471]                    // skip if-block "pin >= 8"
[02:17:21.471]                  </control>
[02:17:21.471]                </sequence>
[02:17:21.471]            </block>
[02:17:21.471]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:17:21.471]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:17:21.472]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.472]            </block>
[02:17:21.472]          </sequence>
[02:17:21.472]      </block>
[02:17:21.472]      // end if-block "traceSWO"
[02:17:21.472]    </control>
[02:17:21.472]    <control if="traceTPIU" while="" timeout="0" info="">
[02:17:21.473]      // if-block "traceTPIU"
[02:17:21.473]        // =>  FALSE
[02:17:21.473]      // skip if-block "traceTPIU"
[02:17:21.473]    </control>
[02:17:21.473]  </sequence>
[02:17:21.473]  
[02:17:21.695]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:17:21.695]  
[02:17:21.695]  <debugvars>
[02:17:21.695]    // Pre-defined
[02:17:21.696]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:21.696]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:17:21.696]    __dp=0x00000000
[02:17:21.696]    __ap=0x00000000
[02:17:21.696]    __traceout=0x00000001      (SWO Trace)
[02:17:21.697]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:21.697]    __FlashAddr=0x00000000
[02:17:21.697]    __FlashLen=0x00000000
[02:17:21.697]    __FlashArg=0x00000000
[02:17:21.697]    __FlashOp=0x00000000
[02:17:21.697]    __Result=0x00000000
[02:17:21.697]    
[02:17:21.697]    // User-defined
[02:17:21.697]    DbgMCU_CR=0x00000007
[02:17:21.698]    DbgMCU_APB1_Fz=0x00000000
[02:17:21.698]    DbgMCU_APB2_Fz=0x00000000
[02:17:21.698]    TraceClk_Pin=0x00040002
[02:17:21.698]    TraceD0_Pin=0x00040003
[02:17:21.698]    TraceD1_Pin=0x00040004
[02:17:21.698]    TraceD2_Pin=0x00040005
[02:17:21.698]    TraceD3_Pin=0x00040006
[02:17:21.698]  </debugvars>
[02:17:21.698]  
[02:17:21.699]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:17:21.699]    <block atomic="false" info="">
[02:17:21.699]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:17:21.699]        // -> [traceSWO <= 0x00000001]
[02:17:21.699]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:17:21.699]        // -> [traceTPIU <= 0x00000000]
[02:17:21.699]    </block>
[02:17:21.699]    <control if="traceSWO" while="" timeout="0" info="">
[02:17:21.699]      // if-block "traceSWO"
[02:17:21.700]        // =>  TRUE
[02:17:21.700]      <block atomic="false" info="">
[02:17:21.700]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:17:21.700]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:17:21.700]            <block atomic="false" info="">
[02:17:21.700]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:17:21.700]                // -> [dbgmcu_val <= 0x00000000]
[02:17:21.700]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:17:21.700]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:17:21.701]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:17:21.701]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.701]                // -> [dbgmcu_val <= 0x00000007]
[02:17:21.701]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:17:21.701]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:17:21.702]              Sequence("ConfigureTraceSWOPin");
[02:17:21.702]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:17:21.702]                  <block atomic="false" info="">
[02:17:21.702]                    __var pin     = 0;
[02:17:21.702]                      // -> [pin <= 0x00000000]
[02:17:21.702]                    __var port    = 0;
[02:17:21.702]                      // -> [port <= 0x00000000]
[02:17:21.702]                    __var portAdr = 0;
[02:17:21.702]                      // -> [portAdr <= 0x00000000]
[02:17:21.703]                    __var pos     = 0;
[02:17:21.703]                      // -> [pos <= 0x00000000]
[02:17:21.703]                    __var SWO_Pin = 0x00010003;          // PB3
[02:17:21.703]                      // -> [SWO_Pin <= 0x00010003]
[02:17:21.703]                  </block>
[02:17:21.703]                  <block atomic="false" info="configure SWO">
[02:17:21.703]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:17:21.703]                      // -> [pin <= 0x00000003]
[02:17:21.703]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:17:21.704]                      // -> [port <= 0x00000001]
[02:17:21.704]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:17:21.704]                      // -> [portAdr <= 0x40020400]
[02:17:21.704]                    pos = pin * 2;
[02:17:21.704]                      // -> [pos <= 0x00000006]
[02:17:21.704]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:17:21.705]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.705]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.705]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:17:21.705]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.706]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.706]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:17:21.706]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.707]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.707]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:17:21.707]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.708]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.708]                  </block>
[02:17:21.708]                  <control if="pin <  8" while="" timeout="0" info="">
[02:17:21.708]                    // if-block "pin <  8"
[02:17:21.708]                      // =>  TRUE
[02:17:21.708]                    <block atomic="false" info="">
[02:17:21.709]                      pos = ((pin    ) & 7) * 4;
[02:17:21.709]                        // -> [pos <= 0x0000000C]
[02:17:21.709]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:17:21.709]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.710]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.710]                    </block>
[02:17:21.710]                    // end if-block "pin <  8"
[02:17:21.710]                  </control>
[02:17:21.710]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:17:21.710]                    // if-block "pin >= 8"
[02:17:21.710]                      // =>  FALSE
[02:17:21.711]                    // skip if-block "pin >= 8"
[02:17:21.711]                  </control>
[02:17:21.711]                </sequence>
[02:17:21.711]            </block>
[02:17:21.711]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:17:21.711]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:17:21.712]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:17:21.712]            </block>
[02:17:21.712]          </sequence>
[02:17:21.712]      </block>
[02:17:21.712]      // end if-block "traceSWO"
[02:17:21.712]    </control>
[02:17:21.712]    <control if="traceTPIU" while="" timeout="0" info="">
[02:17:21.713]      // if-block "traceTPIU"
[02:17:21.713]        // =>  FALSE
[02:17:21.713]      // skip if-block "traceTPIU"
[02:17:21.713]    </control>
[02:17:21.713]  </sequence>
[02:17:21.713]  
[02:21:21.098]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[02:21:21.098]  
[02:21:21.099]  <debugvars>
[02:21:21.099]    // Pre-defined
[02:21:21.099]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:21:21.099]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:21:21.099]    __dp=0x00000000
[02:21:21.100]    __ap=0x00000000
[02:21:21.100]    __traceout=0x00000001      (SWO Trace)
[02:21:21.100]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:21:21.100]    __FlashAddr=0x00000000
[02:21:21.100]    __FlashLen=0x00000000
[02:21:21.100]    __FlashArg=0x00000000
[02:21:21.100]    __FlashOp=0x00000000
[02:21:21.101]    __Result=0x00000000
[02:21:21.101]    
[02:21:21.101]    // User-defined
[02:21:21.101]    DbgMCU_CR=0x00000007
[02:21:21.101]    DbgMCU_APB1_Fz=0x00000000
[02:21:21.101]    DbgMCU_APB2_Fz=0x00000000
[02:21:21.101]    TraceClk_Pin=0x00040002
[02:21:21.101]    TraceD0_Pin=0x00040003
[02:21:21.101]    TraceD1_Pin=0x00040004
[02:21:21.102]    TraceD2_Pin=0x00040005
[02:21:21.102]    TraceD3_Pin=0x00040006
[02:21:21.102]  </debugvars>
[02:21:21.102]  
[02:21:21.102]  <sequence name="TraceStop" Pname="" disable="false" info="">
[02:21:21.102]    <block atomic="false" info="">
[02:21:21.102]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[02:21:21.102]        // -> [traceSWO <= 0x00000001]
[02:21:21.103]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[02:21:21.103]        // -> [traceTPIU <= 0x00000000]
[02:21:21.103]    </block>
[02:21:21.103]    <control if="traceSWO" while="" timeout="0" info="">
[02:21:21.103]      // if-block "traceSWO"
[02:21:21.103]        // =>  TRUE
[02:21:21.103]      <block atomic="false" info="">
[02:21:21.103]        Sequence("DisableTraceSWO");
[02:21:21.103]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[02:21:21.104]            <block atomic="false" info="">
[02:21:21.104]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:21:21.104]                // -> [dbgmcu_val <= 0x00000000]
[02:21:21.104]            </block>
[02:21:21.104]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[02:21:21.104]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[02:21:21.105]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:21:21.105]                // -> [dbgmcu_val <= 0x00000007]
[02:21:21.105]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[02:21:21.105]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:21:21.105]            </block>
[02:21:21.106]          </sequence>
[02:21:21.106]      </block>
[02:21:21.106]      // end if-block "traceSWO"
[02:21:21.106]    </control>
[02:21:21.106]    <control if="traceTPIU" while="" timeout="0" info="">
[02:21:21.106]      // if-block "traceTPIU"
[02:21:21.106]        // =>  FALSE
[02:21:21.106]      // skip if-block "traceTPIU"
[02:21:21.107]    </control>
[02:21:21.107]  </sequence>
[02:21:21.107]  
[02:22:26.467]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:22:26.467]  
[02:22:26.468]  <debugvars>
[02:22:26.468]    // Pre-defined
[02:22:26.468]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:22:26.468]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:22:26.468]    __dp=0x00000000
[02:22:26.468]    __ap=0x00000000
[02:22:26.469]    __traceout=0x00000001      (SWO Trace)
[02:22:26.469]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:22:26.469]    __FlashAddr=0x00000000
[02:22:26.469]    __FlashLen=0x00000000
[02:22:26.469]    __FlashArg=0x00000000
[02:22:26.469]    __FlashOp=0x00000000
[02:22:26.470]    __Result=0x00000000
[02:22:26.470]    
[02:22:26.470]    // User-defined
[02:22:26.470]    DbgMCU_CR=0x00000007
[02:22:26.470]    DbgMCU_APB1_Fz=0x00000000
[02:22:26.470]    DbgMCU_APB2_Fz=0x00000000
[02:22:26.470]    TraceClk_Pin=0x00040002
[02:22:26.470]    TraceD0_Pin=0x00040003
[02:22:26.471]    TraceD1_Pin=0x00040004
[02:22:26.471]    TraceD2_Pin=0x00040005
[02:22:26.471]    TraceD3_Pin=0x00040006
[02:22:26.471]  </debugvars>
[02:22:26.471]  
[02:22:26.471]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:22:26.471]    <block atomic="false" info="">
[02:22:26.471]      Sequence("CheckID");
[02:22:26.472]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:22:26.472]          <block atomic="false" info="">
[02:22:26.472]            __var pidr1 = 0;
[02:22:26.472]              // -> [pidr1 <= 0x00000000]
[02:22:26.472]            __var pidr2 = 0;
[02:22:26.472]              // -> [pidr2 <= 0x00000000]
[02:22:26.472]            __var jep106id = 0;
[02:22:26.473]              // -> [jep106id <= 0x00000000]
[02:22:26.473]            __var ROMTableBase = 0;
[02:22:26.473]              // -> [ROMTableBase <= 0x00000000]
[02:22:26.473]            __ap = 0;      // AHB-AP
[02:22:26.473]              // -> [__ap <= 0x00000000]
[02:22:26.473]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:22:26.473]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:22:26.474]              // -> [ROMTableBase <= 0xE00FD000]
[02:22:26.474]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:22:26.474]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:22:26.474]              // -> [pidr1 <= 0x00000004]
[02:22:26.474]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:22:26.475]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:22:26.475]              // -> [pidr2 <= 0x0000001A]
[02:22:26.475]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:22:26.475]              // -> [jep106id <= 0x00000020]
[02:22:26.475]          </block>
[02:22:26.475]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:22:26.476]            // if-block "jep106id != 0x20"
[02:22:26.476]              // =>  FALSE
[02:22:26.476]            // skip if-block "jep106id != 0x20"
[02:22:26.476]          </control>
[02:22:26.476]        </sequence>
[02:22:26.476]    </block>
[02:22:26.476]  </sequence>
[02:22:26.476]  
[02:22:26.491]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:22:26.491]  
[02:22:26.491]  <debugvars>
[02:22:26.491]    // Pre-defined
[02:22:26.491]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:22:26.492]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:22:26.492]    __dp=0x00000000
[02:22:26.492]    __ap=0x00000000
[02:22:26.492]    __traceout=0x00000001      (SWO Trace)
[02:22:26.492]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:22:26.492]    __FlashAddr=0x00000000
[02:22:26.493]    __FlashLen=0x00000000
[02:22:26.493]    __FlashArg=0x00000000
[02:22:26.493]    __FlashOp=0x00000000
[02:22:26.493]    __Result=0x00000000
[02:22:26.493]    
[02:22:26.493]    // User-defined
[02:22:26.494]    DbgMCU_CR=0x00000007
[02:22:26.494]    DbgMCU_APB1_Fz=0x00000000
[02:22:26.494]    DbgMCU_APB2_Fz=0x00000000
[02:22:26.494]    TraceClk_Pin=0x00040002
[02:22:26.494]    TraceD0_Pin=0x00040003
[02:22:26.494]    TraceD1_Pin=0x00040004
[02:22:26.494]    TraceD2_Pin=0x00040005
[02:22:26.494]    TraceD3_Pin=0x00040006
[02:22:26.494]  </debugvars>
[02:22:26.495]  
[02:22:26.495]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:22:26.495]    <block atomic="false" info="">
[02:22:26.495]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:22:26.496]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:26.496]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:22:26.496]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:26.496]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:22:26.497]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:26.497]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:22:26.497]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:26.498]    </block>
[02:22:26.498]  </sequence>
[02:22:26.498]  
[02:22:57.696]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:22:57.696]  
[02:22:57.696]  <debugvars>
[02:22:57.696]    // Pre-defined
[02:22:57.697]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:22:57.697]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:22:57.697]    __dp=0x00000000
[02:22:57.697]    __ap=0x00000000
[02:22:57.697]    __traceout=0x00000001      (SWO Trace)
[02:22:57.697]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:22:57.697]    __FlashAddr=0x00000000
[02:22:57.697]    __FlashLen=0x00000000
[02:22:57.697]    __FlashArg=0x00000000
[02:22:57.698]    __FlashOp=0x00000000
[02:22:57.698]    __Result=0x00000000
[02:22:57.698]    
[02:22:57.698]    // User-defined
[02:22:57.698]    DbgMCU_CR=0x00000007
[02:22:57.698]    DbgMCU_APB1_Fz=0x00000000
[02:22:57.698]    DbgMCU_APB2_Fz=0x00000000
[02:22:57.698]    TraceClk_Pin=0x00040002
[02:22:57.698]    TraceD0_Pin=0x00040003
[02:22:57.699]    TraceD1_Pin=0x00040004
[02:22:57.699]    TraceD2_Pin=0x00040005
[02:22:57.699]    TraceD3_Pin=0x00040006
[02:22:57.699]  </debugvars>
[02:22:57.699]  
[02:22:57.699]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:22:57.699]    <block atomic="false" info="">
[02:22:57.699]      Sequence("CheckID");
[02:22:57.699]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:22:57.700]          <block atomic="false" info="">
[02:22:57.700]            __var pidr1 = 0;
[02:22:57.700]              // -> [pidr1 <= 0x00000000]
[02:22:57.700]            __var pidr2 = 0;
[02:22:57.700]              // -> [pidr2 <= 0x00000000]
[02:22:57.700]            __var jep106id = 0;
[02:22:57.700]              // -> [jep106id <= 0x00000000]
[02:22:57.700]            __var ROMTableBase = 0;
[02:22:57.701]              // -> [ROMTableBase <= 0x00000000]
[02:22:57.701]            __ap = 0;      // AHB-AP
[02:22:57.701]              // -> [__ap <= 0x00000000]
[02:22:57.701]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:22:57.701]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.701]              // -> [ROMTableBase <= 0xE00FD000]
[02:22:57.701]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:22:57.702]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.702]              // -> [pidr1 <= 0x00000004]
[02:22:57.702]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:22:57.703]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.703]              // -> [pidr2 <= 0x0000001A]
[02:22:57.703]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:22:57.703]              // -> [jep106id <= 0x00000020]
[02:22:57.703]          </block>
[02:22:57.703]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:22:57.703]            // if-block "jep106id != 0x20"
[02:22:57.703]              // =>  FALSE
[02:22:57.704]            // skip if-block "jep106id != 0x20"
[02:22:57.704]          </control>
[02:22:57.704]        </sequence>
[02:22:57.704]    </block>
[02:22:57.704]  </sequence>
[02:22:57.704]  
[02:22:57.718]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:22:57.718]  
[02:22:57.719]  <debugvars>
[02:22:57.719]    // Pre-defined
[02:22:57.719]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:22:57.719]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:22:57.719]    __dp=0x00000000
[02:22:57.719]    __ap=0x00000000
[02:22:57.719]    __traceout=0x00000001      (SWO Trace)
[02:22:57.719]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:22:57.720]    __FlashAddr=0x00000000
[02:22:57.720]    __FlashLen=0x00000000
[02:22:57.720]    __FlashArg=0x00000000
[02:22:57.720]    __FlashOp=0x00000000
[02:22:57.720]    __Result=0x00000000
[02:22:57.720]    
[02:22:57.720]    // User-defined
[02:22:57.720]    DbgMCU_CR=0x00000007
[02:22:57.720]    DbgMCU_APB1_Fz=0x00000000
[02:22:57.720]    DbgMCU_APB2_Fz=0x00000000
[02:22:57.721]    TraceClk_Pin=0x00040002
[02:22:57.721]    TraceD0_Pin=0x00040003
[02:22:57.721]    TraceD1_Pin=0x00040004
[02:22:57.721]    TraceD2_Pin=0x00040005
[02:22:57.721]    TraceD3_Pin=0x00040006
[02:22:57.721]  </debugvars>
[02:22:57.721]  
[02:22:57.721]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:22:57.722]    <block atomic="false" info="">
[02:22:57.722]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:22:57.722]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.722]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:22:57.723]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.723]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:22:57.724]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.724]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:22:57.725]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.725]    </block>
[02:22:57.725]  </sequence>
[02:22:57.726]  
[02:22:57.742]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[02:22:57.742]  
[02:22:57.742]  <debugvars>
[02:22:57.742]    // Pre-defined
[02:22:57.742]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:22:57.742]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:22:57.743]    __dp=0x00000000
[02:22:57.743]    __ap=0x00000000
[02:22:57.743]    __traceout=0x00000001      (SWO Trace)
[02:22:57.743]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:22:57.743]    __FlashAddr=0x00000000
[02:22:57.743]    __FlashLen=0x00000000
[02:22:57.743]    __FlashArg=0x00000000
[02:22:57.744]    __FlashOp=0x00000000
[02:22:57.744]    __Result=0x00000000
[02:22:57.744]    
[02:22:57.744]    // User-defined
[02:22:57.744]    DbgMCU_CR=0x00000007
[02:22:57.744]    DbgMCU_APB1_Fz=0x00000000
[02:22:57.744]    DbgMCU_APB2_Fz=0x00000000
[02:22:57.744]    TraceClk_Pin=0x00040002
[02:22:57.745]    TraceD0_Pin=0x00040003
[02:22:57.745]    TraceD1_Pin=0x00040004
[02:22:57.745]    TraceD2_Pin=0x00040005
[02:22:57.745]    TraceD3_Pin=0x00040006
[02:22:57.745]  </debugvars>
[02:22:57.745]  
[02:22:57.746]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:22:57.746]    <block atomic="false" info="">
[02:22:57.746]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:22:57.746]        // -> [traceSWO <= 0x00000001]
[02:22:57.746]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:22:57.746]        // -> [traceTPIU <= 0x00000000]
[02:22:57.746]    </block>
[02:22:57.747]    <control if="traceSWO" while="" timeout="0" info="">
[02:22:57.747]      // if-block "traceSWO"
[02:22:57.747]        // =>  TRUE
[02:22:57.747]      <block atomic="false" info="">
[02:22:57.747]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:22:57.747]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:22:57.747]            <block atomic="false" info="">
[02:22:57.747]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:22:57.747]                // -> [dbgmcu_val <= 0x00000000]
[02:22:57.748]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:22:57.748]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:22:57.748]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:22:57.748]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.748]                // -> [dbgmcu_val <= 0x00000007]
[02:22:57.748]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:22:57.749]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:22:57.749]              Sequence("ConfigureTraceSWOPin");
[02:22:57.749]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:22:57.749]                  <block atomic="false" info="">
[02:22:57.749]                    __var pin     = 0;
[02:22:57.749]                      // -> [pin <= 0x00000000]
[02:22:57.749]                    __var port    = 0;
[02:22:57.749]                      // -> [port <= 0x00000000]
[02:22:57.749]                    __var portAdr = 0;
[02:22:57.750]                      // -> [portAdr <= 0x00000000]
[02:22:57.750]                    __var pos     = 0;
[02:22:57.750]                      // -> [pos <= 0x00000000]
[02:22:57.750]                    __var SWO_Pin = 0x00010003;          // PB3
[02:22:57.750]                      // -> [SWO_Pin <= 0x00010003]
[02:22:57.750]                  </block>
[02:22:57.750]                  <block atomic="false" info="configure SWO">
[02:22:57.750]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:22:57.750]                      // -> [pin <= 0x00000003]
[02:22:57.751]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:22:57.751]                      // -> [port <= 0x00000001]
[02:22:57.751]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:22:57.751]                      // -> [portAdr <= 0x40020400]
[02:22:57.751]                    pos = pin * 2;
[02:22:57.751]                      // -> [pos <= 0x00000006]
[02:22:57.751]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:22:57.752]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.752]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.752]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:22:57.753]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.753]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.753]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:22:57.754]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.754]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.755]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:22:57.755]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.755]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.756]                  </block>
[02:22:57.756]                  <control if="pin <  8" while="" timeout="0" info="">
[02:22:57.756]                    // if-block "pin <  8"
[02:22:57.756]                      // =>  TRUE
[02:22:57.756]                    <block atomic="false" info="">
[02:22:57.756]                      pos = ((pin    ) & 7) * 4;
[02:22:57.756]                        // -> [pos <= 0x0000000C]
[02:22:57.756]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:22:57.757]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.757]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.757]                    </block>
[02:22:57.757]                    // end if-block "pin <  8"
[02:22:57.757]                  </control>
[02:22:57.758]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:22:57.758]                    // if-block "pin >= 8"
[02:22:57.758]                      // =>  FALSE
[02:22:57.758]                    // skip if-block "pin >= 8"
[02:22:57.758]                  </control>
[02:22:57.758]                </sequence>
[02:22:57.758]            </block>
[02:22:57.758]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:22:57.758]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:22:57.759]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.759]            </block>
[02:22:57.759]          </sequence>
[02:22:57.759]      </block>
[02:22:57.759]      // end if-block "traceSWO"
[02:22:57.759]    </control>
[02:22:57.760]    <control if="traceTPIU" while="" timeout="0" info="">
[02:22:57.760]      // if-block "traceTPIU"
[02:22:57.760]        // =>  FALSE
[02:22:57.760]      // skip if-block "traceTPIU"
[02:22:57.760]    </control>
[02:22:57.760]  </sequence>
[02:22:57.760]  
[02:22:57.764]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:22:57.764]  
[02:22:57.764]  <debugvars>
[02:22:57.764]    // Pre-defined
[02:22:57.764]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:22:57.765]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:22:57.765]    __dp=0x00000000
[02:22:57.765]    __ap=0x00000000
[02:22:57.765]    __traceout=0x00000001      (SWO Trace)
[02:22:57.765]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:22:57.765]    __FlashAddr=0x00000000
[02:22:57.765]    __FlashLen=0x00000000
[02:22:57.766]    __FlashArg=0x00000000
[02:22:57.766]    __FlashOp=0x00000000
[02:22:57.766]    __Result=0x00000000
[02:22:57.766]    
[02:22:57.766]    // User-defined
[02:22:57.766]    DbgMCU_CR=0x00000007
[02:22:57.766]    DbgMCU_APB1_Fz=0x00000000
[02:22:57.766]    DbgMCU_APB2_Fz=0x00000000
[02:22:57.767]    TraceClk_Pin=0x00040002
[02:22:57.767]    TraceD0_Pin=0x00040003
[02:22:57.767]    TraceD1_Pin=0x00040004
[02:22:57.767]    TraceD2_Pin=0x00040005
[02:22:57.767]    TraceD3_Pin=0x00040006
[02:22:57.767]  </debugvars>
[02:22:57.767]  
[02:22:57.768]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:22:57.768]    <block atomic="false" info="">
[02:22:57.768]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:22:57.768]        // -> [traceSWO <= 0x00000001]
[02:22:57.768]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:22:57.768]        // -> [traceTPIU <= 0x00000000]
[02:22:57.768]    </block>
[02:22:57.768]    <control if="traceSWO" while="" timeout="0" info="">
[02:22:57.769]      // if-block "traceSWO"
[02:22:57.769]        // =>  TRUE
[02:22:57.769]      <block atomic="false" info="">
[02:22:57.769]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:22:57.769]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:22:57.769]            <block atomic="false" info="">
[02:22:57.769]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:22:57.769]                // -> [dbgmcu_val <= 0x00000000]
[02:22:57.769]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:22:57.770]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:22:57.770]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:22:57.770]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.770]                // -> [dbgmcu_val <= 0x00000007]
[02:22:57.770]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:22:57.770]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:22:57.771]              Sequence("ConfigureTraceSWOPin");
[02:22:57.771]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:22:57.771]                  <block atomic="false" info="">
[02:22:57.771]                    __var pin     = 0;
[02:22:57.771]                      // -> [pin <= 0x00000000]
[02:22:57.771]                    __var port    = 0;
[02:22:57.771]                      // -> [port <= 0x00000000]
[02:22:57.771]                    __var portAdr = 0;
[02:22:57.771]                      // -> [portAdr <= 0x00000000]
[02:22:57.772]                    __var pos     = 0;
[02:22:57.772]                      // -> [pos <= 0x00000000]
[02:22:57.772]                    __var SWO_Pin = 0x00010003;          // PB3
[02:22:57.772]                      // -> [SWO_Pin <= 0x00010003]
[02:22:57.772]                  </block>
[02:22:57.772]                  <block atomic="false" info="configure SWO">
[02:22:57.772]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:22:57.772]                      // -> [pin <= 0x00000003]
[02:22:57.772]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:22:57.773]                      // -> [port <= 0x00000001]
[02:22:57.773]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:22:57.773]                      // -> [portAdr <= 0x40020400]
[02:22:57.773]                    pos = pin * 2;
[02:22:57.773]                      // -> [pos <= 0x00000006]
[02:22:57.773]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:22:57.774]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.774]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.774]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:22:57.774]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.775]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.775]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:22:57.775]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.776]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.776]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:22:57.776]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.777]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.777]                  </block>
[02:22:57.777]                  <control if="pin <  8" while="" timeout="0" info="">
[02:22:57.777]                    // if-block "pin <  8"
[02:22:57.777]                      // =>  TRUE
[02:22:57.777]                    <block atomic="false" info="">
[02:22:57.777]                      pos = ((pin    ) & 7) * 4;
[02:22:57.778]                        // -> [pos <= 0x0000000C]
[02:22:57.778]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:22:57.778]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.779]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.779]                    </block>
[02:22:57.779]                    // end if-block "pin <  8"
[02:22:57.779]                  </control>
[02:22:57.779]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:22:57.779]                    // if-block "pin >= 8"
[02:22:57.779]                      // =>  FALSE
[02:22:57.779]                    // skip if-block "pin >= 8"
[02:22:57.779]                  </control>
[02:22:57.780]                </sequence>
[02:22:57.780]            </block>
[02:22:57.780]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:22:57.780]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:22:57.780]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:57.781]            </block>
[02:22:57.781]          </sequence>
[02:22:57.781]      </block>
[02:22:57.781]      // end if-block "traceSWO"
[02:22:57.781]    </control>
[02:22:57.781]    <control if="traceTPIU" while="" timeout="0" info="">
[02:22:57.781]      // if-block "traceTPIU"
[02:22:57.782]        // =>  FALSE
[02:22:57.782]      // skip if-block "traceTPIU"
[02:22:57.782]    </control>
[02:22:57.782]  </sequence>
[02:22:57.782]  
[02:22:57.998]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:22:57.998]  
[02:22:57.998]  <debugvars>
[02:22:57.999]    // Pre-defined
[02:22:57.999]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:22:57.999]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:22:57.999]    __dp=0x00000000
[02:22:57.999]    __ap=0x00000000
[02:22:57.999]    __traceout=0x00000001      (SWO Trace)
[02:22:58.000]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:22:58.000]    __FlashAddr=0x00000000
[02:22:58.000]    __FlashLen=0x00000000
[02:22:58.000]    __FlashArg=0x00000000
[02:22:58.000]    __FlashOp=0x00000000
[02:22:58.000]    __Result=0x00000000
[02:22:58.001]    
[02:22:58.001]    // User-defined
[02:22:58.001]    DbgMCU_CR=0x00000007
[02:22:58.001]    DbgMCU_APB1_Fz=0x00000000
[02:22:58.001]    DbgMCU_APB2_Fz=0x00000000
[02:22:58.001]    TraceClk_Pin=0x00040002
[02:22:58.001]    TraceD0_Pin=0x00040003
[02:22:58.002]    TraceD1_Pin=0x00040004
[02:22:58.002]    TraceD2_Pin=0x00040005
[02:22:58.002]    TraceD3_Pin=0x00040006
[02:22:58.002]  </debugvars>
[02:22:58.002]  
[02:22:58.002]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:22:58.002]    <block atomic="false" info="">
[02:22:58.002]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:22:58.003]        // -> [traceSWO <= 0x00000001]
[02:22:58.003]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:22:58.003]        // -> [traceTPIU <= 0x00000000]
[02:22:58.003]    </block>
[02:22:58.003]    <control if="traceSWO" while="" timeout="0" info="">
[02:22:58.003]      // if-block "traceSWO"
[02:22:58.003]        // =>  TRUE
[02:22:58.003]      <block atomic="false" info="">
[02:22:58.004]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:22:58.004]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:22:58.004]            <block atomic="false" info="">
[02:22:58.004]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:22:58.004]                // -> [dbgmcu_val <= 0x00000000]
[02:22:58.004]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:22:58.004]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:22:58.004]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:22:58.005]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:22:58.005]                // -> [dbgmcu_val <= 0x00000007]
[02:22:58.005]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:22:58.005]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:22:58.006]              Sequence("ConfigureTraceSWOPin");
[02:22:58.006]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:22:58.006]                  <block atomic="false" info="">
[02:22:58.006]                    __var pin     = 0;
[02:22:58.006]                      // -> [pin <= 0x00000000]
[02:22:58.006]                    __var port    = 0;
[02:22:58.006]                      // -> [port <= 0x00000000]
[02:22:58.006]                    __var portAdr = 0;
[02:22:58.007]                      // -> [portAdr <= 0x00000000]
[02:22:58.007]                    __var pos     = 0;
[02:22:58.007]                      // -> [pos <= 0x00000000]
[02:22:58.007]                    __var SWO_Pin = 0x00010003;          // PB3
[02:22:58.007]                      // -> [SWO_Pin <= 0x00010003]
[02:22:58.007]                  </block>
[02:22:58.007]                  <block atomic="false" info="configure SWO">
[02:22:58.007]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:22:58.007]                      // -> [pin <= 0x00000003]
[02:22:58.008]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:22:58.008]                      // -> [port <= 0x00000001]
[02:22:58.008]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:22:58.008]                      // -> [portAdr <= 0x40020400]
[02:22:58.008]                    pos = pin * 2;
[02:22:58.008]                      // -> [pos <= 0x00000006]
[02:22:58.008]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:22:58.009]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:22:58.009]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:58.009]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:22:58.010]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:22:58.011]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:58.011]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:22:58.011]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:22:58.012]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:58.012]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:22:58.012]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:22:58.013]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:58.013]                  </block>
[02:22:58.013]                  <control if="pin <  8" while="" timeout="0" info="">
[02:22:58.013]                    // if-block "pin <  8"
[02:22:58.013]                      // =>  TRUE
[02:22:58.013]                    <block atomic="false" info="">
[02:22:58.013]                      pos = ((pin    ) & 7) * 4;
[02:22:58.013]                        // -> [pos <= 0x0000000C]
[02:22:58.014]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:22:58.014]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:22:58.014]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:58.014]                    </block>
[02:22:58.015]                    // end if-block "pin <  8"
[02:22:58.015]                  </control>
[02:22:58.015]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:22:58.015]                    // if-block "pin >= 8"
[02:22:58.015]                      // =>  FALSE
[02:22:58.015]                    // skip if-block "pin >= 8"
[02:22:58.015]                  </control>
[02:22:58.015]                </sequence>
[02:22:58.015]            </block>
[02:22:58.016]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:22:58.016]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:22:58.016]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:22:58.016]            </block>
[02:22:58.016]          </sequence>
[02:22:58.016]      </block>
[02:22:58.017]      // end if-block "traceSWO"
[02:22:58.017]    </control>
[02:22:58.017]    <control if="traceTPIU" while="" timeout="0" info="">
[02:22:58.017]      // if-block "traceTPIU"
[02:22:58.017]        // =>  FALSE
[02:22:58.017]      // skip if-block "traceTPIU"
[02:22:58.017]    </control>
[02:22:58.017]  </sequence>
[02:22:58.017]  
[02:24:02.723]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[02:24:02.723]  
[02:24:02.724]  <debugvars>
[02:24:02.724]    // Pre-defined
[02:24:02.724]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:24:02.724]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:24:02.724]    __dp=0x00000000
[02:24:02.725]    __ap=0x00000000
[02:24:02.725]    __traceout=0x00000001      (SWO Trace)
[02:24:02.725]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:24:02.725]    __FlashAddr=0x00000000
[02:24:02.725]    __FlashLen=0x00000000
[02:24:02.725]    __FlashArg=0x00000000
[02:24:02.726]    __FlashOp=0x00000000
[02:24:02.726]    __Result=0x00000000
[02:24:02.726]    
[02:24:02.726]    // User-defined
[02:24:02.726]    DbgMCU_CR=0x00000007
[02:24:02.726]    DbgMCU_APB1_Fz=0x00000000
[02:24:02.726]    DbgMCU_APB2_Fz=0x00000000
[02:24:02.726]    TraceClk_Pin=0x00040002
[02:24:02.727]    TraceD0_Pin=0x00040003
[02:24:02.727]    TraceD1_Pin=0x00040004
[02:24:02.727]    TraceD2_Pin=0x00040005
[02:24:02.727]    TraceD3_Pin=0x00040006
[02:24:02.727]  </debugvars>
[02:24:02.727]  
[02:24:02.727]  <sequence name="TraceStop" Pname="" disable="false" info="">
[02:24:02.727]    <block atomic="false" info="">
[02:24:02.728]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[02:24:02.728]        // -> [traceSWO <= 0x00000001]
[02:24:02.728]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[02:24:02.728]        // -> [traceTPIU <= 0x00000000]
[02:24:02.728]    </block>
[02:24:02.728]    <control if="traceSWO" while="" timeout="0" info="">
[02:24:02.728]      // if-block "traceSWO"
[02:24:02.728]        // =>  TRUE
[02:24:02.728]      <block atomic="false" info="">
[02:24:02.729]        Sequence("DisableTraceSWO");
[02:24:02.729]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[02:24:02.729]            <block atomic="false" info="">
[02:24:02.729]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:24:02.729]                // -> [dbgmcu_val <= 0x00000000]
[02:24:02.729]            </block>
[02:24:02.729]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[02:24:02.729]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[02:24:02.730]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:24:02.730]                // -> [dbgmcu_val <= 0x00000007]
[02:24:02.730]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[02:24:02.731]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:24:02.731]            </block>
[02:24:02.731]          </sequence>
[02:24:02.731]      </block>
[02:24:02.731]      // end if-block "traceSWO"
[02:24:02.731]    </control>
[02:24:02.731]    <control if="traceTPIU" while="" timeout="0" info="">
[02:24:02.731]      // if-block "traceTPIU"
[02:24:02.732]        // =>  FALSE
[02:24:02.732]      // skip if-block "traceTPIU"
[02:24:02.732]    </control>
[02:24:02.732]  </sequence>
[02:24:02.732]  
[02:31:24.578]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:31:24.578]  
[02:31:24.578]  <debugvars>
[02:31:24.578]    // Pre-defined
[02:31:24.579]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:31:24.579]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:31:24.579]    __dp=0x00000000
[02:31:24.579]    __ap=0x00000000
[02:31:24.579]    __traceout=0x00000001      (SWO Trace)
[02:31:24.579]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:31:24.580]    __FlashAddr=0x00000000
[02:31:24.580]    __FlashLen=0x00000000
[02:31:24.580]    __FlashArg=0x00000000
[02:31:24.580]    __FlashOp=0x00000000
[02:31:24.580]    __Result=0x00000000
[02:31:24.580]    
[02:31:24.580]    // User-defined
[02:31:24.581]    DbgMCU_CR=0x00000007
[02:31:24.581]    DbgMCU_APB1_Fz=0x00000000
[02:31:24.581]    DbgMCU_APB2_Fz=0x00000000
[02:31:24.581]    TraceClk_Pin=0x00040002
[02:31:24.581]    TraceD0_Pin=0x00040003
[02:31:24.581]    TraceD1_Pin=0x00040004
[02:31:24.581]    TraceD2_Pin=0x00040005
[02:31:24.582]    TraceD3_Pin=0x00040006
[02:31:24.582]  </debugvars>
[02:31:24.582]  
[02:31:24.582]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:31:24.582]    <block atomic="false" info="">
[02:31:24.582]      Sequence("CheckID");
[02:31:24.582]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:31:24.583]          <block atomic="false" info="">
[02:31:24.583]            __var pidr1 = 0;
[02:31:24.583]              // -> [pidr1 <= 0x00000000]
[02:31:24.583]            __var pidr2 = 0;
[02:31:24.583]              // -> [pidr2 <= 0x00000000]
[02:31:24.583]            __var jep106id = 0;
[02:31:24.583]              // -> [jep106id <= 0x00000000]
[02:31:24.584]            __var ROMTableBase = 0;
[02:31:24.584]              // -> [ROMTableBase <= 0x00000000]
[02:31:24.584]            __ap = 0;      // AHB-AP
[02:31:24.584]              // -> [__ap <= 0x00000000]
[02:31:24.584]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:31:24.584]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:31:24.584]              // -> [ROMTableBase <= 0xE00FD000]
[02:31:24.585]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:31:24.585]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:31:24.585]              // -> [pidr1 <= 0x00000004]
[02:31:24.585]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:31:24.586]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:31:24.586]              // -> [pidr2 <= 0x0000001A]
[02:31:24.586]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:31:24.586]              // -> [jep106id <= 0x00000020]
[02:31:24.586]          </block>
[02:31:24.586]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:31:24.586]            // if-block "jep106id != 0x20"
[02:31:24.587]              // =>  FALSE
[02:31:24.587]            // skip if-block "jep106id != 0x20"
[02:31:24.587]          </control>
[02:31:24.587]        </sequence>
[02:31:24.587]    </block>
[02:31:24.587]  </sequence>
[02:31:24.587]  
[02:31:24.602]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:31:24.602]  
[02:31:24.602]  <debugvars>
[02:31:24.602]    // Pre-defined
[02:31:24.602]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:31:24.602]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:31:24.603]    __dp=0x00000000
[02:31:24.603]    __ap=0x00000000
[02:31:24.603]    __traceout=0x00000001      (SWO Trace)
[02:31:24.603]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:31:24.603]    __FlashAddr=0x00000000
[02:31:24.603]    __FlashLen=0x00000000
[02:31:24.603]    __FlashArg=0x00000000
[02:31:24.604]    __FlashOp=0x00000000
[02:31:24.604]    __Result=0x00000000
[02:31:24.604]    
[02:31:24.604]    // User-defined
[02:31:24.604]    DbgMCU_CR=0x00000007
[02:31:24.604]    DbgMCU_APB1_Fz=0x00000000
[02:31:24.604]    DbgMCU_APB2_Fz=0x00000000
[02:31:24.604]    TraceClk_Pin=0x00040002
[02:31:24.604]    TraceD0_Pin=0x00040003
[02:31:24.605]    TraceD1_Pin=0x00040004
[02:31:24.605]    TraceD2_Pin=0x00040005
[02:31:24.605]    TraceD3_Pin=0x00040006
[02:31:24.605]  </debugvars>
[02:31:24.605]  
[02:31:24.605]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:31:24.605]    <block atomic="false" info="">
[02:31:24.605]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:31:24.606]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:24.606]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:31:24.607]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:24.607]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:31:24.607]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:24.607]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:31:24.608]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:24.608]    </block>
[02:31:24.608]  </sequence>
[02:31:24.608]  
[02:31:55.901]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:31:55.901]  
[02:31:55.902]  <debugvars>
[02:31:55.902]    // Pre-defined
[02:31:55.902]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:31:55.902]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:31:55.902]    __dp=0x00000000
[02:31:55.902]    __ap=0x00000000
[02:31:55.902]    __traceout=0x00000001      (SWO Trace)
[02:31:55.903]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:31:55.903]    __FlashAddr=0x00000000
[02:31:55.903]    __FlashLen=0x00000000
[02:31:55.903]    __FlashArg=0x00000000
[02:31:55.903]    __FlashOp=0x00000000
[02:31:55.903]    __Result=0x00000000
[02:31:55.903]    
[02:31:55.903]    // User-defined
[02:31:55.903]    DbgMCU_CR=0x00000007
[02:31:55.904]    DbgMCU_APB1_Fz=0x00000000
[02:31:55.904]    DbgMCU_APB2_Fz=0x00000000
[02:31:55.904]    TraceClk_Pin=0x00040002
[02:31:55.904]    TraceD0_Pin=0x00040003
[02:31:55.904]    TraceD1_Pin=0x00040004
[02:31:55.904]    TraceD2_Pin=0x00040005
[02:31:55.904]    TraceD3_Pin=0x00040006
[02:31:55.904]  </debugvars>
[02:31:55.905]  
[02:31:55.905]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:31:55.905]    <block atomic="false" info="">
[02:31:55.905]      Sequence("CheckID");
[02:31:55.905]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:31:55.905]          <block atomic="false" info="">
[02:31:55.905]            __var pidr1 = 0;
[02:31:55.905]              // -> [pidr1 <= 0x00000000]
[02:31:55.906]            __var pidr2 = 0;
[02:31:55.906]              // -> [pidr2 <= 0x00000000]
[02:31:55.906]            __var jep106id = 0;
[02:31:55.906]              // -> [jep106id <= 0x00000000]
[02:31:55.906]            __var ROMTableBase = 0;
[02:31:55.906]              // -> [ROMTableBase <= 0x00000000]
[02:31:55.906]            __ap = 0;      // AHB-AP
[02:31:55.906]              // -> [__ap <= 0x00000000]
[02:31:55.906]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:31:55.907]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.907]              // -> [ROMTableBase <= 0xE00FD000]
[02:31:55.907]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:31:55.908]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.908]              // -> [pidr1 <= 0x00000004]
[02:31:55.908]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:31:55.908]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.908]              // -> [pidr2 <= 0x0000001A]
[02:31:55.909]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:31:55.909]              // -> [jep106id <= 0x00000020]
[02:31:55.909]          </block>
[02:31:55.909]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:31:55.909]            // if-block "jep106id != 0x20"
[02:31:55.909]              // =>  FALSE
[02:31:55.909]            // skip if-block "jep106id != 0x20"
[02:31:55.909]          </control>
[02:31:55.909]        </sequence>
[02:31:55.910]    </block>
[02:31:55.910]  </sequence>
[02:31:55.910]  
[02:31:55.924]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:31:55.924]  
[02:31:55.925]  <debugvars>
[02:31:55.927]    // Pre-defined
[02:31:55.927]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:31:55.927]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:31:55.928]    __dp=0x00000000
[02:31:55.928]    __ap=0x00000000
[02:31:55.928]    __traceout=0x00000001      (SWO Trace)
[02:31:55.928]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:31:55.928]    __FlashAddr=0x00000000
[02:31:55.928]    __FlashLen=0x00000000
[02:31:55.928]    __FlashArg=0x00000000
[02:31:55.928]    __FlashOp=0x00000000
[02:31:55.929]    __Result=0x00000000
[02:31:55.929]    
[02:31:55.929]    // User-defined
[02:31:55.929]    DbgMCU_CR=0x00000007
[02:31:55.929]    DbgMCU_APB1_Fz=0x00000000
[02:31:55.929]    DbgMCU_APB2_Fz=0x00000000
[02:31:55.929]    TraceClk_Pin=0x00040002
[02:31:55.929]    TraceD0_Pin=0x00040003
[02:31:55.930]    TraceD1_Pin=0x00040004
[02:31:55.930]    TraceD2_Pin=0x00040005
[02:31:55.930]    TraceD3_Pin=0x00040006
[02:31:55.930]  </debugvars>
[02:31:55.930]  
[02:31:55.930]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:31:55.930]    <block atomic="false" info="">
[02:31:55.930]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:31:55.931]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.931]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:31:55.931]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.932]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:31:55.932]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.932]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:31:55.933]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.933]    </block>
[02:31:55.933]  </sequence>
[02:31:55.933]  
[02:31:55.950]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[02:31:55.950]  
[02:31:55.950]  <debugvars>
[02:31:55.951]    // Pre-defined
[02:31:55.951]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:31:55.951]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:31:55.951]    __dp=0x00000000
[02:31:55.952]    __ap=0x00000000
[02:31:55.952]    __traceout=0x00000001      (SWO Trace)
[02:31:55.952]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:31:55.952]    __FlashAddr=0x00000000
[02:31:55.952]    __FlashLen=0x00000000
[02:31:55.953]    __FlashArg=0x00000000
[02:31:55.953]    __FlashOp=0x00000000
[02:31:55.953]    __Result=0x00000000
[02:31:55.953]    
[02:31:55.953]    // User-defined
[02:31:55.953]    DbgMCU_CR=0x00000007
[02:31:55.954]    DbgMCU_APB1_Fz=0x00000000
[02:31:55.954]    DbgMCU_APB2_Fz=0x00000000
[02:31:55.954]    TraceClk_Pin=0x00040002
[02:31:55.954]    TraceD0_Pin=0x00040003
[02:31:55.954]    TraceD1_Pin=0x00040004
[02:31:55.955]    TraceD2_Pin=0x00040005
[02:31:55.955]    TraceD3_Pin=0x00040006
[02:31:55.955]  </debugvars>
[02:31:55.955]  
[02:31:55.955]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:31:55.955]    <block atomic="false" info="">
[02:31:55.956]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:31:55.956]        // -> [traceSWO <= 0x00000001]
[02:31:55.956]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:31:55.956]        // -> [traceTPIU <= 0x00000000]
[02:31:55.957]    </block>
[02:31:55.957]    <control if="traceSWO" while="" timeout="0" info="">
[02:31:55.957]      // if-block "traceSWO"
[02:31:55.957]        // =>  TRUE
[02:31:55.958]      <block atomic="false" info="">
[02:31:55.958]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:31:55.958]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:31:55.958]            <block atomic="false" info="">
[02:31:55.958]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:31:55.959]                // -> [dbgmcu_val <= 0x00000000]
[02:31:55.959]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:31:55.959]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:31:55.959]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:31:55.960]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.960]                // -> [dbgmcu_val <= 0x00000007]
[02:31:55.960]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:31:55.960]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:31:55.960]              Sequence("ConfigureTraceSWOPin");
[02:31:55.960]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:31:55.960]                  <block atomic="false" info="">
[02:31:55.960]                    __var pin     = 0;
[02:31:55.960]                      // -> [pin <= 0x00000000]
[02:31:55.961]                    __var port    = 0;
[02:31:55.961]                      // -> [port <= 0x00000000]
[02:31:55.961]                    __var portAdr = 0;
[02:31:55.961]                      // -> [portAdr <= 0x00000000]
[02:31:55.961]                    __var pos     = 0;
[02:31:55.961]                      // -> [pos <= 0x00000000]
[02:31:55.961]                    __var SWO_Pin = 0x00010003;          // PB3
[02:31:55.961]                      // -> [SWO_Pin <= 0x00010003]
[02:31:55.962]                  </block>
[02:31:55.962]                  <block atomic="false" info="configure SWO">
[02:31:55.962]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:31:55.962]                      // -> [pin <= 0x00000003]
[02:31:55.962]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:31:55.962]                      // -> [port <= 0x00000001]
[02:31:55.962]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:31:55.962]                      // -> [portAdr <= 0x40020400]
[02:31:55.962]                    pos = pin * 2;
[02:31:55.963]                      // -> [pos <= 0x00000006]
[02:31:55.963]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:31:55.963]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.964]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.964]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:31:55.964]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.965]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.965]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:31:55.965]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.966]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.966]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:31:55.966]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.967]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.967]                  </block>
[02:31:55.967]                  <control if="pin <  8" while="" timeout="0" info="">
[02:31:55.967]                    // if-block "pin <  8"
[02:31:55.967]                      // =>  TRUE
[02:31:55.967]                    <block atomic="false" info="">
[02:31:55.967]                      pos = ((pin    ) & 7) * 4;
[02:31:55.967]                        // -> [pos <= 0x0000000C]
[02:31:55.967]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:31:55.968]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.968]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.968]                    </block>
[02:31:55.968]                    // end if-block "pin <  8"
[02:31:55.968]                  </control>
[02:31:55.969]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:31:55.969]                    // if-block "pin >= 8"
[02:31:55.969]                      // =>  FALSE
[02:31:55.969]                    // skip if-block "pin >= 8"
[02:31:55.969]                  </control>
[02:31:55.969]                </sequence>
[02:31:55.969]            </block>
[02:31:55.969]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:31:55.969]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:31:55.970]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.970]            </block>
[02:31:55.970]          </sequence>
[02:31:55.970]      </block>
[02:31:55.970]      // end if-block "traceSWO"
[02:31:55.970]    </control>
[02:31:55.971]    <control if="traceTPIU" while="" timeout="0" info="">
[02:31:55.971]      // if-block "traceTPIU"
[02:31:55.971]        // =>  FALSE
[02:31:55.971]      // skip if-block "traceTPIU"
[02:31:55.971]    </control>
[02:31:55.971]  </sequence>
[02:31:55.971]  
[02:31:55.975]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:31:55.975]  
[02:31:55.975]  <debugvars>
[02:31:55.975]    // Pre-defined
[02:31:55.975]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:31:55.975]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:31:55.975]    __dp=0x00000000
[02:31:55.976]    __ap=0x00000000
[02:31:55.976]    __traceout=0x00000001      (SWO Trace)
[02:31:55.976]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:31:55.976]    __FlashAddr=0x00000000
[02:31:55.976]    __FlashLen=0x00000000
[02:31:55.976]    __FlashArg=0x00000000
[02:31:55.976]    __FlashOp=0x00000000
[02:31:55.976]    __Result=0x00000000
[02:31:55.976]    
[02:31:55.976]    // User-defined
[02:31:55.977]    DbgMCU_CR=0x00000007
[02:31:55.977]    DbgMCU_APB1_Fz=0x00000000
[02:31:55.977]    DbgMCU_APB2_Fz=0x00000000
[02:31:55.977]    TraceClk_Pin=0x00040002
[02:31:55.977]    TraceD0_Pin=0x00040003
[02:31:55.977]    TraceD1_Pin=0x00040004
[02:31:55.977]    TraceD2_Pin=0x00040005
[02:31:55.977]    TraceD3_Pin=0x00040006
[02:31:55.977]  </debugvars>
[02:31:55.978]  
[02:31:55.978]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:31:55.978]    <block atomic="false" info="">
[02:31:55.978]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:31:55.978]        // -> [traceSWO <= 0x00000001]
[02:31:55.978]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:31:55.978]        // -> [traceTPIU <= 0x00000000]
[02:31:55.978]    </block>
[02:31:55.978]    <control if="traceSWO" while="" timeout="0" info="">
[02:31:55.979]      // if-block "traceSWO"
[02:31:55.979]        // =>  TRUE
[02:31:55.979]      <block atomic="false" info="">
[02:31:55.979]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:31:55.979]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:31:55.979]            <block atomic="false" info="">
[02:31:55.979]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:31:55.979]                // -> [dbgmcu_val <= 0x00000000]
[02:31:55.980]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:31:55.980]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:31:55.980]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:31:55.980]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.980]                // -> [dbgmcu_val <= 0x00000007]
[02:31:55.980]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:31:55.981]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:31:55.981]              Sequence("ConfigureTraceSWOPin");
[02:31:55.981]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:31:55.981]                  <block atomic="false" info="">
[02:31:55.981]                    __var pin     = 0;
[02:31:55.981]                      // -> [pin <= 0x00000000]
[02:31:55.981]                    __var port    = 0;
[02:31:55.981]                      // -> [port <= 0x00000000]
[02:31:55.982]                    __var portAdr = 0;
[02:31:55.982]                      // -> [portAdr <= 0x00000000]
[02:31:55.982]                    __var pos     = 0;
[02:31:55.982]                      // -> [pos <= 0x00000000]
[02:31:55.982]                    __var SWO_Pin = 0x00010003;          // PB3
[02:31:55.982]                      // -> [SWO_Pin <= 0x00010003]
[02:31:55.982]                  </block>
[02:31:55.982]                  <block atomic="false" info="configure SWO">
[02:31:55.982]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:31:55.983]                      // -> [pin <= 0x00000003]
[02:31:55.983]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:31:55.983]                      // -> [port <= 0x00000001]
[02:31:55.983]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:31:55.983]                      // -> [portAdr <= 0x40020400]
[02:31:55.983]                    pos = pin * 2;
[02:31:55.983]                      // -> [pos <= 0x00000006]
[02:31:55.983]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:31:55.984]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.984]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.984]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:31:55.985]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.985]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.985]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:31:55.986]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.986]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.986]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:31:55.987]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.987]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.987]                  </block>
[02:31:55.987]                  <control if="pin <  8" while="" timeout="0" info="">
[02:31:55.987]                    // if-block "pin <  8"
[02:31:55.987]                      // =>  TRUE
[02:31:55.988]                    <block atomic="false" info="">
[02:31:55.988]                      pos = ((pin    ) & 7) * 4;
[02:31:55.988]                        // -> [pos <= 0x0000000C]
[02:31:55.988]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:31:55.988]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.989]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.989]                    </block>
[02:31:55.989]                    // end if-block "pin <  8"
[02:31:55.989]                  </control>
[02:31:55.989]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:31:55.989]                    // if-block "pin >= 8"
[02:31:55.989]                      // =>  FALSE
[02:31:55.989]                    // skip if-block "pin >= 8"
[02:31:55.990]                  </control>
[02:31:55.990]                </sequence>
[02:31:55.990]            </block>
[02:31:55.990]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:31:55.990]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:31:55.991]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:55.991]            </block>
[02:31:55.991]          </sequence>
[02:31:55.991]      </block>
[02:31:55.991]      // end if-block "traceSWO"
[02:31:55.991]    </control>
[02:31:55.991]    <control if="traceTPIU" while="" timeout="0" info="">
[02:31:55.991]      // if-block "traceTPIU"
[02:31:55.991]        // =>  FALSE
[02:31:55.992]      // skip if-block "traceTPIU"
[02:31:55.992]    </control>
[02:31:55.992]  </sequence>
[02:31:55.992]  
[02:31:56.211]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:31:56.211]  
[02:31:56.211]  <debugvars>
[02:31:56.211]    // Pre-defined
[02:31:56.212]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:31:56.212]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:31:56.212]    __dp=0x00000000
[02:31:56.212]    __ap=0x00000000
[02:31:56.212]    __traceout=0x00000001      (SWO Trace)
[02:31:56.212]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:31:56.213]    __FlashAddr=0x00000000
[02:31:56.213]    __FlashLen=0x00000000
[02:31:56.213]    __FlashArg=0x00000000
[02:31:56.213]    __FlashOp=0x00000000
[02:31:56.213]    __Result=0x00000000
[02:31:56.213]    
[02:31:56.213]    // User-defined
[02:31:56.213]    DbgMCU_CR=0x00000007
[02:31:56.214]    DbgMCU_APB1_Fz=0x00000000
[02:31:56.214]    DbgMCU_APB2_Fz=0x00000000
[02:31:56.214]    TraceClk_Pin=0x00040002
[02:31:56.214]    TraceD0_Pin=0x00040003
[02:31:56.214]    TraceD1_Pin=0x00040004
[02:31:56.214]    TraceD2_Pin=0x00040005
[02:31:56.214]    TraceD3_Pin=0x00040006
[02:31:56.215]  </debugvars>
[02:31:56.215]  
[02:31:56.215]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:31:56.215]    <block atomic="false" info="">
[02:31:56.215]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:31:56.215]        // -> [traceSWO <= 0x00000001]
[02:31:56.215]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:31:56.215]        // -> [traceTPIU <= 0x00000000]
[02:31:56.216]    </block>
[02:31:56.216]    <control if="traceSWO" while="" timeout="0" info="">
[02:31:56.216]      // if-block "traceSWO"
[02:31:56.216]        // =>  TRUE
[02:31:56.216]      <block atomic="false" info="">
[02:31:56.216]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:31:56.216]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:31:56.216]            <block atomic="false" info="">
[02:31:56.216]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:31:56.217]                // -> [dbgmcu_val <= 0x00000000]
[02:31:56.217]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:31:56.217]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:31:56.217]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:31:56.217]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:31:56.217]                // -> [dbgmcu_val <= 0x00000007]
[02:31:56.218]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:31:56.218]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:31:56.218]              Sequence("ConfigureTraceSWOPin");
[02:31:56.218]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:31:56.218]                  <block atomic="false" info="">
[02:31:56.218]                    __var pin     = 0;
[02:31:56.218]                      // -> [pin <= 0x00000000]
[02:31:56.219]                    __var port    = 0;
[02:31:56.219]                      // -> [port <= 0x00000000]
[02:31:56.219]                    __var portAdr = 0;
[02:31:56.219]                      // -> [portAdr <= 0x00000000]
[02:31:56.219]                    __var pos     = 0;
[02:31:56.219]                      // -> [pos <= 0x00000000]
[02:31:56.219]                    __var SWO_Pin = 0x00010003;          // PB3
[02:31:56.219]                      // -> [SWO_Pin <= 0x00010003]
[02:31:56.220]                  </block>
[02:31:56.220]                  <block atomic="false" info="configure SWO">
[02:31:56.220]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:31:56.220]                      // -> [pin <= 0x00000003]
[02:31:56.220]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:31:56.220]                      // -> [port <= 0x00000001]
[02:31:56.220]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:31:56.220]                      // -> [portAdr <= 0x40020400]
[02:31:56.220]                    pos = pin * 2;
[02:31:56.221]                      // -> [pos <= 0x00000006]
[02:31:56.221]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:31:56.221]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:31:56.221]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:56.222]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:31:56.222]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:31:56.222]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:56.222]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:31:56.223]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:31:56.223]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:56.223]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:31:56.224]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:31:56.224]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:56.225]                  </block>
[02:31:56.225]                  <control if="pin <  8" while="" timeout="0" info="">
[02:31:56.225]                    // if-block "pin <  8"
[02:31:56.225]                      // =>  TRUE
[02:31:56.225]                    <block atomic="false" info="">
[02:31:56.225]                      pos = ((pin    ) & 7) * 4;
[02:31:56.225]                        // -> [pos <= 0x0000000C]
[02:31:56.225]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:31:56.226]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:31:56.226]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:56.226]                    </block>
[02:31:56.226]                    // end if-block "pin <  8"
[02:31:56.226]                  </control>
[02:31:56.227]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:31:56.227]                    // if-block "pin >= 8"
[02:31:56.227]                      // =>  FALSE
[02:31:56.227]                    // skip if-block "pin >= 8"
[02:31:56.227]                  </control>
[02:31:56.227]                </sequence>
[02:31:56.227]            </block>
[02:31:56.227]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:31:56.227]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:31:56.228]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:31:56.228]            </block>
[02:31:56.228]          </sequence>
[02:31:56.228]      </block>
[02:31:56.228]      // end if-block "traceSWO"
[02:31:56.228]    </control>
[02:31:56.229]    <control if="traceTPIU" while="" timeout="0" info="">
[02:31:56.229]      // if-block "traceTPIU"
[02:31:56.229]        // =>  FALSE
[02:31:56.229]      // skip if-block "traceTPIU"
[02:31:56.229]    </control>
[02:31:56.229]  </sequence>
[02:31:56.229]  
[02:32:36.523]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:32:36.523]  
[02:32:36.566]  <debugvars>
[02:32:36.566]    // Pre-defined
[02:32:36.566]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:32:36.567]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:32:36.567]    __dp=0x00000000
[02:32:36.567]    __ap=0x00000000
[02:32:36.567]    __traceout=0x00000001      (SWO Trace)
[02:32:36.567]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:32:36.567]    __FlashAddr=0x00000000
[02:32:36.567]    __FlashLen=0x00000000
[02:32:36.567]    __FlashArg=0x00000000
[02:32:36.568]    __FlashOp=0x00000000
[02:32:36.568]    __Result=0x00000000
[02:32:36.568]    
[02:32:36.568]    // User-defined
[02:32:36.568]    DbgMCU_CR=0x00000007
[02:32:36.568]    DbgMCU_APB1_Fz=0x00000000
[02:32:36.568]    DbgMCU_APB2_Fz=0x00000000
[02:32:36.568]    TraceClk_Pin=0x00040002
[02:32:36.569]    TraceD0_Pin=0x00040003
[02:32:36.569]    TraceD1_Pin=0x00040004
[02:32:36.569]    TraceD2_Pin=0x00040005
[02:32:36.569]    TraceD3_Pin=0x00040006
[02:32:36.569]  </debugvars>
[02:32:36.569]  
[02:32:36.569]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:32:36.569]    <block atomic="false" info="">
[02:32:36.570]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:32:36.570]        // -> [traceSWO <= 0x00000001]
[02:32:36.570]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:32:36.570]        // -> [traceTPIU <= 0x00000000]
[02:32:36.570]    </block>
[02:32:36.570]    <control if="traceSWO" while="" timeout="0" info="">
[02:32:36.570]      // if-block "traceSWO"
[02:32:36.570]        // =>  TRUE
[02:32:36.570]      <block atomic="false" info="">
[02:32:36.571]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:32:36.571]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:32:36.571]            <block atomic="false" info="">
[02:32:36.571]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:32:36.571]                // -> [dbgmcu_val <= 0x00000000]
[02:32:36.571]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:32:36.571]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:32:36.572]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:32:36.572]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:32:36.572]                // -> [dbgmcu_val <= 0x00000007]
[02:32:36.572]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:32:36.572]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:32:36.573]              Sequence("ConfigureTraceSWOPin");
[02:32:36.573]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:32:36.573]                  <block atomic="false" info="">
[02:32:36.573]                    __var pin     = 0;
[02:32:36.573]                      // -> [pin <= 0x00000000]
[02:32:36.573]                    __var port    = 0;
[02:32:36.573]                      // -> [port <= 0x00000000]
[02:32:36.573]                    __var portAdr = 0;
[02:32:36.573]                      // -> [portAdr <= 0x00000000]
[02:32:36.574]                    __var pos     = 0;
[02:32:36.574]                      // -> [pos <= 0x00000000]
[02:32:36.574]                    __var SWO_Pin = 0x00010003;          // PB3
[02:32:36.574]                      // -> [SWO_Pin <= 0x00010003]
[02:32:36.574]                  </block>
[02:32:36.574]                  <block atomic="false" info="configure SWO">
[02:32:36.574]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:32:36.574]                      // -> [pin <= 0x00000003]
[02:32:36.574]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:32:36.575]                      // -> [port <= 0x00000001]
[02:32:36.575]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:32:36.575]                      // -> [portAdr <= 0x40020400]
[02:32:36.575]                    pos = pin * 2;
[02:32:36.575]                      // -> [pos <= 0x00000006]
[02:32:36.575]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:32:36.576]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:32:36.576]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:32:36.576]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:32:36.577]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:32:36.577]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:32:36.577]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:32:36.578]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:32:36.578]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:32:36.578]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:32:36.578]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:32:36.579]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:32:36.579]                  </block>
[02:32:36.579]                  <control if="pin <  8" while="" timeout="0" info="">
[02:32:36.579]                    // if-block "pin <  8"
[02:32:36.579]                      // =>  TRUE
[02:32:36.580]                    <block atomic="false" info="">
[02:32:36.580]                      pos = ((pin    ) & 7) * 4;
[02:32:36.580]                        // -> [pos <= 0x0000000C]
[02:32:36.580]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:32:36.580]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:32:36.581]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:32:36.581]                    </block>
[02:32:36.581]                    // end if-block "pin <  8"
[02:32:36.581]                  </control>
[02:32:36.581]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:32:36.581]                    // if-block "pin >= 8"
[02:32:36.581]                      // =>  FALSE
[02:32:36.582]                    // skip if-block "pin >= 8"
[02:32:36.582]                  </control>
[02:32:36.582]                </sequence>
[02:32:36.582]            </block>
[02:32:36.582]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:32:36.582]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:32:36.583]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:32:36.583]            </block>
[02:32:36.583]          </sequence>
[02:32:36.583]      </block>
[02:32:36.583]      // end if-block "traceSWO"
[02:32:36.583]    </control>
[02:32:36.583]    <control if="traceTPIU" while="" timeout="0" info="">
[02:32:36.583]      // if-block "traceTPIU"
[02:32:36.583]        // =>  FALSE
[02:32:36.584]      // skip if-block "traceTPIU"
[02:32:36.584]    </control>
[02:32:36.584]  </sequence>
[02:32:36.584]  
[02:33:37.084]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[02:33:37.084]  
[02:33:37.084]  <debugvars>
[02:33:37.085]    // Pre-defined
[02:33:37.085]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:33:37.085]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:33:37.085]    __dp=0x00000000
[02:33:37.085]    __ap=0x00000000
[02:33:37.085]    __traceout=0x00000001      (SWO Trace)
[02:33:37.085]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:33:37.086]    __FlashAddr=0x00000000
[02:33:37.086]    __FlashLen=0x00000000
[02:33:37.086]    __FlashArg=0x00000000
[02:33:37.086]    __FlashOp=0x00000000
[02:33:37.086]    __Result=0x00000000
[02:33:37.086]    
[02:33:37.086]    // User-defined
[02:33:37.086]    DbgMCU_CR=0x00000007
[02:33:37.086]    DbgMCU_APB1_Fz=0x00000000
[02:33:37.087]    DbgMCU_APB2_Fz=0x00000000
[02:33:37.087]    TraceClk_Pin=0x00040002
[02:33:37.087]    TraceD0_Pin=0x00040003
[02:33:37.087]    TraceD1_Pin=0x00040004
[02:33:37.087]    TraceD2_Pin=0x00040005
[02:33:37.087]    TraceD3_Pin=0x00040006
[02:33:37.087]  </debugvars>
[02:33:37.087]  
[02:33:37.087]  <sequence name="TraceStop" Pname="" disable="false" info="">
[02:33:37.088]    <block atomic="false" info="">
[02:33:37.088]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[02:33:37.088]        // -> [traceSWO <= 0x00000001]
[02:33:37.088]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[02:33:37.088]        // -> [traceTPIU <= 0x00000000]
[02:33:37.088]    </block>
[02:33:37.089]    <control if="traceSWO" while="" timeout="0" info="">
[02:33:37.089]      // if-block "traceSWO"
[02:33:37.089]        // =>  TRUE
[02:33:37.089]      <block atomic="false" info="">
[02:33:37.089]        Sequence("DisableTraceSWO");
[02:33:37.089]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[02:33:37.089]            <block atomic="false" info="">
[02:33:37.089]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:33:37.089]                // -> [dbgmcu_val <= 0x00000000]
[02:33:37.090]            </block>
[02:33:37.090]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[02:33:37.090]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[02:33:37.090]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:33:37.090]                // -> [dbgmcu_val <= 0x00000007]
[02:33:37.090]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[02:33:37.091]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:33:37.091]            </block>
[02:33:37.091]          </sequence>
[02:33:37.091]      </block>
[02:33:37.091]      // end if-block "traceSWO"
[02:33:37.091]    </control>
[02:33:37.092]    <control if="traceTPIU" while="" timeout="0" info="">
[02:33:37.092]      // if-block "traceTPIU"
[02:33:37.092]        // =>  FALSE
[02:33:37.092]      // skip if-block "traceTPIU"
[02:33:37.092]    </control>
[02:33:37.092]  </sequence>
[02:33:37.092]  
[02:33:58.833]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:33:58.834]  
[02:33:58.834]  <debugvars>
[02:33:58.834]    // Pre-defined
[02:33:58.834]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:33:58.834]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:33:58.835]    __dp=0x00000000
[02:33:58.835]    __ap=0x00000000
[02:33:58.835]    __traceout=0x00000001      (SWO Trace)
[02:33:58.835]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:33:58.835]    __FlashAddr=0x00000000
[02:33:58.835]    __FlashLen=0x00000000
[02:33:58.836]    __FlashArg=0x00000000
[02:33:58.836]    __FlashOp=0x00000000
[02:33:58.836]    __Result=0x00000000
[02:33:58.836]    
[02:33:58.836]    // User-defined
[02:33:58.836]    DbgMCU_CR=0x00000007
[02:33:58.836]    DbgMCU_APB1_Fz=0x00000000
[02:33:58.837]    DbgMCU_APB2_Fz=0x00000000
[02:33:58.837]    TraceClk_Pin=0x00040002
[02:33:58.837]    TraceD0_Pin=0x00040003
[02:33:58.837]    TraceD1_Pin=0x00040004
[02:33:58.837]    TraceD2_Pin=0x00040005
[02:33:58.837]    TraceD3_Pin=0x00040006
[02:33:58.837]  </debugvars>
[02:33:58.837]  
[02:33:58.838]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:33:58.838]    <block atomic="false" info="">
[02:33:58.838]      Sequence("CheckID");
[02:33:58.838]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:33:58.838]          <block atomic="false" info="">
[02:33:58.838]            __var pidr1 = 0;
[02:33:58.838]              // -> [pidr1 <= 0x00000000]
[02:33:58.838]            __var pidr2 = 0;
[02:33:58.839]              // -> [pidr2 <= 0x00000000]
[02:33:58.839]            __var jep106id = 0;
[02:33:58.839]              // -> [jep106id <= 0x00000000]
[02:33:58.839]            __var ROMTableBase = 0;
[02:33:58.839]              // -> [ROMTableBase <= 0x00000000]
[02:33:58.839]            __ap = 0;      // AHB-AP
[02:33:58.839]              // -> [__ap <= 0x00000000]
[02:33:58.839]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:33:58.840]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:33:58.840]              // -> [ROMTableBase <= 0xE00FD000]
[02:33:58.840]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:33:58.840]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:33:58.841]              // -> [pidr1 <= 0x00000004]
[02:33:58.841]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:33:58.841]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:33:58.841]              // -> [pidr2 <= 0x0000001A]
[02:33:58.842]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:33:58.842]              // -> [jep106id <= 0x00000020]
[02:33:58.842]          </block>
[02:33:58.842]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:33:58.842]            // if-block "jep106id != 0x20"
[02:33:58.842]              // =>  FALSE
[02:33:58.842]            // skip if-block "jep106id != 0x20"
[02:33:58.842]          </control>
[02:33:58.843]        </sequence>
[02:33:58.843]    </block>
[02:33:58.843]  </sequence>
[02:33:58.843]  
[02:33:58.858]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:33:58.858]  
[02:33:58.858]  <debugvars>
[02:33:58.858]    // Pre-defined
[02:33:58.858]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:33:58.858]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:33:58.859]    __dp=0x00000000
[02:33:58.859]    __ap=0x00000000
[02:33:58.859]    __traceout=0x00000001      (SWO Trace)
[02:33:58.859]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:33:58.859]    __FlashAddr=0x00000000
[02:33:58.860]    __FlashLen=0x00000000
[02:33:58.860]    __FlashArg=0x00000000
[02:33:58.860]    __FlashOp=0x00000000
[02:33:58.860]    __Result=0x00000000
[02:33:58.860]    
[02:33:58.860]    // User-defined
[02:33:58.860]    DbgMCU_CR=0x00000007
[02:33:58.861]    DbgMCU_APB1_Fz=0x00000000
[02:33:58.861]    DbgMCU_APB2_Fz=0x00000000
[02:33:58.861]    TraceClk_Pin=0x00040002
[02:33:58.861]    TraceD0_Pin=0x00040003
[02:33:58.862]    TraceD1_Pin=0x00040004
[02:33:58.862]    TraceD2_Pin=0x00040005
[02:33:58.862]    TraceD3_Pin=0x00040006
[02:33:58.862]  </debugvars>
[02:33:58.862]  
[02:33:58.862]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:33:58.862]    <block atomic="false" info="">
[02:33:58.862]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:33:58.863]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:33:58.863]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:33:58.864]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:33:58.864]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:33:58.864]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:33:58.865]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:33:58.865]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:33:58.865]    </block>
[02:33:58.866]  </sequence>
[02:33:58.866]  
[02:34:30.176]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:34:30.176]  
[02:34:30.177]  <debugvars>
[02:34:30.177]    // Pre-defined
[02:34:30.177]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:34:30.178]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:34:30.178]    __dp=0x00000000
[02:34:30.178]    __ap=0x00000000
[02:34:30.178]    __traceout=0x00000001      (SWO Trace)
[02:34:30.178]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:34:30.178]    __FlashAddr=0x00000000
[02:34:30.179]    __FlashLen=0x00000000
[02:34:30.179]    __FlashArg=0x00000000
[02:34:30.179]    __FlashOp=0x00000000
[02:34:30.179]    __Result=0x00000000
[02:34:30.179]    
[02:34:30.179]    // User-defined
[02:34:30.179]    DbgMCU_CR=0x00000007
[02:34:30.179]    DbgMCU_APB1_Fz=0x00000000
[02:34:30.180]    DbgMCU_APB2_Fz=0x00000000
[02:34:30.180]    TraceClk_Pin=0x00040002
[02:34:30.180]    TraceD0_Pin=0x00040003
[02:34:30.180]    TraceD1_Pin=0x00040004
[02:34:30.180]    TraceD2_Pin=0x00040005
[02:34:30.180]    TraceD3_Pin=0x00040006
[02:34:30.180]  </debugvars>
[02:34:30.180]  
[02:34:30.181]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:34:30.181]    <block atomic="false" info="">
[02:34:30.181]      Sequence("CheckID");
[02:34:30.181]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:34:30.181]          <block atomic="false" info="">
[02:34:30.181]            __var pidr1 = 0;
[02:34:30.181]              // -> [pidr1 <= 0x00000000]
[02:34:30.181]            __var pidr2 = 0;
[02:34:30.182]              // -> [pidr2 <= 0x00000000]
[02:34:30.182]            __var jep106id = 0;
[02:34:30.182]              // -> [jep106id <= 0x00000000]
[02:34:30.182]            __var ROMTableBase = 0;
[02:34:30.182]              // -> [ROMTableBase <= 0x00000000]
[02:34:30.182]            __ap = 0;      // AHB-AP
[02:34:30.182]              // -> [__ap <= 0x00000000]
[02:34:30.182]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:34:30.183]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.183]              // -> [ROMTableBase <= 0xE00FD000]
[02:34:30.183]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:34:30.184]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.184]              // -> [pidr1 <= 0x00000004]
[02:34:30.184]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:34:30.184]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.184]              // -> [pidr2 <= 0x0000001A]
[02:34:30.184]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:34:30.184]              // -> [jep106id <= 0x00000020]
[02:34:30.185]          </block>
[02:34:30.185]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:34:30.185]            // if-block "jep106id != 0x20"
[02:34:30.185]              // =>  FALSE
[02:34:30.185]            // skip if-block "jep106id != 0x20"
[02:34:30.185]          </control>
[02:34:30.185]        </sequence>
[02:34:30.185]    </block>
[02:34:30.185]  </sequence>
[02:34:30.186]  
[02:34:30.200]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:34:30.200]  
[02:34:30.200]  <debugvars>
[02:34:30.200]    // Pre-defined
[02:34:30.200]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:34:30.200]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:34:30.200]    __dp=0x00000000
[02:34:30.200]    __ap=0x00000000
[02:34:30.201]    __traceout=0x00000001      (SWO Trace)
[02:34:30.201]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:34:30.201]    __FlashAddr=0x00000000
[02:34:30.201]    __FlashLen=0x00000000
[02:34:30.201]    __FlashArg=0x00000000
[02:34:30.201]    __FlashOp=0x00000000
[02:34:30.201]    __Result=0x00000000
[02:34:30.201]    
[02:34:30.202]    // User-defined
[02:34:30.202]    DbgMCU_CR=0x00000007
[02:34:30.202]    DbgMCU_APB1_Fz=0x00000000
[02:34:30.202]    DbgMCU_APB2_Fz=0x00000000
[02:34:30.202]    TraceClk_Pin=0x00040002
[02:34:30.202]    TraceD0_Pin=0x00040003
[02:34:30.202]    TraceD1_Pin=0x00040004
[02:34:30.202]    TraceD2_Pin=0x00040005
[02:34:30.203]    TraceD3_Pin=0x00040006
[02:34:30.203]  </debugvars>
[02:34:30.203]  
[02:34:30.203]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:34:30.203]    <block atomic="false" info="">
[02:34:30.203]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:34:30.204]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.204]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:34:30.204]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.204]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:34:30.205]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.205]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:34:30.205]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.205]    </block>
[02:34:30.206]  </sequence>
[02:34:30.206]  
[02:34:30.221]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[02:34:30.221]  
[02:34:30.222]  <debugvars>
[02:34:30.222]    // Pre-defined
[02:34:30.222]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:34:30.222]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:34:30.222]    __dp=0x00000000
[02:34:30.222]    __ap=0x00000000
[02:34:30.222]    __traceout=0x00000001      (SWO Trace)
[02:34:30.223]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:34:30.223]    __FlashAddr=0x00000000
[02:34:30.223]    __FlashLen=0x00000000
[02:34:30.223]    __FlashArg=0x00000000
[02:34:30.223]    __FlashOp=0x00000000
[02:34:30.223]    __Result=0x00000000
[02:34:30.223]    
[02:34:30.223]    // User-defined
[02:34:30.223]    DbgMCU_CR=0x00000007
[02:34:30.224]    DbgMCU_APB1_Fz=0x00000000
[02:34:30.224]    DbgMCU_APB2_Fz=0x00000000
[02:34:30.224]    TraceClk_Pin=0x00040002
[02:34:30.224]    TraceD0_Pin=0x00040003
[02:34:30.224]    TraceD1_Pin=0x00040004
[02:34:30.224]    TraceD2_Pin=0x00040005
[02:34:30.224]    TraceD3_Pin=0x00040006
[02:34:30.225]  </debugvars>
[02:34:30.225]  
[02:34:30.225]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:34:30.225]    <block atomic="false" info="">
[02:34:30.225]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:34:30.225]        // -> [traceSWO <= 0x00000001]
[02:34:30.225]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:34:30.225]        // -> [traceTPIU <= 0x00000000]
[02:34:30.225]    </block>
[02:34:30.226]    <control if="traceSWO" while="" timeout="0" info="">
[02:34:30.226]      // if-block "traceSWO"
[02:34:30.226]        // =>  TRUE
[02:34:30.226]      <block atomic="false" info="">
[02:34:30.226]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:34:30.226]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:34:30.226]            <block atomic="false" info="">
[02:34:30.226]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:34:30.226]                // -> [dbgmcu_val <= 0x00000000]
[02:34:30.227]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:34:30.227]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:34:30.227]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:34:30.227]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.227]                // -> [dbgmcu_val <= 0x00000007]
[02:34:30.227]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:34:30.228]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:34:30.228]              Sequence("ConfigureTraceSWOPin");
[02:34:30.228]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:34:30.228]                  <block atomic="false" info="">
[02:34:30.228]                    __var pin     = 0;
[02:34:30.228]                      // -> [pin <= 0x00000000]
[02:34:30.228]                    __var port    = 0;
[02:34:30.229]                      // -> [port <= 0x00000000]
[02:34:30.229]                    __var portAdr = 0;
[02:34:30.229]                      // -> [portAdr <= 0x00000000]
[02:34:30.229]                    __var pos     = 0;
[02:34:30.229]                      // -> [pos <= 0x00000000]
[02:34:30.229]                    __var SWO_Pin = 0x00010003;          // PB3
[02:34:30.229]                      // -> [SWO_Pin <= 0x00010003]
[02:34:30.229]                  </block>
[02:34:30.229]                  <block atomic="false" info="configure SWO">
[02:34:30.230]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:34:30.230]                      // -> [pin <= 0x00000003]
[02:34:30.230]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:34:30.230]                      // -> [port <= 0x00000001]
[02:34:30.230]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:34:30.230]                      // -> [portAdr <= 0x40020400]
[02:34:30.231]                    pos = pin * 2;
[02:34:30.231]                      // -> [pos <= 0x00000006]
[02:34:30.231]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:34:30.231]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.232]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.232]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:34:30.232]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.233]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.233]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:34:30.233]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.234]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.234]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:34:30.234]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.235]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.235]                  </block>
[02:34:30.235]                  <control if="pin <  8" while="" timeout="0" info="">
[02:34:30.235]                    // if-block "pin <  8"
[02:34:30.235]                      // =>  TRUE
[02:34:30.235]                    <block atomic="false" info="">
[02:34:30.236]                      pos = ((pin    ) & 7) * 4;
[02:34:30.236]                        // -> [pos <= 0x0000000C]
[02:34:30.236]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:34:30.236]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.237]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.237]                    </block>
[02:34:30.237]                    // end if-block "pin <  8"
[02:34:30.237]                  </control>
[02:34:30.237]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:34:30.237]                    // if-block "pin >= 8"
[02:34:30.237]                      // =>  FALSE
[02:34:30.237]                    // skip if-block "pin >= 8"
[02:34:30.238]                  </control>
[02:34:30.238]                </sequence>
[02:34:30.238]            </block>
[02:34:30.238]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:34:30.238]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:34:30.239]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.239]            </block>
[02:34:30.239]          </sequence>
[02:34:30.239]      </block>
[02:34:30.239]      // end if-block "traceSWO"
[02:34:30.239]    </control>
[02:34:30.239]    <control if="traceTPIU" while="" timeout="0" info="">
[02:34:30.239]      // if-block "traceTPIU"
[02:34:30.240]        // =>  FALSE
[02:34:30.240]      // skip if-block "traceTPIU"
[02:34:30.240]    </control>
[02:34:30.240]  </sequence>
[02:34:30.240]  
[02:34:30.244]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:34:30.244]  
[02:34:30.244]  <debugvars>
[02:34:30.244]    // Pre-defined
[02:34:30.244]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:34:30.244]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:34:30.244]    __dp=0x00000000
[02:34:30.244]    __ap=0x00000000
[02:34:30.244]    __traceout=0x00000001      (SWO Trace)
[02:34:30.244]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:34:30.245]    __FlashAddr=0x00000000
[02:34:30.245]    __FlashLen=0x00000000
[02:34:30.245]    __FlashArg=0x00000000
[02:34:30.245]    __FlashOp=0x00000000
[02:34:30.245]    __Result=0x00000000
[02:34:30.245]    
[02:34:30.245]    // User-defined
[02:34:30.245]    DbgMCU_CR=0x00000007
[02:34:30.245]    DbgMCU_APB1_Fz=0x00000000
[02:34:30.245]    DbgMCU_APB2_Fz=0x00000000
[02:34:30.245]    TraceClk_Pin=0x00040002
[02:34:30.246]    TraceD0_Pin=0x00040003
[02:34:30.246]    TraceD1_Pin=0x00040004
[02:34:30.246]    TraceD2_Pin=0x00040005
[02:34:30.246]    TraceD3_Pin=0x00040006
[02:34:30.246]  </debugvars>
[02:34:30.246]  
[02:34:30.246]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:34:30.246]    <block atomic="false" info="">
[02:34:30.247]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:34:30.247]        // -> [traceSWO <= 0x00000001]
[02:34:30.247]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:34:30.247]        // -> [traceTPIU <= 0x00000000]
[02:34:30.247]    </block>
[02:34:30.247]    <control if="traceSWO" while="" timeout="0" info="">
[02:34:30.247]      // if-block "traceSWO"
[02:34:30.247]        // =>  TRUE
[02:34:30.247]      <block atomic="false" info="">
[02:34:30.248]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:34:30.248]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:34:30.248]            <block atomic="false" info="">
[02:34:30.248]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:34:30.248]                // -> [dbgmcu_val <= 0x00000000]
[02:34:30.248]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:34:30.248]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:34:30.248]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:34:30.249]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.249]                // -> [dbgmcu_val <= 0x00000007]
[02:34:30.249]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:34:30.250]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:34:30.250]              Sequence("ConfigureTraceSWOPin");
[02:34:30.250]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:34:30.250]                  <block atomic="false" info="">
[02:34:30.250]                    __var pin     = 0;
[02:34:30.250]                      // -> [pin <= 0x00000000]
[02:34:30.250]                    __var port    = 0;
[02:34:30.250]                      // -> [port <= 0x00000000]
[02:34:30.251]                    __var portAdr = 0;
[02:34:30.251]                      // -> [portAdr <= 0x00000000]
[02:34:30.251]                    __var pos     = 0;
[02:34:30.251]                      // -> [pos <= 0x00000000]
[02:34:30.251]                    __var SWO_Pin = 0x00010003;          // PB3
[02:34:30.251]                      // -> [SWO_Pin <= 0x00010003]
[02:34:30.251]                  </block>
[02:34:30.251]                  <block atomic="false" info="configure SWO">
[02:34:30.252]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:34:30.252]                      // -> [pin <= 0x00000003]
[02:34:30.252]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:34:30.252]                      // -> [port <= 0x00000001]
[02:34:30.252]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:34:30.252]                      // -> [portAdr <= 0x40020400]
[02:34:30.252]                    pos = pin * 2;
[02:34:30.252]                      // -> [pos <= 0x00000006]
[02:34:30.252]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:34:30.253]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.253]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.253]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:34:30.254]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.254]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.254]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:34:30.255]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.255]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.255]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:34:30.256]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.256]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.257]                  </block>
[02:34:30.257]                  <control if="pin <  8" while="" timeout="0" info="">
[02:34:30.257]                    // if-block "pin <  8"
[02:34:30.257]                      // =>  TRUE
[02:34:30.257]                    <block atomic="false" info="">
[02:34:30.257]                      pos = ((pin    ) & 7) * 4;
[02:34:30.257]                        // -> [pos <= 0x0000000C]
[02:34:30.257]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:34:30.258]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.259]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.259]                    </block>
[02:34:30.259]                    // end if-block "pin <  8"
[02:34:30.259]                  </control>
[02:34:30.259]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:34:30.259]                    // if-block "pin >= 8"
[02:34:30.259]                      // =>  FALSE
[02:34:30.259]                    // skip if-block "pin >= 8"
[02:34:30.259]                  </control>
[02:34:30.260]                </sequence>
[02:34:30.260]            </block>
[02:34:30.260]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:34:30.260]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:34:30.261]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.261]            </block>
[02:34:30.261]          </sequence>
[02:34:30.261]      </block>
[02:34:30.261]      // end if-block "traceSWO"
[02:34:30.261]    </control>
[02:34:30.261]    <control if="traceTPIU" while="" timeout="0" info="">
[02:34:30.261]      // if-block "traceTPIU"
[02:34:30.262]        // =>  FALSE
[02:34:30.262]      // skip if-block "traceTPIU"
[02:34:30.262]    </control>
[02:34:30.262]  </sequence>
[02:34:30.262]  
[02:34:30.483]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:34:30.483]  
[02:34:30.483]  <debugvars>
[02:34:30.483]    // Pre-defined
[02:34:30.484]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:34:30.484]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:34:30.484]    __dp=0x00000000
[02:34:30.484]    __ap=0x00000000
[02:34:30.484]    __traceout=0x00000001      (SWO Trace)
[02:34:30.484]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:34:30.484]    __FlashAddr=0x00000000
[02:34:30.484]    __FlashLen=0x00000000
[02:34:30.485]    __FlashArg=0x00000000
[02:34:30.485]    __FlashOp=0x00000000
[02:34:30.485]    __Result=0x00000000
[02:34:30.485]    
[02:34:30.485]    // User-defined
[02:34:30.485]    DbgMCU_CR=0x00000007
[02:34:30.485]    DbgMCU_APB1_Fz=0x00000000
[02:34:30.485]    DbgMCU_APB2_Fz=0x00000000
[02:34:30.485]    TraceClk_Pin=0x00040002
[02:34:30.485]    TraceD0_Pin=0x00040003
[02:34:30.486]    TraceD1_Pin=0x00040004
[02:34:30.486]    TraceD2_Pin=0x00040005
[02:34:30.486]    TraceD3_Pin=0x00040006
[02:34:30.486]  </debugvars>
[02:34:30.486]  
[02:34:30.486]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:34:30.486]    <block atomic="false" info="">
[02:34:30.486]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:34:30.486]        // -> [traceSWO <= 0x00000001]
[02:34:30.487]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:34:30.487]        // -> [traceTPIU <= 0x00000000]
[02:34:30.487]    </block>
[02:34:30.487]    <control if="traceSWO" while="" timeout="0" info="">
[02:34:30.487]      // if-block "traceSWO"
[02:34:30.487]        // =>  TRUE
[02:34:30.487]      <block atomic="false" info="">
[02:34:30.487]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:34:30.487]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:34:30.488]            <block atomic="false" info="">
[02:34:30.488]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:34:30.488]                // -> [dbgmcu_val <= 0x00000000]
[02:34:30.488]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:34:30.488]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:34:30.488]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:34:30.489]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.489]                // -> [dbgmcu_val <= 0x00000007]
[02:34:30.489]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:34:30.489]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:34:30.489]              Sequence("ConfigureTraceSWOPin");
[02:34:30.489]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:34:30.489]                  <block atomic="false" info="">
[02:34:30.489]                    __var pin     = 0;
[02:34:30.490]                      // -> [pin <= 0x00000000]
[02:34:30.490]                    __var port    = 0;
[02:34:30.490]                      // -> [port <= 0x00000000]
[02:34:30.490]                    __var portAdr = 0;
[02:34:30.490]                      // -> [portAdr <= 0x00000000]
[02:34:30.490]                    __var pos     = 0;
[02:34:30.490]                      // -> [pos <= 0x00000000]
[02:34:30.490]                    __var SWO_Pin = 0x00010003;          // PB3
[02:34:30.490]                      // -> [SWO_Pin <= 0x00010003]
[02:34:30.491]                  </block>
[02:34:30.491]                  <block atomic="false" info="configure SWO">
[02:34:30.491]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:34:30.491]                      // -> [pin <= 0x00000003]
[02:34:30.491]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:34:30.491]                      // -> [port <= 0x00000001]
[02:34:30.491]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:34:30.491]                      // -> [portAdr <= 0x40020400]
[02:34:30.491]                    pos = pin * 2;
[02:34:30.492]                      // -> [pos <= 0x00000006]
[02:34:30.492]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:34:30.492]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.493]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.493]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:34:30.493]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.494]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.494]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:34:30.494]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.494]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.495]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:34:30.495]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.495]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.495]                  </block>
[02:34:30.496]                  <control if="pin <  8" while="" timeout="0" info="">
[02:34:30.496]                    // if-block "pin <  8"
[02:34:30.496]                      // =>  TRUE
[02:34:30.496]                    <block atomic="false" info="">
[02:34:30.496]                      pos = ((pin    ) & 7) * 4;
[02:34:30.496]                        // -> [pos <= 0x0000000C]
[02:34:30.496]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:34:30.497]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.497]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.497]                    </block>
[02:34:30.497]                    // end if-block "pin <  8"
[02:34:30.497]                  </control>
[02:34:30.497]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:34:30.498]                    // if-block "pin >= 8"
[02:34:30.498]                      // =>  FALSE
[02:34:30.498]                    // skip if-block "pin >= 8"
[02:34:30.498]                  </control>
[02:34:30.498]                </sequence>
[02:34:30.498]            </block>
[02:34:30.498]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:34:30.498]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:34:30.499]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:34:30.499]            </block>
[02:34:30.499]          </sequence>
[02:34:30.499]      </block>
[02:34:30.499]      // end if-block "traceSWO"
[02:34:30.499]    </control>
[02:34:30.500]    <control if="traceTPIU" while="" timeout="0" info="">
[02:34:30.500]      // if-block "traceTPIU"
[02:34:30.500]        // =>  FALSE
[02:34:30.500]      // skip if-block "traceTPIU"
[02:34:30.500]    </control>
[02:34:30.500]  </sequence>
[02:34:30.500]  
[02:35:56.231]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[02:35:56.231]  
[02:35:56.232]  <debugvars>
[02:35:56.232]    // Pre-defined
[02:35:56.232]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:35:56.232]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:35:56.233]    __dp=0x00000000
[02:35:56.233]    __ap=0x00000000
[02:35:56.233]    __traceout=0x00000001      (SWO Trace)
[02:35:56.233]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:35:56.233]    __FlashAddr=0x00000000
[02:35:56.233]    __FlashLen=0x00000000
[02:35:56.234]    __FlashArg=0x00000000
[02:35:56.234]    __FlashOp=0x00000000
[02:35:56.234]    __Result=0x00000000
[02:35:56.234]    
[02:35:56.234]    // User-defined
[02:35:56.234]    DbgMCU_CR=0x00000007
[02:35:56.234]    DbgMCU_APB1_Fz=0x00000000
[02:35:56.234]    DbgMCU_APB2_Fz=0x00000000
[02:35:56.234]    TraceClk_Pin=0x00040002
[02:35:56.235]    TraceD0_Pin=0x00040003
[02:35:56.235]    TraceD1_Pin=0x00040004
[02:35:56.235]    TraceD2_Pin=0x00040005
[02:35:56.235]    TraceD3_Pin=0x00040006
[02:35:56.235]  </debugvars>
[02:35:56.235]  
[02:35:56.236]  <sequence name="TraceStop" Pname="" disable="false" info="">
[02:35:56.236]    <block atomic="false" info="">
[02:35:56.236]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[02:35:56.236]        // -> [traceSWO <= 0x00000001]
[02:35:56.236]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[02:35:56.236]        // -> [traceTPIU <= 0x00000000]
[02:35:56.236]    </block>
[02:35:56.236]    <control if="traceSWO" while="" timeout="0" info="">
[02:35:56.237]      // if-block "traceSWO"
[02:35:56.237]        // =>  TRUE
[02:35:56.237]      <block atomic="false" info="">
[02:35:56.237]        Sequence("DisableTraceSWO");
[02:35:56.237]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[02:35:56.237]            <block atomic="false" info="">
[02:35:56.238]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:35:56.238]                // -> [dbgmcu_val <= 0x00000000]
[02:35:56.238]            </block>
[02:35:56.238]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[02:35:56.238]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[02:35:56.239]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:35:56.239]                // -> [dbgmcu_val <= 0x00000007]
[02:35:56.239]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[02:35:56.239]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:35:56.240]            </block>
[02:35:56.240]          </sequence>
[02:35:56.240]      </block>
[02:35:56.240]      // end if-block "traceSWO"
[02:35:56.240]    </control>
[02:35:56.240]    <control if="traceTPIU" while="" timeout="0" info="">
[02:35:56.240]      // if-block "traceTPIU"
[02:35:56.240]        // =>  FALSE
[02:35:56.241]      // skip if-block "traceTPIU"
[02:35:56.241]    </control>
[02:35:56.241]  </sequence>
[02:35:56.241]  
[02:36:54.865]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:36:54.865]  
[02:36:54.865]  <debugvars>
[02:36:54.865]    // Pre-defined
[02:36:54.865]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:36:54.865]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:36:54.866]    __dp=0x00000000
[02:36:54.866]    __ap=0x00000000
[02:36:54.866]    __traceout=0x00000001      (SWO Trace)
[02:36:54.866]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:36:54.866]    __FlashAddr=0x00000000
[02:36:54.866]    __FlashLen=0x00000000
[02:36:54.866]    __FlashArg=0x00000000
[02:36:54.866]    __FlashOp=0x00000000
[02:36:54.867]    __Result=0x00000000
[02:36:54.867]    
[02:36:54.867]    // User-defined
[02:36:54.867]    DbgMCU_CR=0x00000007
[02:36:54.867]    DbgMCU_APB1_Fz=0x00000000
[02:36:54.867]    DbgMCU_APB2_Fz=0x00000000
[02:36:54.867]    TraceClk_Pin=0x00040002
[02:36:54.867]    TraceD0_Pin=0x00040003
[02:36:54.867]    TraceD1_Pin=0x00040004
[02:36:54.867]    TraceD2_Pin=0x00040005
[02:36:54.868]    TraceD3_Pin=0x00040006
[02:36:54.868]  </debugvars>
[02:36:54.868]  
[02:36:54.868]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:36:54.868]    <block atomic="false" info="">
[02:36:54.868]      Sequence("CheckID");
[02:36:54.868]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:36:54.868]          <block atomic="false" info="">
[02:36:54.868]            __var pidr1 = 0;
[02:36:54.869]              // -> [pidr1 <= 0x00000000]
[02:36:54.869]            __var pidr2 = 0;
[02:36:54.869]              // -> [pidr2 <= 0x00000000]
[02:36:54.869]            __var jep106id = 0;
[02:36:54.869]              // -> [jep106id <= 0x00000000]
[02:36:54.869]            __var ROMTableBase = 0;
[02:36:54.869]              // -> [ROMTableBase <= 0x00000000]
[02:36:54.869]            __ap = 0;      // AHB-AP
[02:36:54.869]              // -> [__ap <= 0x00000000]
[02:36:54.870]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:36:54.870]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:36:54.870]              // -> [ROMTableBase <= 0xE00FD000]
[02:36:54.870]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:36:54.871]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:36:54.871]              // -> [pidr1 <= 0x00000004]
[02:36:54.871]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:36:54.871]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:36:54.871]              // -> [pidr2 <= 0x0000001A]
[02:36:54.871]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:36:54.872]              // -> [jep106id <= 0x00000020]
[02:36:54.872]          </block>
[02:36:54.872]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:36:54.872]            // if-block "jep106id != 0x20"
[02:36:54.872]              // =>  FALSE
[02:36:54.872]            // skip if-block "jep106id != 0x20"
[02:36:54.872]          </control>
[02:36:54.872]        </sequence>
[02:36:54.872]    </block>
[02:36:54.873]  </sequence>
[02:36:54.873]  
[02:36:54.889]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:36:54.889]  
[02:36:54.889]  <debugvars>
[02:36:54.889]    // Pre-defined
[02:36:54.889]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:36:54.890]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:36:54.890]    __dp=0x00000000
[02:36:54.890]    __ap=0x00000000
[02:36:54.890]    __traceout=0x00000001      (SWO Trace)
[02:36:54.890]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:36:54.890]    __FlashAddr=0x00000000
[02:36:54.891]    __FlashLen=0x00000000
[02:36:54.891]    __FlashArg=0x00000000
[02:36:54.891]    __FlashOp=0x00000000
[02:36:54.891]    __Result=0x00000000
[02:36:54.891]    
[02:36:54.891]    // User-defined
[02:36:54.891]    DbgMCU_CR=0x00000007
[02:36:54.892]    DbgMCU_APB1_Fz=0x00000000
[02:36:54.892]    DbgMCU_APB2_Fz=0x00000000
[02:36:54.892]    TraceClk_Pin=0x00040002
[02:36:54.892]    TraceD0_Pin=0x00040003
[02:36:54.892]    TraceD1_Pin=0x00040004
[02:36:54.892]    TraceD2_Pin=0x00040005
[02:36:54.893]    TraceD3_Pin=0x00040006
[02:36:54.893]  </debugvars>
[02:36:54.893]  
[02:36:54.893]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:36:54.893]    <block atomic="false" info="">
[02:36:54.893]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:36:54.894]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:36:54.894]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:36:54.894]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:36:54.895]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:36:54.895]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:36:54.895]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:36:54.896]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:36:54.896]    </block>
[02:36:54.896]  </sequence>
[02:36:54.896]  
[02:37:26.173]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:37:26.173]  
[02:37:26.173]  <debugvars>
[02:37:26.173]    // Pre-defined
[02:37:26.173]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:37:26.174]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:37:26.174]    __dp=0x00000000
[02:37:26.174]    __ap=0x00000000
[02:37:26.174]    __traceout=0x00000001      (SWO Trace)
[02:37:26.174]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:37:26.174]    __FlashAddr=0x00000000
[02:37:26.175]    __FlashLen=0x00000000
[02:37:26.175]    __FlashArg=0x00000000
[02:37:26.175]    __FlashOp=0x00000000
[02:37:26.175]    __Result=0x00000000
[02:37:26.175]    
[02:37:26.175]    // User-defined
[02:37:26.176]    DbgMCU_CR=0x00000007
[02:37:26.176]    DbgMCU_APB1_Fz=0x00000000
[02:37:26.176]    DbgMCU_APB2_Fz=0x00000000
[02:37:26.176]    TraceClk_Pin=0x00040002
[02:37:26.176]    TraceD0_Pin=0x00040003
[02:37:26.177]    TraceD1_Pin=0x00040004
[02:37:26.177]    TraceD2_Pin=0x00040005
[02:37:26.177]    TraceD3_Pin=0x00040006
[02:37:26.177]  </debugvars>
[02:37:26.177]  
[02:37:26.177]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:37:26.178]    <block atomic="false" info="">
[02:37:26.178]      Sequence("CheckID");
[02:37:26.178]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:37:26.178]          <block atomic="false" info="">
[02:37:26.178]            __var pidr1 = 0;
[02:37:26.178]              // -> [pidr1 <= 0x00000000]
[02:37:26.179]            __var pidr2 = 0;
[02:37:26.179]              // -> [pidr2 <= 0x00000000]
[02:37:26.179]            __var jep106id = 0;
[02:37:26.179]              // -> [jep106id <= 0x00000000]
[02:37:26.179]            __var ROMTableBase = 0;
[02:37:26.179]              // -> [ROMTableBase <= 0x00000000]
[02:37:26.179]            __ap = 0;      // AHB-AP
[02:37:26.179]              // -> [__ap <= 0x00000000]
[02:37:26.180]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:37:26.180]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.180]              // -> [ROMTableBase <= 0xE00FD000]
[02:37:26.180]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:37:26.181]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.181]              // -> [pidr1 <= 0x00000004]
[02:37:26.181]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:37:26.182]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.182]              // -> [pidr2 <= 0x0000001A]
[02:37:26.182]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:37:26.182]              // -> [jep106id <= 0x00000020]
[02:37:26.182]          </block>
[02:37:26.182]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:37:26.182]            // if-block "jep106id != 0x20"
[02:37:26.183]              // =>  FALSE
[02:37:26.183]            // skip if-block "jep106id != 0x20"
[02:37:26.183]          </control>
[02:37:26.183]        </sequence>
[02:37:26.183]    </block>
[02:37:26.183]  </sequence>
[02:37:26.184]  
[02:37:26.198]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:37:26.198]  
[02:37:26.198]  <debugvars>
[02:37:26.199]    // Pre-defined
[02:37:26.199]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:37:26.199]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:37:26.199]    __dp=0x00000000
[02:37:26.199]    __ap=0x00000000
[02:37:26.199]    __traceout=0x00000001      (SWO Trace)
[02:37:26.200]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:37:26.200]    __FlashAddr=0x00000000
[02:37:26.200]    __FlashLen=0x00000000
[02:37:26.200]    __FlashArg=0x00000000
[02:37:26.200]    __FlashOp=0x00000000
[02:37:26.201]    __Result=0x00000000
[02:37:26.201]    
[02:37:26.201]    // User-defined
[02:37:26.201]    DbgMCU_CR=0x00000007
[02:37:26.201]    DbgMCU_APB1_Fz=0x00000000
[02:37:26.201]    DbgMCU_APB2_Fz=0x00000000
[02:37:26.202]    TraceClk_Pin=0x00040002
[02:37:26.202]    TraceD0_Pin=0x00040003
[02:37:26.202]    TraceD1_Pin=0x00040004
[02:37:26.202]    TraceD2_Pin=0x00040005
[02:37:26.202]    TraceD3_Pin=0x00040006
[02:37:26.202]  </debugvars>
[02:37:26.203]  
[02:37:26.203]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:37:26.203]    <block atomic="false" info="">
[02:37:26.203]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:37:26.204]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.204]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:37:26.204]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.204]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:37:26.205]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.205]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:37:26.206]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.206]    </block>
[02:37:26.206]  </sequence>
[02:37:26.206]  
[02:37:26.222]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[02:37:26.222]  
[02:37:26.222]  <debugvars>
[02:37:26.223]    // Pre-defined
[02:37:26.223]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:37:26.223]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:37:26.223]    __dp=0x00000000
[02:37:26.223]    __ap=0x00000000
[02:37:26.223]    __traceout=0x00000001      (SWO Trace)
[02:37:26.224]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:37:26.224]    __FlashAddr=0x00000000
[02:37:26.224]    __FlashLen=0x00000000
[02:37:26.224]    __FlashArg=0x00000000
[02:37:26.224]    __FlashOp=0x00000000
[02:37:26.224]    __Result=0x00000000
[02:37:26.224]    
[02:37:26.224]    // User-defined
[02:37:26.225]    DbgMCU_CR=0x00000007
[02:37:26.225]    DbgMCU_APB1_Fz=0x00000000
[02:37:26.225]    DbgMCU_APB2_Fz=0x00000000
[02:37:26.225]    TraceClk_Pin=0x00040002
[02:37:26.225]    TraceD0_Pin=0x00040003
[02:37:26.225]    TraceD1_Pin=0x00040004
[02:37:26.226]    TraceD2_Pin=0x00040005
[02:37:26.226]    TraceD3_Pin=0x00040006
[02:37:26.226]  </debugvars>
[02:37:26.226]  
[02:37:26.226]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:37:26.226]    <block atomic="false" info="">
[02:37:26.226]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:37:26.227]        // -> [traceSWO <= 0x00000001]
[02:37:26.227]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:37:26.227]        // -> [traceTPIU <= 0x00000000]
[02:37:26.227]    </block>
[02:37:26.227]    <control if="traceSWO" while="" timeout="0" info="">
[02:37:26.227]      // if-block "traceSWO"
[02:37:26.227]        // =>  TRUE
[02:37:26.227]      <block atomic="false" info="">
[02:37:26.228]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:37:26.228]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:37:26.228]            <block atomic="false" info="">
[02:37:26.228]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:37:26.228]                // -> [dbgmcu_val <= 0x00000000]
[02:37:26.228]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:37:26.228]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:37:26.228]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:37:26.229]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.229]                // -> [dbgmcu_val <= 0x00000007]
[02:37:26.229]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:37:26.229]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:37:26.229]              Sequence("ConfigureTraceSWOPin");
[02:37:26.229]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:37:26.229]                  <block atomic="false" info="">
[02:37:26.230]                    __var pin     = 0;
[02:37:26.230]                      // -> [pin <= 0x00000000]
[02:37:26.230]                    __var port    = 0;
[02:37:26.230]                      // -> [port <= 0x00000000]
[02:37:26.230]                    __var portAdr = 0;
[02:37:26.230]                      // -> [portAdr <= 0x00000000]
[02:37:26.230]                    __var pos     = 0;
[02:37:26.230]                      // -> [pos <= 0x00000000]
[02:37:26.230]                    __var SWO_Pin = 0x00010003;          // PB3
[02:37:26.231]                      // -> [SWO_Pin <= 0x00010003]
[02:37:26.231]                  </block>
[02:37:26.231]                  <block atomic="false" info="configure SWO">
[02:37:26.231]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:37:26.231]                      // -> [pin <= 0x00000003]
[02:37:26.231]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:37:26.231]                      // -> [port <= 0x00000001]
[02:37:26.231]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:37:26.231]                      // -> [portAdr <= 0x40020400]
[02:37:26.232]                    pos = pin * 2;
[02:37:26.232]                      // -> [pos <= 0x00000006]
[02:37:26.232]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:37:26.232]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.233]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.233]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:37:26.233]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.234]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.234]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:37:26.234]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.235]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.235]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:37:26.235]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.236]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.236]                  </block>
[02:37:26.236]                  <control if="pin <  8" while="" timeout="0" info="">
[02:37:26.236]                    // if-block "pin <  8"
[02:37:26.236]                      // =>  TRUE
[02:37:26.236]                    <block atomic="false" info="">
[02:37:26.236]                      pos = ((pin    ) & 7) * 4;
[02:37:26.236]                        // -> [pos <= 0x0000000C]
[02:37:26.236]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:37:26.237]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.237]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.237]                    </block>
[02:37:26.237]                    // end if-block "pin <  8"
[02:37:26.238]                  </control>
[02:37:26.238]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:37:26.238]                    // if-block "pin >= 8"
[02:37:26.238]                      // =>  FALSE
[02:37:26.238]                    // skip if-block "pin >= 8"
[02:37:26.238]                  </control>
[02:37:26.238]                </sequence>
[02:37:26.238]            </block>
[02:37:26.238]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:37:26.239]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:37:26.239]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.239]            </block>
[02:37:26.239]          </sequence>
[02:37:26.239]      </block>
[02:37:26.239]      // end if-block "traceSWO"
[02:37:26.239]    </control>
[02:37:26.240]    <control if="traceTPIU" while="" timeout="0" info="">
[02:37:26.240]      // if-block "traceTPIU"
[02:37:26.240]        // =>  FALSE
[02:37:26.240]      // skip if-block "traceTPIU"
[02:37:26.240]    </control>
[02:37:26.240]  </sequence>
[02:37:26.240]  
[02:37:26.244]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:37:26.244]  
[02:37:26.244]  <debugvars>
[02:37:26.244]    // Pre-defined
[02:37:26.244]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:37:26.244]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:37:26.244]    __dp=0x00000000
[02:37:26.244]    __ap=0x00000000
[02:37:26.244]    __traceout=0x00000001      (SWO Trace)
[02:37:26.244]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:37:26.244]    __FlashAddr=0x00000000
[02:37:26.244]    __FlashLen=0x00000000
[02:37:26.244]    __FlashArg=0x00000000
[02:37:26.245]    __FlashOp=0x00000000
[02:37:26.245]    __Result=0x00000000
[02:37:26.245]    
[02:37:26.245]    // User-defined
[02:37:26.245]    DbgMCU_CR=0x00000007
[02:37:26.245]    DbgMCU_APB1_Fz=0x00000000
[02:37:26.245]    DbgMCU_APB2_Fz=0x00000000
[02:37:26.245]    TraceClk_Pin=0x00040002
[02:37:26.245]    TraceD0_Pin=0x00040003
[02:37:26.246]    TraceD1_Pin=0x00040004
[02:37:26.246]    TraceD2_Pin=0x00040005
[02:37:26.246]    TraceD3_Pin=0x00040006
[02:37:26.246]  </debugvars>
[02:37:26.246]  
[02:37:26.246]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:37:26.246]    <block atomic="false" info="">
[02:37:26.246]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:37:26.246]        // -> [traceSWO <= 0x00000001]
[02:37:26.247]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:37:26.247]        // -> [traceTPIU <= 0x00000000]
[02:37:26.247]    </block>
[02:37:26.247]    <control if="traceSWO" while="" timeout="0" info="">
[02:37:26.247]      // if-block "traceSWO"
[02:37:26.247]        // =>  TRUE
[02:37:26.247]      <block atomic="false" info="">
[02:37:26.247]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:37:26.248]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:37:26.248]            <block atomic="false" info="">
[02:37:26.248]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:37:26.248]                // -> [dbgmcu_val <= 0x00000000]
[02:37:26.248]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:37:26.248]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:37:26.248]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:37:26.249]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.249]                // -> [dbgmcu_val <= 0x00000007]
[02:37:26.249]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:37:26.249]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:37:26.249]              Sequence("ConfigureTraceSWOPin");
[02:37:26.249]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:37:26.249]                  <block atomic="false" info="">
[02:37:26.249]                    __var pin     = 0;
[02:37:26.250]                      // -> [pin <= 0x00000000]
[02:37:26.250]                    __var port    = 0;
[02:37:26.250]                      // -> [port <= 0x00000000]
[02:37:26.250]                    __var portAdr = 0;
[02:37:26.250]                      // -> [portAdr <= 0x00000000]
[02:37:26.250]                    __var pos     = 0;
[02:37:26.250]                      // -> [pos <= 0x00000000]
[02:37:26.250]                    __var SWO_Pin = 0x00010003;          // PB3
[02:37:26.250]                      // -> [SWO_Pin <= 0x00010003]
[02:37:26.251]                  </block>
[02:37:26.251]                  <block atomic="false" info="configure SWO">
[02:37:26.251]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:37:26.251]                      // -> [pin <= 0x00000003]
[02:37:26.251]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:37:26.251]                      // -> [port <= 0x00000001]
[02:37:26.251]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:37:26.251]                      // -> [portAdr <= 0x40020400]
[02:37:26.252]                    pos = pin * 2;
[02:37:26.252]                      // -> [pos <= 0x00000006]
[02:37:26.252]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:37:26.252]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.253]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.253]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:37:26.253]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.253]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.254]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:37:26.254]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.254]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.254]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:37:26.255]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.255]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.255]                  </block>
[02:37:26.256]                  <control if="pin <  8" while="" timeout="0" info="">
[02:37:26.256]                    // if-block "pin <  8"
[02:37:26.256]                      // =>  TRUE
[02:37:26.256]                    <block atomic="false" info="">
[02:37:26.256]                      pos = ((pin    ) & 7) * 4;
[02:37:26.256]                        // -> [pos <= 0x0000000C]
[02:37:26.256]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:37:26.257]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.257]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.257]                    </block>
[02:37:26.257]                    // end if-block "pin <  8"
[02:37:26.257]                  </control>
[02:37:26.257]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:37:26.258]                    // if-block "pin >= 8"
[02:37:26.258]                      // =>  FALSE
[02:37:26.258]                    // skip if-block "pin >= 8"
[02:37:26.258]                  </control>
[02:37:26.258]                </sequence>
[02:37:26.258]            </block>
[02:37:26.258]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:37:26.258]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:37:26.259]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.259]            </block>
[02:37:26.259]          </sequence>
[02:37:26.259]      </block>
[02:37:26.259]      // end if-block "traceSWO"
[02:37:26.259]    </control>
[02:37:26.260]    <control if="traceTPIU" while="" timeout="0" info="">
[02:37:26.260]      // if-block "traceTPIU"
[02:37:26.260]        // =>  FALSE
[02:37:26.260]      // skip if-block "traceTPIU"
[02:37:26.260]    </control>
[02:37:26.260]  </sequence>
[02:37:26.260]  
[02:37:26.475]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:37:26.475]  
[02:37:26.475]  <debugvars>
[02:37:26.475]    // Pre-defined
[02:37:26.475]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:37:26.475]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:37:26.476]    __dp=0x00000000
[02:37:26.476]    __ap=0x00000000
[02:37:26.476]    __traceout=0x00000001      (SWO Trace)
[02:37:26.476]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:37:26.476]    __FlashAddr=0x00000000
[02:37:26.476]    __FlashLen=0x00000000
[02:37:26.477]    __FlashArg=0x00000000
[02:37:26.477]    __FlashOp=0x00000000
[02:37:26.477]    __Result=0x00000000
[02:37:26.477]    
[02:37:26.477]    // User-defined
[02:37:26.477]    DbgMCU_CR=0x00000007
[02:37:26.477]    DbgMCU_APB1_Fz=0x00000000
[02:37:26.477]    DbgMCU_APB2_Fz=0x00000000
[02:37:26.478]    TraceClk_Pin=0x00040002
[02:37:26.478]    TraceD0_Pin=0x00040003
[02:37:26.478]    TraceD1_Pin=0x00040004
[02:37:26.478]    TraceD2_Pin=0x00040005
[02:37:26.478]    TraceD3_Pin=0x00040006
[02:37:26.478]  </debugvars>
[02:37:26.478]  
[02:37:26.479]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:37:26.479]    <block atomic="false" info="">
[02:37:26.479]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:37:26.479]        // -> [traceSWO <= 0x00000001]
[02:37:26.479]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:37:26.479]        // -> [traceTPIU <= 0x00000000]
[02:37:26.479]    </block>
[02:37:26.479]    <control if="traceSWO" while="" timeout="0" info="">
[02:37:26.480]      // if-block "traceSWO"
[02:37:26.480]        // =>  TRUE
[02:37:26.480]      <block atomic="false" info="">
[02:37:26.480]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:37:26.480]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:37:26.480]            <block atomic="false" info="">
[02:37:26.480]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:37:26.480]                // -> [dbgmcu_val <= 0x00000000]
[02:37:26.481]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:37:26.481]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:37:26.481]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:37:26.481]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.481]                // -> [dbgmcu_val <= 0x00000007]
[02:37:26.481]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:37:26.482]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:37:26.482]              Sequence("ConfigureTraceSWOPin");
[02:37:26.482]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:37:26.482]                  <block atomic="false" info="">
[02:37:26.482]                    __var pin     = 0;
[02:37:26.482]                      // -> [pin <= 0x00000000]
[02:37:26.482]                    __var port    = 0;
[02:37:26.483]                      // -> [port <= 0x00000000]
[02:37:26.483]                    __var portAdr = 0;
[02:37:26.483]                      // -> [portAdr <= 0x00000000]
[02:37:26.483]                    __var pos     = 0;
[02:37:26.483]                      // -> [pos <= 0x00000000]
[02:37:26.483]                    __var SWO_Pin = 0x00010003;          // PB3
[02:37:26.483]                      // -> [SWO_Pin <= 0x00010003]
[02:37:26.484]                  </block>
[02:37:26.484]                  <block atomic="false" info="configure SWO">
[02:37:26.484]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:37:26.484]                      // -> [pin <= 0x00000003]
[02:37:26.484]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:37:26.484]                      // -> [port <= 0x00000001]
[02:37:26.484]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:37:26.484]                      // -> [portAdr <= 0x40020400]
[02:37:26.485]                    pos = pin * 2;
[02:37:26.485]                      // -> [pos <= 0x00000006]
[02:37:26.485]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:37:26.485]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.486]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.486]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:37:26.486]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.487]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.487]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:37:26.487]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.488]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.488]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:37:26.488]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.489]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.489]                  </block>
[02:37:26.489]                  <control if="pin <  8" while="" timeout="0" info="">
[02:37:26.489]                    // if-block "pin <  8"
[02:37:26.489]                      // =>  TRUE
[02:37:26.489]                    <block atomic="false" info="">
[02:37:26.489]                      pos = ((pin    ) & 7) * 4;
[02:37:26.490]                        // -> [pos <= 0x0000000C]
[02:37:26.490]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:37:26.490]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.491]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.491]                    </block>
[02:37:26.491]                    // end if-block "pin <  8"
[02:37:26.491]                  </control>
[02:37:26.491]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:37:26.491]                    // if-block "pin >= 8"
[02:37:26.492]                      // =>  FALSE
[02:37:26.492]                    // skip if-block "pin >= 8"
[02:37:26.492]                  </control>
[02:37:26.492]                </sequence>
[02:37:26.492]            </block>
[02:37:26.492]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:37:26.492]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:37:26.493]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:26.493]            </block>
[02:37:26.493]          </sequence>
[02:37:26.493]      </block>
[02:37:26.494]      // end if-block "traceSWO"
[02:37:26.494]    </control>
[02:37:26.494]    <control if="traceTPIU" while="" timeout="0" info="">
[02:37:26.494]      // if-block "traceTPIU"
[02:37:26.494]        // =>  FALSE
[02:37:26.494]      // skip if-block "traceTPIU"
[02:37:26.494]    </control>
[02:37:26.494]  </sequence>
[02:37:26.495]  
[02:37:40.029]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[02:37:40.029]  
[02:37:40.030]  <debugvars>
[02:37:40.030]    // Pre-defined
[02:37:40.030]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:37:40.030]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:37:40.030]    __dp=0x00000000
[02:37:40.030]    __ap=0x00000000
[02:37:40.031]    __traceout=0x00000001      (SWO Trace)
[02:37:40.031]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:37:40.031]    __FlashAddr=0x00000000
[02:37:40.031]    __FlashLen=0x00000000
[02:37:40.031]    __FlashArg=0x00000000
[02:37:40.031]    __FlashOp=0x00000000
[02:37:40.032]    __Result=0x00000000
[02:37:40.032]    
[02:37:40.032]    // User-defined
[02:37:40.032]    DbgMCU_CR=0x00000007
[02:37:40.032]    DbgMCU_APB1_Fz=0x00000000
[02:37:40.032]    DbgMCU_APB2_Fz=0x00000000
[02:37:40.033]    TraceClk_Pin=0x00040002
[02:37:40.033]    TraceD0_Pin=0x00040003
[02:37:40.033]    TraceD1_Pin=0x00040004
[02:37:40.033]    TraceD2_Pin=0x00040005
[02:37:40.033]    TraceD3_Pin=0x00040006
[02:37:40.033]  </debugvars>
[02:37:40.034]  
[02:37:40.034]  <sequence name="TraceStart" Pname="" disable="false" info="">
[02:37:40.034]    <block atomic="false" info="">
[02:37:40.034]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[02:37:40.034]        // -> [traceSWO <= 0x00000001]
[02:37:40.034]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[02:37:40.035]        // -> [traceTPIU <= 0x00000000]
[02:37:40.035]    </block>
[02:37:40.035]    <control if="traceSWO" while="" timeout="0" info="">
[02:37:40.035]      // if-block "traceSWO"
[02:37:40.035]        // =>  TRUE
[02:37:40.035]      <block atomic="false" info="">
[02:37:40.035]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[02:37:40.035]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[02:37:40.035]            <block atomic="false" info="">
[02:37:40.036]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:37:40.036]                // -> [dbgmcu_val <= 0x00000000]
[02:37:40.036]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[02:37:40.036]                // -> [dbgmcu_trace_val <= 0x00000000]
[02:37:40.036]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[02:37:40.036]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:37:40.037]                // -> [dbgmcu_val <= 0x00000007]
[02:37:40.037]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[02:37:40.037]                // -> [dbgmcu_trace_val <= 0x00000020]
[02:37:40.037]              Sequence("ConfigureTraceSWOPin");
[02:37:40.037]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[02:37:40.037]                  <block atomic="false" info="">
[02:37:40.037]                    __var pin     = 0;
[02:37:40.037]                      // -> [pin <= 0x00000000]
[02:37:40.037]                    __var port    = 0;
[02:37:40.038]                      // -> [port <= 0x00000000]
[02:37:40.038]                    __var portAdr = 0;
[02:37:40.038]                      // -> [portAdr <= 0x00000000]
[02:37:40.038]                    __var pos     = 0;
[02:37:40.038]                      // -> [pos <= 0x00000000]
[02:37:40.038]                    __var SWO_Pin = 0x00010003;          // PB3
[02:37:40.038]                      // -> [SWO_Pin <= 0x00010003]
[02:37:40.038]                  </block>
[02:37:40.038]                  <block atomic="false" info="configure SWO">
[02:37:40.038]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[02:37:40.039]                      // -> [pin <= 0x00000003]
[02:37:40.039]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[02:37:40.039]                      // -> [port <= 0x00000001]
[02:37:40.039]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[02:37:40.039]                      // -> [portAdr <= 0x40020400]
[02:37:40.039]                    pos = pin * 2;
[02:37:40.039]                      // -> [pos <= 0x00000006]
[02:37:40.039]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[02:37:40.040]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[02:37:40.040]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:40.040]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[02:37:40.041]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[02:37:40.041]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:40.041]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[02:37:40.042]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[02:37:40.042]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:40.042]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[02:37:40.043]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[02:37:40.043]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:40.043]                  </block>
[02:37:40.044]                  <control if="pin <  8" while="" timeout="0" info="">
[02:37:40.044]                    // if-block "pin <  8"
[02:37:40.044]                      // =>  TRUE
[02:37:40.044]                    <block atomic="false" info="">
[02:37:40.044]                      pos = ((pin    ) & 7) * 4;
[02:37:40.044]                        // -> [pos <= 0x0000000C]
[02:37:40.044]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[02:37:40.045]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[02:37:40.045]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:40.045]                    </block>
[02:37:40.045]                    // end if-block "pin <  8"
[02:37:40.045]                  </control>
[02:37:40.046]                  <control if="pin >= 8" while="" timeout="0" info="">
[02:37:40.046]                    // if-block "pin >= 8"
[02:37:40.046]                      // =>  FALSE
[02:37:40.046]                    // skip if-block "pin >= 8"
[02:37:40.046]                  </control>
[02:37:40.046]                </sequence>
[02:37:40.046]            </block>
[02:37:40.046]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[02:37:40.046]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[02:37:40.047]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[02:37:40.047]            </block>
[02:37:40.047]          </sequence>
[02:37:40.047]      </block>
[02:37:40.047]      // end if-block "traceSWO"
[02:37:40.047]    </control>
[02:37:40.047]    <control if="traceTPIU" while="" timeout="0" info="">
[02:37:40.048]      // if-block "traceTPIU"
[02:37:40.048]        // =>  FALSE
[02:37:40.048]      // skip if-block "traceTPIU"
[02:37:40.048]    </control>
[02:37:40.048]  </sequence>
[02:37:40.048]  
[02:40:33.880]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[02:40:33.880]  
[02:40:33.880]  <debugvars>
[02:40:33.880]    // Pre-defined
[02:40:33.881]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:40:33.881]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[02:40:33.881]    __dp=0x00000000
[02:40:33.881]    __ap=0x00000000
[02:40:33.881]    __traceout=0x00000001      (SWO Trace)
[02:40:33.881]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:40:33.882]    __FlashAddr=0x00000000
[02:40:33.882]    __FlashLen=0x00000000
[02:40:33.882]    __FlashArg=0x00000000
[02:40:33.882]    __FlashOp=0x00000000
[02:40:33.882]    __Result=0x00000000
[02:40:33.882]    
[02:40:33.882]    // User-defined
[02:40:33.882]    DbgMCU_CR=0x00000007
[02:40:33.883]    DbgMCU_APB1_Fz=0x00000000
[02:40:33.883]    DbgMCU_APB2_Fz=0x00000000
[02:40:33.883]    TraceClk_Pin=0x00040002
[02:40:33.883]    TraceD0_Pin=0x00040003
[02:40:33.883]    TraceD1_Pin=0x00040004
[02:40:33.883]    TraceD2_Pin=0x00040005
[02:40:33.883]    TraceD3_Pin=0x00040006
[02:40:33.883]  </debugvars>
[02:40:33.883]  
[02:40:33.884]  <sequence name="TraceStop" Pname="" disable="false" info="">
[02:40:33.884]    <block atomic="false" info="">
[02:40:33.884]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[02:40:33.884]        // -> [traceSWO <= 0x00000001]
[02:40:33.884]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[02:40:33.884]        // -> [traceTPIU <= 0x00000000]
[02:40:33.885]    </block>
[02:40:33.885]    <control if="traceSWO" while="" timeout="0" info="">
[02:40:33.885]      // if-block "traceSWO"
[02:40:33.885]        // =>  TRUE
[02:40:33.885]      <block atomic="false" info="">
[02:40:33.885]        Sequence("DisableTraceSWO");
[02:40:33.885]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[02:40:33.886]            <block atomic="false" info="">
[02:40:33.886]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[02:40:33.886]                // -> [dbgmcu_val <= 0x00000000]
[02:40:33.886]            </block>
[02:40:33.886]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[02:40:33.886]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[02:40:33.886]  
[02:40:33.886]  !!! E310 : Debug access failed - cannot read address 0xE0042004 (accsize '4', AP '0x00000000')
[02:40:33.886]  
[02:40:33.887]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[02:40:33.887]            </block>
[02:40:33.887]          </sequence>
[02:40:33.887]      </block>
[02:40:33.887]      // end if-block "traceSWO"
[02:40:33.887]    </control>
[02:40:33.887]  </sequence>
[02:40:33.887]  
[02:43:29.268]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:43:29.268]  
[02:43:29.269]  <debugvars>
[02:43:29.269]    // Pre-defined
[02:43:29.270]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:43:29.270]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:43:29.270]    __dp=0x00000000
[02:43:29.270]    __ap=0x00000000
[02:43:29.270]    __traceout=0x00000001      (SWO Trace)
[02:43:29.270]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:43:29.271]    __FlashAddr=0x00000000
[02:43:29.271]    __FlashLen=0x00000000
[02:43:29.271]    __FlashArg=0x00000000
[02:43:29.271]    __FlashOp=0x00000000
[02:43:29.271]    __Result=0x00000000
[02:43:29.271]    
[02:43:29.271]    // User-defined
[02:43:29.272]    DbgMCU_CR=0x00000007
[02:43:29.272]    DbgMCU_APB1_Fz=0x00000000
[02:43:29.272]    DbgMCU_APB2_Fz=0x00000000
[02:43:29.272]    TraceClk_Pin=0x00040002
[02:43:29.273]    TraceD0_Pin=0x00040003
[02:43:29.273]    TraceD1_Pin=0x00040004
[02:43:29.273]    TraceD2_Pin=0x00040005
[02:43:29.273]    TraceD3_Pin=0x00040006
[02:43:29.273]  </debugvars>
[02:43:29.273]  
[02:43:29.273]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:43:29.274]    <block atomic="false" info="">
[02:43:29.274]      Sequence("CheckID");
[02:43:29.274]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:43:29.274]          <block atomic="false" info="">
[02:43:29.274]            __var pidr1 = 0;
[02:43:29.274]              // -> [pidr1 <= 0x00000000]
[02:43:29.274]            __var pidr2 = 0;
[02:43:29.275]              // -> [pidr2 <= 0x00000000]
[02:43:29.275]            __var jep106id = 0;
[02:43:29.275]              // -> [jep106id <= 0x00000000]
[02:43:29.275]            __var ROMTableBase = 0;
[02:43:29.275]              // -> [ROMTableBase <= 0x00000000]
[02:43:29.275]            __ap = 0;      // AHB-AP
[02:43:29.275]              // -> [__ap <= 0x00000000]
[02:43:29.276]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:43:29.276]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:43:29.276]              // -> [ROMTableBase <= 0xE00FD000]
[02:43:29.276]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:43:29.277]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:43:29.277]              // -> [pidr1 <= 0x00000004]
[02:43:29.277]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:43:29.277]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:43:29.278]              // -> [pidr2 <= 0x0000001A]
[02:43:29.278]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:43:29.278]              // -> [jep106id <= 0x00000020]
[02:43:29.278]          </block>
[02:43:29.278]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:43:29.278]            // if-block "jep106id != 0x20"
[02:43:29.278]              // =>  FALSE
[02:43:29.278]            // skip if-block "jep106id != 0x20"
[02:43:29.278]          </control>
[02:43:29.278]        </sequence>
[02:43:29.279]    </block>
[02:43:29.279]  </sequence>
[02:43:29.279]  
[02:43:29.293]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:43:29.293]  
[02:43:29.294]  <debugvars>
[02:43:29.294]    // Pre-defined
[02:43:29.294]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:43:29.294]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:43:29.294]    __dp=0x00000000
[02:43:29.294]    __ap=0x00000000
[02:43:29.295]    __traceout=0x00000001      (SWO Trace)
[02:43:29.295]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:43:29.295]    __FlashAddr=0x00000000
[02:43:29.295]    __FlashLen=0x00000000
[02:43:29.295]    __FlashArg=0x00000000
[02:43:29.295]    __FlashOp=0x00000000
[02:43:29.296]    __Result=0x00000000
[02:43:29.296]    
[02:43:29.296]    // User-defined
[02:43:29.296]    DbgMCU_CR=0x00000007
[02:43:29.296]    DbgMCU_APB1_Fz=0x00000000
[02:43:29.297]    DbgMCU_APB2_Fz=0x00000000
[02:43:29.297]    TraceClk_Pin=0x00040002
[02:43:29.297]    TraceD0_Pin=0x00040003
[02:43:29.297]    TraceD1_Pin=0x00040004
[02:43:29.297]    TraceD2_Pin=0x00040005
[02:43:29.297]    TraceD3_Pin=0x00040006
[02:43:29.298]  </debugvars>
[02:43:29.298]  
[02:43:29.298]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:43:29.298]    <block atomic="false" info="">
[02:43:29.298]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:43:29.299]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:43:29.299]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:43:29.299]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:43:29.300]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:43:29.300]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:43:29.300]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:43:29.301]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:43:29.301]    </block>
[02:43:29.301]  </sequence>
[02:43:29.301]  
[02:48:31.357]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:48:31.357]  
[02:48:31.358]  <debugvars>
[02:48:31.358]    // Pre-defined
[02:48:31.358]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:48:31.358]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:48:31.358]    __dp=0x00000000
[02:48:31.358]    __ap=0x00000000
[02:48:31.359]    __traceout=0x00000001      (SWO Trace)
[02:48:31.359]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:48:31.359]    __FlashAddr=0x00000000
[02:48:31.359]    __FlashLen=0x00000000
[02:48:31.359]    __FlashArg=0x00000000
[02:48:31.359]    __FlashOp=0x00000000
[02:48:31.359]    __Result=0x00000000
[02:48:31.360]    
[02:48:31.360]    // User-defined
[02:48:31.360]    DbgMCU_CR=0x00000007
[02:48:31.360]    DbgMCU_APB1_Fz=0x00000000
[02:48:31.360]    DbgMCU_APB2_Fz=0x00000000
[02:48:31.361]    TraceClk_Pin=0x00040002
[02:48:31.361]    TraceD0_Pin=0x00040003
[02:48:31.361]    TraceD1_Pin=0x00040004
[02:48:31.361]    TraceD2_Pin=0x00040005
[02:48:31.361]    TraceD3_Pin=0x00040006
[02:48:31.361]  </debugvars>
[02:48:31.361]  
[02:48:31.361]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:48:31.362]    <block atomic="false" info="">
[02:48:31.362]      Sequence("CheckID");
[02:48:31.362]        <sequence name="CheckID" Pname="" disable="false" info="">
[02:48:31.362]          <block atomic="false" info="">
[02:48:31.362]            __var pidr1 = 0;
[02:48:31.363]              // -> [pidr1 <= 0x00000000]
[02:48:31.363]            __var pidr2 = 0;
[02:48:31.363]              // -> [pidr2 <= 0x00000000]
[02:48:31.363]            __var jep106id = 0;
[02:48:31.363]              // -> [jep106id <= 0x00000000]
[02:48:31.363]            __var ROMTableBase = 0;
[02:48:31.363]              // -> [ROMTableBase <= 0x00000000]
[02:48:31.363]            __ap = 0;      // AHB-AP
[02:48:31.364]              // -> [__ap <= 0x00000000]
[02:48:31.364]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[02:48:31.364]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[02:48:31.364]              // -> [ROMTableBase <= 0xE00FD000]
[02:48:31.364]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[02:48:31.365]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[02:48:31.365]              // -> [pidr1 <= 0x00000004]
[02:48:31.365]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[02:48:31.366]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[02:48:31.366]              // -> [pidr2 <= 0x0000001A]
[02:48:31.366]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[02:48:31.366]              // -> [jep106id <= 0x00000020]
[02:48:31.366]          </block>
[02:48:31.366]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[02:48:31.366]            // if-block "jep106id != 0x20"
[02:48:31.367]              // =>  FALSE
[02:48:31.367]            // skip if-block "jep106id != 0x20"
[02:48:31.367]          </control>
[02:48:31.367]        </sequence>
[02:48:31.367]    </block>
[02:48:31.367]  </sequence>
[02:48:31.367]  
[02:48:31.382]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[02:48:31.382]  
[02:48:31.382]  <debugvars>
[02:48:31.382]    // Pre-defined
[02:48:31.382]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:48:31.382]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[02:48:31.383]    __dp=0x00000000
[02:48:31.383]    __ap=0x00000000
[02:48:31.383]    __traceout=0x00000001      (SWO Trace)
[02:48:31.383]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:48:31.383]    __FlashAddr=0x00000000
[02:48:31.384]    __FlashLen=0x00000000
[02:48:31.384]    __FlashArg=0x00000000
[02:48:31.384]    __FlashOp=0x00000000
[02:48:31.384]    __Result=0x00000000
[02:48:31.384]    
[02:48:31.384]    // User-defined
[02:48:31.385]    DbgMCU_CR=0x00000007
[02:48:31.385]    DbgMCU_APB1_Fz=0x00000000
[02:48:31.385]    DbgMCU_APB2_Fz=0x00000000
[02:48:31.385]    TraceClk_Pin=0x00040002
[02:48:31.385]    TraceD0_Pin=0x00040003
[02:48:31.385]    TraceD1_Pin=0x00040004
[02:48:31.386]    TraceD2_Pin=0x00040005
[02:48:31.386]    TraceD3_Pin=0x00040006
[02:48:31.386]  </debugvars>
[02:48:31.386]  
[02:48:31.386]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[02:48:31.386]    <block atomic="false" info="">
[02:48:31.387]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[02:48:31.387]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[02:48:31.387]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[02:48:31.388]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[02:48:31.388]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[02:48:31.389]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:48:31.389]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[02:48:31.390]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[02:48:31.390]    </block>
[02:48:31.390]  </sequence>
[02:48:31.390]  
[03:09:27.722]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:09:27.722]  
[03:09:27.722]  <debugvars>
[03:09:27.722]    // Pre-defined
[03:09:27.722]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:09:27.723]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:09:27.723]    __dp=0x00000000
[03:09:27.723]    __ap=0x00000000
[03:09:27.723]    __traceout=0x00000001      (SWO Trace)
[03:09:27.723]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:09:27.724]    __FlashAddr=0x00000000
[03:09:27.724]    __FlashLen=0x00000000
[03:09:27.724]    __FlashArg=0x00000000
[03:09:27.724]    __FlashOp=0x00000000
[03:09:27.724]    __Result=0x00000000
[03:09:27.725]    
[03:09:27.725]    // User-defined
[03:09:27.725]    DbgMCU_CR=0x00000007
[03:09:27.725]    DbgMCU_APB1_Fz=0x00000000
[03:09:27.725]    DbgMCU_APB2_Fz=0x00000000
[03:09:27.725]    TraceClk_Pin=0x00040002
[03:09:27.725]    TraceD0_Pin=0x00040003
[03:09:27.726]    TraceD1_Pin=0x00040004
[03:09:27.726]    TraceD2_Pin=0x00040005
[03:09:27.726]    TraceD3_Pin=0x00040006
[03:09:27.726]  </debugvars>
[03:09:27.726]  
[03:09:27.726]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:09:27.727]    <block atomic="false" info="">
[03:09:27.727]      Sequence("CheckID");
[03:09:27.727]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:09:27.727]          <block atomic="false" info="">
[03:09:27.727]            __var pidr1 = 0;
[03:09:27.727]              // -> [pidr1 <= 0x00000000]
[03:09:27.728]            __var pidr2 = 0;
[03:09:27.728]              // -> [pidr2 <= 0x00000000]
[03:09:27.728]            __var jep106id = 0;
[03:09:27.728]              // -> [jep106id <= 0x00000000]
[03:09:27.728]            __var ROMTableBase = 0;
[03:09:27.728]              // -> [ROMTableBase <= 0x00000000]
[03:09:27.728]            __ap = 0;      // AHB-AP
[03:09:27.729]              // -> [__ap <= 0x00000000]
[03:09:27.729]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:09:27.729]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:09:27.729]              // -> [ROMTableBase <= 0xE00FD000]
[03:09:27.729]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:09:27.730]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:09:27.730]              // -> [pidr1 <= 0x00000004]
[03:09:27.730]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:09:27.731]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:09:27.731]              // -> [pidr2 <= 0x0000001A]
[03:09:27.731]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:09:27.731]              // -> [jep106id <= 0x00000020]
[03:09:27.731]          </block>
[03:09:27.731]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:09:27.731]            // if-block "jep106id != 0x20"
[03:09:27.731]              // =>  FALSE
[03:09:27.732]            // skip if-block "jep106id != 0x20"
[03:09:27.732]          </control>
[03:09:27.732]        </sequence>
[03:09:27.732]    </block>
[03:09:27.732]  </sequence>
[03:09:27.732]  
[03:09:27.747]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:09:27.747]  
[03:09:27.748]  <debugvars>
[03:09:27.748]    // Pre-defined
[03:09:27.748]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:09:27.748]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:09:27.748]    __dp=0x00000000
[03:09:27.748]    __ap=0x00000000
[03:09:27.749]    __traceout=0x00000001      (SWO Trace)
[03:09:27.749]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:09:27.749]    __FlashAddr=0x00000000
[03:09:27.749]    __FlashLen=0x00000000
[03:09:27.749]    __FlashArg=0x00000000
[03:09:27.749]    __FlashOp=0x00000000
[03:09:27.750]    __Result=0x00000000
[03:09:27.750]    
[03:09:27.750]    // User-defined
[03:09:27.750]    DbgMCU_CR=0x00000007
[03:09:27.750]    DbgMCU_APB1_Fz=0x00000000
[03:09:27.750]    DbgMCU_APB2_Fz=0x00000000
[03:09:27.750]    TraceClk_Pin=0x00040002
[03:09:27.750]    TraceD0_Pin=0x00040003
[03:09:27.751]    TraceD1_Pin=0x00040004
[03:09:27.751]    TraceD2_Pin=0x00040005
[03:09:27.751]    TraceD3_Pin=0x00040006
[03:09:27.751]  </debugvars>
[03:09:27.751]  
[03:09:27.751]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:09:27.751]    <block atomic="false" info="">
[03:09:27.752]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:09:27.752]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:27.752]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:09:27.753]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:27.753]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:09:27.753]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:27.754]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:09:27.754]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:09:27.754]    </block>
[03:09:27.754]  </sequence>
[03:09:27.755]  
[03:47:46.002]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:47:46.002]  
[03:47:46.002]  <debugvars>
[03:47:46.003]    // Pre-defined
[03:47:46.003]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:47:46.003]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:47:46.003]    __dp=0x00000000
[03:47:46.003]    __ap=0x00000000
[03:47:46.004]    __traceout=0x00000001      (SWO Trace)
[03:47:46.004]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:47:46.004]    __FlashAddr=0x00000000
[03:47:46.004]    __FlashLen=0x00000000
[03:47:46.004]    __FlashArg=0x00000000
[03:47:46.004]    __FlashOp=0x00000000
[03:47:46.005]    __Result=0x00000000
[03:47:46.005]    
[03:47:46.005]    // User-defined
[03:47:46.005]    DbgMCU_CR=0x00000007
[03:47:46.005]    DbgMCU_APB1_Fz=0x00000000
[03:47:46.005]    DbgMCU_APB2_Fz=0x00000000
[03:47:46.005]    TraceClk_Pin=0x00040002
[03:47:46.006]    TraceD0_Pin=0x00040003
[03:47:46.006]    TraceD1_Pin=0x00040004
[03:47:46.006]    TraceD2_Pin=0x00040005
[03:47:46.006]    TraceD3_Pin=0x00040006
[03:47:46.006]  </debugvars>
[03:47:46.006]  
[03:47:46.007]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:47:46.007]    <block atomic="false" info="">
[03:47:46.007]      Sequence("CheckID");
[03:47:46.007]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:47:46.007]          <block atomic="false" info="">
[03:47:46.007]            __var pidr1 = 0;
[03:47:46.007]              // -> [pidr1 <= 0x00000000]
[03:47:46.008]            __var pidr2 = 0;
[03:47:46.008]              // -> [pidr2 <= 0x00000000]
[03:47:46.008]            __var jep106id = 0;
[03:47:46.008]              // -> [jep106id <= 0x00000000]
[03:47:46.008]            __var ROMTableBase = 0;
[03:47:46.008]              // -> [ROMTableBase <= 0x00000000]
[03:47:46.009]            __ap = 0;      // AHB-AP
[03:47:46.009]              // -> [__ap <= 0x00000000]
[03:47:46.009]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:47:46.009]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:47:46.009]              // -> [ROMTableBase <= 0xE00FD000]
[03:47:46.010]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:47:46.010]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:47:46.010]              // -> [pidr1 <= 0x00000004]
[03:47:46.010]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:47:46.011]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:47:46.011]              // -> [pidr2 <= 0x0000001A]
[03:47:46.011]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:47:46.011]              // -> [jep106id <= 0x00000020]
[03:47:46.011]          </block>
[03:47:46.011]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:47:46.012]            // if-block "jep106id != 0x20"
[03:47:46.012]              // =>  FALSE
[03:47:46.012]            // skip if-block "jep106id != 0x20"
[03:47:46.012]          </control>
[03:47:46.012]        </sequence>
[03:47:46.012]    </block>
[03:47:46.012]  </sequence>
[03:47:46.012]  
[03:47:46.027]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:47:46.027]  
[03:47:46.027]  <debugvars>
[03:47:46.027]    // Pre-defined
[03:47:46.027]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:47:46.027]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:47:46.028]    __dp=0x00000000
[03:47:46.028]    __ap=0x00000000
[03:47:46.028]    __traceout=0x00000001      (SWO Trace)
[03:47:46.028]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:47:46.028]    __FlashAddr=0x00000000
[03:47:46.028]    __FlashLen=0x00000000
[03:47:46.029]    __FlashArg=0x00000000
[03:47:46.029]    __FlashOp=0x00000000
[03:47:46.029]    __Result=0x00000000
[03:47:46.029]    
[03:47:46.029]    // User-defined
[03:47:46.029]    DbgMCU_CR=0x00000007
[03:47:46.030]    DbgMCU_APB1_Fz=0x00000000
[03:47:46.030]    DbgMCU_APB2_Fz=0x00000000
[03:47:46.030]    TraceClk_Pin=0x00040002
[03:47:46.030]    TraceD0_Pin=0x00040003
[03:47:46.030]    TraceD1_Pin=0x00040004
[03:47:46.030]    TraceD2_Pin=0x00040005
[03:47:46.031]    TraceD3_Pin=0x00040006
[03:47:46.031]  </debugvars>
[03:47:46.031]  
[03:47:46.031]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:47:46.031]    <block atomic="false" info="">
[03:47:46.032]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:47:46.032]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:47:46.032]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:47:46.033]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:47:46.033]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:47:46.034]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:47:46.034]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:47:46.035]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:47:46.035]    </block>
[03:47:46.035]  </sequence>
[03:47:46.035]  
[03:48:17.412]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:48:17.412]  
[03:48:17.412]  <debugvars>
[03:48:17.412]    // Pre-defined
[03:48:17.413]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:48:17.413]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:48:17.413]    __dp=0x00000000
[03:48:17.413]    __ap=0x00000000
[03:48:17.413]    __traceout=0x00000001      (SWO Trace)
[03:48:17.413]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:48:17.413]    __FlashAddr=0x00000000
[03:48:17.413]    __FlashLen=0x00000000
[03:48:17.414]    __FlashArg=0x00000000
[03:48:17.414]    __FlashOp=0x00000000
[03:48:17.414]    __Result=0x00000000
[03:48:17.414]    
[03:48:17.414]    // User-defined
[03:48:17.414]    DbgMCU_CR=0x00000007
[03:48:17.414]    DbgMCU_APB1_Fz=0x00000000
[03:48:17.414]    DbgMCU_APB2_Fz=0x00000000
[03:48:17.414]    TraceClk_Pin=0x00040002
[03:48:17.415]    TraceD0_Pin=0x00040003
[03:48:17.415]    TraceD1_Pin=0x00040004
[03:48:17.415]    TraceD2_Pin=0x00040005
[03:48:17.415]    TraceD3_Pin=0x00040006
[03:48:17.415]  </debugvars>
[03:48:17.415]  
[03:48:17.415]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:48:17.415]    <block atomic="false" info="">
[03:48:17.416]      Sequence("CheckID");
[03:48:17.416]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:48:17.416]          <block atomic="false" info="">
[03:48:17.416]            __var pidr1 = 0;
[03:48:17.416]              // -> [pidr1 <= 0x00000000]
[03:48:17.416]            __var pidr2 = 0;
[03:48:17.416]              // -> [pidr2 <= 0x00000000]
[03:48:17.416]            __var jep106id = 0;
[03:48:17.417]              // -> [jep106id <= 0x00000000]
[03:48:17.417]            __var ROMTableBase = 0;
[03:48:17.417]              // -> [ROMTableBase <= 0x00000000]
[03:48:17.417]            __ap = 0;      // AHB-AP
[03:48:17.417]              // -> [__ap <= 0x00000000]
[03:48:17.417]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:48:17.417]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.418]              // -> [ROMTableBase <= 0xE00FD000]
[03:48:17.418]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:48:17.418]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.418]              // -> [pidr1 <= 0x00000004]
[03:48:17.418]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:48:17.419]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.419]              // -> [pidr2 <= 0x0000001A]
[03:48:17.419]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:48:17.419]              // -> [jep106id <= 0x00000020]
[03:48:17.419]          </block>
[03:48:17.419]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:48:17.420]            // if-block "jep106id != 0x20"
[03:48:17.420]              // =>  FALSE
[03:48:17.420]            // skip if-block "jep106id != 0x20"
[03:48:17.420]          </control>
[03:48:17.420]        </sequence>
[03:48:17.420]    </block>
[03:48:17.420]  </sequence>
[03:48:17.420]  
[03:48:17.434]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:48:17.434]  
[03:48:17.435]  <debugvars>
[03:48:17.435]    // Pre-defined
[03:48:17.435]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:48:17.435]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:48:17.435]    __dp=0x00000000
[03:48:17.435]    __ap=0x00000000
[03:48:17.435]    __traceout=0x00000001      (SWO Trace)
[03:48:17.435]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:48:17.436]    __FlashAddr=0x00000000
[03:48:17.436]    __FlashLen=0x00000000
[03:48:17.436]    __FlashArg=0x00000000
[03:48:17.436]    __FlashOp=0x00000000
[03:48:17.436]    __Result=0x00000000
[03:48:17.436]    
[03:48:17.436]    // User-defined
[03:48:17.436]    DbgMCU_CR=0x00000007
[03:48:17.436]    DbgMCU_APB1_Fz=0x00000000
[03:48:17.437]    DbgMCU_APB2_Fz=0x00000000
[03:48:17.437]    TraceClk_Pin=0x00040002
[03:48:17.437]    TraceD0_Pin=0x00040003
[03:48:17.437]    TraceD1_Pin=0x00040004
[03:48:17.437]    TraceD2_Pin=0x00040005
[03:48:17.437]    TraceD3_Pin=0x00040006
[03:48:17.437]  </debugvars>
[03:48:17.438]  
[03:48:17.438]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:48:17.438]    <block atomic="false" info="">
[03:48:17.438]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:48:17.438]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.438]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:48:17.439]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.439]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:48:17.440]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.440]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:48:17.440]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.440]    </block>
[03:48:17.440]  </sequence>
[03:48:17.440]  
[03:48:17.456]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:48:17.456]  
[03:48:17.456]  <debugvars>
[03:48:17.457]    // Pre-defined
[03:48:17.457]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:48:17.457]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:48:17.457]    __dp=0x00000000
[03:48:17.457]    __ap=0x00000000
[03:48:17.457]    __traceout=0x00000001      (SWO Trace)
[03:48:17.457]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:48:17.457]    __FlashAddr=0x00000000
[03:48:17.458]    __FlashLen=0x00000000
[03:48:17.458]    __FlashArg=0x00000000
[03:48:17.458]    __FlashOp=0x00000000
[03:48:17.458]    __Result=0x00000000
[03:48:17.458]    
[03:48:17.458]    // User-defined
[03:48:17.458]    DbgMCU_CR=0x00000007
[03:48:17.458]    DbgMCU_APB1_Fz=0x00000000
[03:48:17.458]    DbgMCU_APB2_Fz=0x00000000
[03:48:17.458]    TraceClk_Pin=0x00040002
[03:48:17.459]    TraceD0_Pin=0x00040003
[03:48:17.459]    TraceD1_Pin=0x00040004
[03:48:17.459]    TraceD2_Pin=0x00040005
[03:48:17.459]    TraceD3_Pin=0x00040006
[03:48:17.459]  </debugvars>
[03:48:17.459]  
[03:48:17.459]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:48:17.459]    <block atomic="false" info="">
[03:48:17.460]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:48:17.460]        // -> [traceSWO <= 0x00000001]
[03:48:17.460]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:48:17.460]        // -> [traceTPIU <= 0x00000000]
[03:48:17.460]    </block>
[03:48:17.460]    <control if="traceSWO" while="" timeout="0" info="">
[03:48:17.460]      // if-block "traceSWO"
[03:48:17.461]        // =>  TRUE
[03:48:17.461]      <block atomic="false" info="">
[03:48:17.461]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:48:17.461]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:48:17.461]            <block atomic="false" info="">
[03:48:17.461]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:48:17.461]                // -> [dbgmcu_val <= 0x00000000]
[03:48:17.462]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:48:17.462]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:48:17.462]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:48:17.462]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.462]                // -> [dbgmcu_val <= 0x00000007]
[03:48:17.463]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:48:17.463]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:48:17.463]              Sequence("ConfigureTraceSWOPin");
[03:48:17.463]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:48:17.463]                  <block atomic="false" info="">
[03:48:17.463]                    __var pin     = 0;
[03:48:17.463]                      // -> [pin <= 0x00000000]
[03:48:17.463]                    __var port    = 0;
[03:48:17.464]                      // -> [port <= 0x00000000]
[03:48:17.464]                    __var portAdr = 0;
[03:48:17.464]                      // -> [portAdr <= 0x00000000]
[03:48:17.464]                    __var pos     = 0;
[03:48:17.464]                      // -> [pos <= 0x00000000]
[03:48:17.464]                    __var SWO_Pin = 0x00010003;          // PB3
[03:48:17.464]                      // -> [SWO_Pin <= 0x00010003]
[03:48:17.464]                  </block>
[03:48:17.464]                  <block atomic="false" info="configure SWO">
[03:48:17.465]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:48:17.465]                      // -> [pin <= 0x00000003]
[03:48:17.465]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:48:17.465]                      // -> [port <= 0x00000001]
[03:48:17.465]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:48:17.465]                      // -> [portAdr <= 0x40020400]
[03:48:17.465]                    pos = pin * 2;
[03:48:17.465]                      // -> [pos <= 0x00000006]
[03:48:17.466]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:48:17.466]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.467]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.467]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:48:17.467]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.468]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.468]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:48:17.468]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.469]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.469]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:48:17.469]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.470]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.470]                  </block>
[03:48:17.470]                  <control if="pin <  8" while="" timeout="0" info="">
[03:48:17.470]                    // if-block "pin <  8"
[03:48:17.470]                      // =>  TRUE
[03:48:17.470]                    <block atomic="false" info="">
[03:48:17.471]                      pos = ((pin    ) & 7) * 4;
[03:48:17.471]                        // -> [pos <= 0x0000000C]
[03:48:17.471]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:48:17.471]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.472]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.472]                    </block>
[03:48:17.472]                    // end if-block "pin <  8"
[03:48:17.472]                  </control>
[03:48:17.472]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:48:17.472]                    // if-block "pin >= 8"
[03:48:17.472]                      // =>  FALSE
[03:48:17.472]                    // skip if-block "pin >= 8"
[03:48:17.473]                  </control>
[03:48:17.473]                </sequence>
[03:48:17.473]            </block>
[03:48:17.473]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:48:17.473]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:48:17.473]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.473]            </block>
[03:48:17.474]          </sequence>
[03:48:17.474]      </block>
[03:48:17.474]      // end if-block "traceSWO"
[03:48:17.474]    </control>
[03:48:17.474]    <control if="traceTPIU" while="" timeout="0" info="">
[03:48:17.474]      // if-block "traceTPIU"
[03:48:17.474]        // =>  FALSE
[03:48:17.474]      // skip if-block "traceTPIU"
[03:48:17.475]    </control>
[03:48:17.475]  </sequence>
[03:48:17.475]  
[03:48:17.478]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:48:17.478]  
[03:48:17.479]  <debugvars>
[03:48:17.479]    // Pre-defined
[03:48:17.479]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:48:17.479]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:48:17.479]    __dp=0x00000000
[03:48:17.479]    __ap=0x00000000
[03:48:17.479]    __traceout=0x00000001      (SWO Trace)
[03:48:17.479]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:48:17.480]    __FlashAddr=0x00000000
[03:48:17.480]    __FlashLen=0x00000000
[03:48:17.480]    __FlashArg=0x00000000
[03:48:17.480]    __FlashOp=0x00000000
[03:48:17.480]    __Result=0x00000000
[03:48:17.480]    
[03:48:17.480]    // User-defined
[03:48:17.480]    DbgMCU_CR=0x00000007
[03:48:17.480]    DbgMCU_APB1_Fz=0x00000000
[03:48:17.480]    DbgMCU_APB2_Fz=0x00000000
[03:48:17.481]    TraceClk_Pin=0x00040002
[03:48:17.481]    TraceD0_Pin=0x00040003
[03:48:17.481]    TraceD1_Pin=0x00040004
[03:48:17.481]    TraceD2_Pin=0x00040005
[03:48:17.481]    TraceD3_Pin=0x00040006
[03:48:17.481]  </debugvars>
[03:48:17.481]  
[03:48:17.481]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:48:17.481]    <block atomic="false" info="">
[03:48:17.482]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:48:17.482]        // -> [traceSWO <= 0x00000001]
[03:48:17.482]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:48:17.482]        // -> [traceTPIU <= 0x00000000]
[03:48:17.482]    </block>
[03:48:17.482]    <control if="traceSWO" while="" timeout="0" info="">
[03:48:17.482]      // if-block "traceSWO"
[03:48:17.482]        // =>  TRUE
[03:48:17.483]      <block atomic="false" info="">
[03:48:17.483]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:48:17.483]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:48:17.483]            <block atomic="false" info="">
[03:48:17.483]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:48:17.483]                // -> [dbgmcu_val <= 0x00000000]
[03:48:17.483]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:48:17.483]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:48:17.483]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:48:17.484]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.484]                // -> [dbgmcu_val <= 0x00000007]
[03:48:17.484]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:48:17.484]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:48:17.484]              Sequence("ConfigureTraceSWOPin");
[03:48:17.484]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:48:17.485]                  <block atomic="false" info="">
[03:48:17.485]                    __var pin     = 0;
[03:48:17.485]                      // -> [pin <= 0x00000000]
[03:48:17.485]                    __var port    = 0;
[03:48:17.485]                      // -> [port <= 0x00000000]
[03:48:17.485]                    __var portAdr = 0;
[03:48:17.485]                      // -> [portAdr <= 0x00000000]
[03:48:17.485]                    __var pos     = 0;
[03:48:17.485]                      // -> [pos <= 0x00000000]
[03:48:17.486]                    __var SWO_Pin = 0x00010003;          // PB3
[03:48:17.486]                      // -> [SWO_Pin <= 0x00010003]
[03:48:17.486]                  </block>
[03:48:17.486]                  <block atomic="false" info="configure SWO">
[03:48:17.486]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:48:17.486]                      // -> [pin <= 0x00000003]
[03:48:17.486]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:48:17.487]                      // -> [port <= 0x00000001]
[03:48:17.487]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:48:17.487]                      // -> [portAdr <= 0x40020400]
[03:48:17.487]                    pos = pin * 2;
[03:48:17.487]                      // -> [pos <= 0x00000006]
[03:48:17.487]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:48:17.488]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.488]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.488]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:48:17.488]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.489]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.489]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:48:17.489]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.490]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.490]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:48:17.490]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.491]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.491]                  </block>
[03:48:17.491]                  <control if="pin <  8" while="" timeout="0" info="">
[03:48:17.491]                    // if-block "pin <  8"
[03:48:17.491]                      // =>  TRUE
[03:48:17.491]                    <block atomic="false" info="">
[03:48:17.491]                      pos = ((pin    ) & 7) * 4;
[03:48:17.492]                        // -> [pos <= 0x0000000C]
[03:48:17.492]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:48:17.492]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.492]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.493]                    </block>
[03:48:17.493]                    // end if-block "pin <  8"
[03:48:17.493]                  </control>
[03:48:17.493]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:48:17.493]                    // if-block "pin >= 8"
[03:48:17.493]                      // =>  FALSE
[03:48:17.493]                    // skip if-block "pin >= 8"
[03:48:17.494]                  </control>
[03:48:17.494]                </sequence>
[03:48:17.494]            </block>
[03:48:17.494]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:48:17.494]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:48:17.494]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.494]            </block>
[03:48:17.495]          </sequence>
[03:48:17.495]      </block>
[03:48:17.495]      // end if-block "traceSWO"
[03:48:17.495]    </control>
[03:48:17.495]    <control if="traceTPIU" while="" timeout="0" info="">
[03:48:17.495]      // if-block "traceTPIU"
[03:48:17.495]        // =>  FALSE
[03:48:17.495]      // skip if-block "traceTPIU"
[03:48:17.496]    </control>
[03:48:17.496]  </sequence>
[03:48:17.496]  
[03:48:17.705]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:48:17.705]  
[03:48:17.705]  <debugvars>
[03:48:17.705]    // Pre-defined
[03:48:17.705]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:48:17.706]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:48:17.706]    __dp=0x00000000
[03:48:17.706]    __ap=0x00000000
[03:48:17.706]    __traceout=0x00000001      (SWO Trace)
[03:48:17.706]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:48:17.707]    __FlashAddr=0x00000000
[03:48:17.707]    __FlashLen=0x00000000
[03:48:17.707]    __FlashArg=0x00000000
[03:48:17.707]    __FlashOp=0x00000000
[03:48:17.707]    __Result=0x00000000
[03:48:17.707]    
[03:48:17.707]    // User-defined
[03:48:17.707]    DbgMCU_CR=0x00000007
[03:48:17.708]    DbgMCU_APB1_Fz=0x00000000
[03:48:17.708]    DbgMCU_APB2_Fz=0x00000000
[03:48:17.708]    TraceClk_Pin=0x00040002
[03:48:17.708]    TraceD0_Pin=0x00040003
[03:48:17.708]    TraceD1_Pin=0x00040004
[03:48:17.708]    TraceD2_Pin=0x00040005
[03:48:17.708]    TraceD3_Pin=0x00040006
[03:48:17.708]  </debugvars>
[03:48:17.709]  
[03:48:17.709]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:48:17.709]    <block atomic="false" info="">
[03:48:17.709]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:48:17.709]        // -> [traceSWO <= 0x00000001]
[03:48:17.709]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:48:17.709]        // -> [traceTPIU <= 0x00000000]
[03:48:17.709]    </block>
[03:48:17.710]    <control if="traceSWO" while="" timeout="0" info="">
[03:48:17.710]      // if-block "traceSWO"
[03:48:17.710]        // =>  TRUE
[03:48:17.710]      <block atomic="false" info="">
[03:48:17.710]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:48:17.710]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:48:17.710]            <block atomic="false" info="">
[03:48:17.710]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:48:17.711]                // -> [dbgmcu_val <= 0x00000000]
[03:48:17.711]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:48:17.711]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:48:17.711]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:48:17.711]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.711]                // -> [dbgmcu_val <= 0x00000007]
[03:48:17.712]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:48:17.712]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:48:17.712]              Sequence("ConfigureTraceSWOPin");
[03:48:17.712]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:48:17.712]                  <block atomic="false" info="">
[03:48:17.712]                    __var pin     = 0;
[03:48:17.712]                      // -> [pin <= 0x00000000]
[03:48:17.712]                    __var port    = 0;
[03:48:17.712]                      // -> [port <= 0x00000000]
[03:48:17.713]                    __var portAdr = 0;
[03:48:17.713]                      // -> [portAdr <= 0x00000000]
[03:48:17.713]                    __var pos     = 0;
[03:48:17.713]                      // -> [pos <= 0x00000000]
[03:48:17.713]                    __var SWO_Pin = 0x00010003;          // PB3
[03:48:17.713]                      // -> [SWO_Pin <= 0x00010003]
[03:48:17.713]                  </block>
[03:48:17.713]                  <block atomic="false" info="configure SWO">
[03:48:17.713]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:48:17.714]                      // -> [pin <= 0x00000003]
[03:48:17.714]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:48:17.714]                      // -> [port <= 0x00000001]
[03:48:17.714]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:48:17.714]                      // -> [portAdr <= 0x40020400]
[03:48:17.714]                    pos = pin * 2;
[03:48:17.714]                      // -> [pos <= 0x00000006]
[03:48:17.714]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:48:17.715]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.715]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.715]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:48:17.716]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.716]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.716]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:48:17.717]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.717]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.717]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:48:17.718]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.718]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.718]                  </block>
[03:48:17.718]                  <control if="pin <  8" while="" timeout="0" info="">
[03:48:17.718]                    // if-block "pin <  8"
[03:48:17.718]                      // =>  TRUE
[03:48:17.719]                    <block atomic="false" info="">
[03:48:17.719]                      pos = ((pin    ) & 7) * 4;
[03:48:17.719]                        // -> [pos <= 0x0000000C]
[03:48:17.719]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:48:17.719]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.720]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.720]                    </block>
[03:48:17.720]                    // end if-block "pin <  8"
[03:48:17.720]                  </control>
[03:48:17.720]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:48:17.720]                    // if-block "pin >= 8"
[03:48:17.721]                      // =>  FALSE
[03:48:17.721]                    // skip if-block "pin >= 8"
[03:48:17.721]                  </control>
[03:48:17.721]                </sequence>
[03:48:17.721]            </block>
[03:48:17.721]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:48:17.721]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:48:17.722]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:17.722]            </block>
[03:48:17.722]          </sequence>
[03:48:17.722]      </block>
[03:48:17.722]      // end if-block "traceSWO"
[03:48:17.722]    </control>
[03:48:17.722]    <control if="traceTPIU" while="" timeout="0" info="">
[03:48:17.722]      // if-block "traceTPIU"
[03:48:17.722]        // =>  FALSE
[03:48:17.723]      // skip if-block "traceTPIU"
[03:48:17.723]    </control>
[03:48:17.723]  </sequence>
[03:48:17.723]  
[03:48:33.827]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:48:33.827]  
[03:48:33.827]  <debugvars>
[03:48:33.827]    // Pre-defined
[03:48:33.828]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:48:33.828]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:48:33.828]    __dp=0x00000000
[03:48:33.828]    __ap=0x00000000
[03:48:33.828]    __traceout=0x00000001      (SWO Trace)
[03:48:33.828]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:48:33.829]    __FlashAddr=0x00000000
[03:48:33.829]    __FlashLen=0x00000000
[03:48:33.829]    __FlashArg=0x00000000
[03:48:33.829]    __FlashOp=0x00000000
[03:48:33.829]    __Result=0x00000000
[03:48:33.829]    
[03:48:33.829]    // User-defined
[03:48:33.830]    DbgMCU_CR=0x00000007
[03:48:33.830]    DbgMCU_APB1_Fz=0x00000000
[03:48:33.830]    DbgMCU_APB2_Fz=0x00000000
[03:48:33.830]    TraceClk_Pin=0x00040002
[03:48:33.830]    TraceD0_Pin=0x00040003
[03:48:33.830]    TraceD1_Pin=0x00040004
[03:48:33.830]    TraceD2_Pin=0x00040005
[03:48:33.830]    TraceD3_Pin=0x00040006
[03:48:33.831]  </debugvars>
[03:48:33.831]  
[03:48:33.831]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:48:33.831]    <block atomic="false" info="">
[03:48:33.831]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:48:33.831]        // -> [traceSWO <= 0x00000001]
[03:48:33.832]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:48:33.832]        // -> [traceTPIU <= 0x00000000]
[03:48:33.832]    </block>
[03:48:33.832]    <control if="traceSWO" while="" timeout="0" info="">
[03:48:33.832]      // if-block "traceSWO"
[03:48:33.832]        // =>  TRUE
[03:48:33.832]      <block atomic="false" info="">
[03:48:33.832]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:48:33.833]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:48:33.833]            <block atomic="false" info="">
[03:48:33.833]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:48:33.833]                // -> [dbgmcu_val <= 0x00000000]
[03:48:33.833]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:48:33.833]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:48:33.833]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:48:33.834]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:48:33.834]                // -> [dbgmcu_val <= 0x00000007]
[03:48:33.834]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:48:33.834]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:48:33.834]              Sequence("ConfigureTraceSWOPin");
[03:48:33.834]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:48:33.834]                  <block atomic="false" info="">
[03:48:33.835]                    __var pin     = 0;
[03:48:33.835]                      // -> [pin <= 0x00000000]
[03:48:33.835]                    __var port    = 0;
[03:48:33.835]                      // -> [port <= 0x00000000]
[03:48:33.835]                    __var portAdr = 0;
[03:48:33.835]                      // -> [portAdr <= 0x00000000]
[03:48:33.835]                    __var pos     = 0;
[03:48:33.835]                      // -> [pos <= 0x00000000]
[03:48:33.835]                    __var SWO_Pin = 0x00010003;          // PB3
[03:48:33.835]                      // -> [SWO_Pin <= 0x00010003]
[03:48:33.836]                  </block>
[03:48:33.836]                  <block atomic="false" info="configure SWO">
[03:48:33.836]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:48:33.836]                      // -> [pin <= 0x00000003]
[03:48:33.836]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:48:33.836]                      // -> [port <= 0x00000001]
[03:48:33.836]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:48:33.836]                      // -> [portAdr <= 0x40020400]
[03:48:33.837]                    pos = pin * 2;
[03:48:33.837]                      // -> [pos <= 0x00000006]
[03:48:33.837]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:48:33.837]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:48:33.838]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:33.838]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:48:33.838]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:48:33.839]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:33.839]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:48:33.839]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:48:33.840]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:33.840]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:48:33.840]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:48:33.841]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:33.841]                  </block>
[03:48:33.841]                  <control if="pin <  8" while="" timeout="0" info="">
[03:48:33.841]                    // if-block "pin <  8"
[03:48:33.841]                      // =>  TRUE
[03:48:33.841]                    <block atomic="false" info="">
[03:48:33.841]                      pos = ((pin    ) & 7) * 4;
[03:48:33.841]                        // -> [pos <= 0x0000000C]
[03:48:33.842]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:48:33.842]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:48:33.842]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:33.842]                    </block>
[03:48:33.843]                    // end if-block "pin <  8"
[03:48:33.843]                  </control>
[03:48:33.843]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:48:33.843]                    // if-block "pin >= 8"
[03:48:33.843]                      // =>  FALSE
[03:48:33.843]                    // skip if-block "pin >= 8"
[03:48:33.843]                  </control>
[03:48:33.843]                </sequence>
[03:48:33.843]            </block>
[03:48:33.844]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:48:33.844]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:48:33.844]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:48:33.844]            </block>
[03:48:33.844]          </sequence>
[03:48:33.844]      </block>
[03:48:33.844]      // end if-block "traceSWO"
[03:48:33.845]    </control>
[03:48:33.845]    <control if="traceTPIU" while="" timeout="0" info="">
[03:48:33.845]      // if-block "traceTPIU"
[03:48:33.845]        // =>  FALSE
[03:48:33.845]      // skip if-block "traceTPIU"
[03:48:33.845]    </control>
[03:48:33.845]  </sequence>
[03:48:33.845]  
[03:49:11.480]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:49:11.480]  
[03:49:11.664]  <debugvars>
[03:49:11.665]    // Pre-defined
[03:49:11.665]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:49:11.665]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:49:11.665]    __dp=0x00000000
[03:49:11.666]    __ap=0x00000000
[03:49:11.666]    __traceout=0x00000001      (SWO Trace)
[03:49:11.666]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:49:11.666]    __FlashAddr=0x00000000
[03:49:11.666]    __FlashLen=0x00000000
[03:49:11.666]    __FlashArg=0x00000000
[03:49:11.666]    __FlashOp=0x00000000
[03:49:11.666]    __Result=0x00000000
[03:49:11.667]    
[03:49:11.667]    // User-defined
[03:49:11.667]    DbgMCU_CR=0x00000007
[03:49:11.667]    DbgMCU_APB1_Fz=0x00000000
[03:49:11.667]    DbgMCU_APB2_Fz=0x00000000
[03:49:11.667]    TraceClk_Pin=0x00040002
[03:49:11.667]    TraceD0_Pin=0x00040003
[03:49:11.667]    TraceD1_Pin=0x00040004
[03:49:11.668]    TraceD2_Pin=0x00040005
[03:49:11.668]    TraceD3_Pin=0x00040006
[03:49:11.668]  </debugvars>
[03:49:11.668]  
[03:49:11.668]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:49:11.668]    <block atomic="false" info="">
[03:49:11.668]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:49:11.668]        // -> [traceSWO <= 0x00000001]
[03:49:11.668]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:49:11.669]        // -> [traceTPIU <= 0x00000000]
[03:49:11.669]    </block>
[03:49:11.669]    <control if="traceSWO" while="" timeout="0" info="">
[03:49:11.669]      // if-block "traceSWO"
[03:49:11.669]        // =>  TRUE
[03:49:11.669]      <block atomic="false" info="">
[03:49:11.669]        Sequence("DisableTraceSWO");
[03:49:11.669]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:49:11.670]            <block atomic="false" info="">
[03:49:11.670]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:49:11.670]                // -> [dbgmcu_val <= 0x00000000]
[03:49:11.670]            </block>
[03:49:11.670]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:49:11.670]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:49:11.671]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:49:11.671]                // -> [dbgmcu_val <= 0x00000007]
[03:49:11.671]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:49:11.671]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:49:11.671]            </block>
[03:49:11.672]          </sequence>
[03:49:11.672]      </block>
[03:49:11.672]      // end if-block "traceSWO"
[03:49:11.672]    </control>
[03:49:11.672]    <control if="traceTPIU" while="" timeout="0" info="">
[03:49:11.672]      // if-block "traceTPIU"
[03:49:11.672]        // =>  FALSE
[03:49:11.672]      // skip if-block "traceTPIU"
[03:49:11.673]    </control>
[03:49:11.673]  </sequence>
[03:49:11.673]  
[03:55:54.146]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:55:54.146]  
[03:55:54.146]  <debugvars>
[03:55:54.147]    // Pre-defined
[03:55:54.147]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:55:54.147]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:55:54.147]    __dp=0x00000000
[03:55:54.147]    __ap=0x00000000
[03:55:54.148]    __traceout=0x00000001      (SWO Trace)
[03:55:54.148]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:55:54.148]    __FlashAddr=0x00000000
[03:55:54.148]    __FlashLen=0x00000000
[03:55:54.148]    __FlashArg=0x00000000
[03:55:54.148]    __FlashOp=0x00000000
[03:55:54.149]    __Result=0x00000000
[03:55:54.149]    
[03:55:54.149]    // User-defined
[03:55:54.149]    DbgMCU_CR=0x00000007
[03:55:54.149]    DbgMCU_APB1_Fz=0x00000000
[03:55:54.149]    DbgMCU_APB2_Fz=0x00000000
[03:55:54.149]    TraceClk_Pin=0x00040002
[03:55:54.150]    TraceD0_Pin=0x00040003
[03:55:54.150]    TraceD1_Pin=0x00040004
[03:55:54.150]    TraceD2_Pin=0x00040005
[03:55:54.150]    TraceD3_Pin=0x00040006
[03:55:54.150]  </debugvars>
[03:55:54.150]  
[03:55:54.151]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:55:54.151]    <block atomic="false" info="">
[03:55:54.151]      Sequence("CheckID");
[03:55:54.151]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:55:54.151]          <block atomic="false" info="">
[03:55:54.151]            __var pidr1 = 0;
[03:55:54.152]              // -> [pidr1 <= 0x00000000]
[03:55:54.152]            __var pidr2 = 0;
[03:55:54.152]              // -> [pidr2 <= 0x00000000]
[03:55:54.152]            __var jep106id = 0;
[03:55:54.152]              // -> [jep106id <= 0x00000000]
[03:55:54.152]            __var ROMTableBase = 0;
[03:55:54.152]              // -> [ROMTableBase <= 0x00000000]
[03:55:54.153]            __ap = 0;      // AHB-AP
[03:55:54.153]              // -> [__ap <= 0x00000000]
[03:55:54.153]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:55:54.153]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:55:54.153]              // -> [ROMTableBase <= 0xE00FD000]
[03:55:54.154]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:55:54.154]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:55:54.154]              // -> [pidr1 <= 0x00000004]
[03:55:54.154]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:55:54.155]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:55:54.155]              // -> [pidr2 <= 0x0000001A]
[03:55:54.155]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:55:54.155]              // -> [jep106id <= 0x00000020]
[03:55:54.155]          </block>
[03:55:54.156]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:55:54.156]            // if-block "jep106id != 0x20"
[03:55:54.156]              // =>  FALSE
[03:55:54.156]            // skip if-block "jep106id != 0x20"
[03:55:54.156]          </control>
[03:55:54.156]        </sequence>
[03:55:54.156]    </block>
[03:55:54.157]  </sequence>
[03:55:54.157]  
[03:55:54.171]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:55:54.171]  
[03:55:54.172]  <debugvars>
[03:55:54.172]    // Pre-defined
[03:55:54.172]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:55:54.172]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[03:55:54.172]    __dp=0x00000000
[03:55:54.173]    __ap=0x00000000
[03:55:54.173]    __traceout=0x00000001      (SWO Trace)
[03:55:54.173]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:55:54.173]    __FlashAddr=0x00000000
[03:55:54.173]    __FlashLen=0x00000000
[03:55:54.174]    __FlashArg=0x00000000
[03:55:54.174]    __FlashOp=0x00000000
[03:55:54.174]    __Result=0x00000000
[03:55:54.174]    
[03:55:54.174]    // User-defined
[03:55:54.174]    DbgMCU_CR=0x00000007
[03:55:54.174]    DbgMCU_APB1_Fz=0x00000000
[03:55:54.175]    DbgMCU_APB2_Fz=0x00000000
[03:55:54.175]    TraceClk_Pin=0x00040002
[03:55:54.175]    TraceD0_Pin=0x00040003
[03:55:54.175]    TraceD1_Pin=0x00040004
[03:55:54.175]    TraceD2_Pin=0x00040005
[03:55:54.176]    TraceD3_Pin=0x00040006
[03:55:54.176]  </debugvars>
[03:55:54.176]  
[03:55:54.176]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:55:54.176]    <block atomic="false" info="">
[03:55:54.177]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:55:54.177]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:55:54.177]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:55:54.178]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:55:54.178]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:55:54.179]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:55:54.179]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:55:54.180]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:55:54.180]    </block>
[03:55:54.180]  </sequence>
[03:55:54.180]  
[03:56:25.463]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:56:25.463]  
[03:56:25.463]  <debugvars>
[03:56:25.463]    // Pre-defined
[03:56:25.463]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:56:25.463]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:56:25.464]    __dp=0x00000000
[03:56:25.464]    __ap=0x00000000
[03:56:25.464]    __traceout=0x00000001      (SWO Trace)
[03:56:25.464]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:56:25.464]    __FlashAddr=0x00000000
[03:56:25.464]    __FlashLen=0x00000000
[03:56:25.465]    __FlashArg=0x00000000
[03:56:25.465]    __FlashOp=0x00000000
[03:56:25.465]    __Result=0x00000000
[03:56:25.465]    
[03:56:25.465]    // User-defined
[03:56:25.465]    DbgMCU_CR=0x00000007
[03:56:25.465]    DbgMCU_APB1_Fz=0x00000000
[03:56:25.466]    DbgMCU_APB2_Fz=0x00000000
[03:56:25.466]    TraceClk_Pin=0x00040002
[03:56:25.466]    TraceD0_Pin=0x00040003
[03:56:25.466]    TraceD1_Pin=0x00040004
[03:56:25.466]    TraceD2_Pin=0x00040005
[03:56:25.466]    TraceD3_Pin=0x00040006
[03:56:25.466]  </debugvars>
[03:56:25.467]  
[03:56:25.467]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:56:25.467]    <block atomic="false" info="">
[03:56:25.467]      Sequence("CheckID");
[03:56:25.467]        <sequence name="CheckID" Pname="" disable="false" info="">
[03:56:25.467]          <block atomic="false" info="">
[03:56:25.467]            __var pidr1 = 0;
[03:56:25.468]              // -> [pidr1 <= 0x00000000]
[03:56:25.468]            __var pidr2 = 0;
[03:56:25.468]              // -> [pidr2 <= 0x00000000]
[03:56:25.468]            __var jep106id = 0;
[03:56:25.468]              // -> [jep106id <= 0x00000000]
[03:56:25.468]            __var ROMTableBase = 0;
[03:56:25.468]              // -> [ROMTableBase <= 0x00000000]
[03:56:25.469]            __ap = 0;      // AHB-AP
[03:56:25.469]              // -> [__ap <= 0x00000000]
[03:56:25.469]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[03:56:25.469]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.469]              // -> [ROMTableBase <= 0xE00FD000]
[03:56:25.469]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[03:56:25.470]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.470]              // -> [pidr1 <= 0x00000004]
[03:56:25.470]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[03:56:25.471]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.471]              // -> [pidr2 <= 0x0000001A]
[03:56:25.471]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[03:56:25.471]              // -> [jep106id <= 0x00000020]
[03:56:25.471]          </block>
[03:56:25.471]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[03:56:25.472]            // if-block "jep106id != 0x20"
[03:56:25.472]              // =>  FALSE
[03:56:25.472]            // skip if-block "jep106id != 0x20"
[03:56:25.472]          </control>
[03:56:25.472]        </sequence>
[03:56:25.472]    </block>
[03:56:25.472]  </sequence>
[03:56:25.472]  
[03:56:25.487]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[03:56:25.487]  
[03:56:25.487]  <debugvars>
[03:56:25.487]    // Pre-defined
[03:56:25.488]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:56:25.488]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:56:25.488]    __dp=0x00000000
[03:56:25.488]    __ap=0x00000000
[03:56:25.488]    __traceout=0x00000001      (SWO Trace)
[03:56:25.488]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:56:25.489]    __FlashAddr=0x00000000
[03:56:25.489]    __FlashLen=0x00000000
[03:56:25.489]    __FlashArg=0x00000000
[03:56:25.489]    __FlashOp=0x00000000
[03:56:25.489]    __Result=0x00000000
[03:56:25.489]    
[03:56:25.489]    // User-defined
[03:56:25.490]    DbgMCU_CR=0x00000007
[03:56:25.490]    DbgMCU_APB1_Fz=0x00000000
[03:56:25.490]    DbgMCU_APB2_Fz=0x00000000
[03:56:25.490]    TraceClk_Pin=0x00040002
[03:56:25.490]    TraceD0_Pin=0x00040003
[03:56:25.490]    TraceD1_Pin=0x00040004
[03:56:25.491]    TraceD2_Pin=0x00040005
[03:56:25.491]    TraceD3_Pin=0x00040006
[03:56:25.491]  </debugvars>
[03:56:25.491]  
[03:56:25.491]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[03:56:25.491]    <block atomic="false" info="">
[03:56:25.492]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[03:56:25.492]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.492]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[03:56:25.493]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.493]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[03:56:25.494]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.494]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[03:56:25.494]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.495]    </block>
[03:56:25.495]  </sequence>
[03:56:25.495]  
[03:56:25.511]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[03:56:25.511]  
[03:56:25.511]  <debugvars>
[03:56:25.511]    // Pre-defined
[03:56:25.512]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:56:25.512]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:56:25.512]    __dp=0x00000000
[03:56:25.512]    __ap=0x00000000
[03:56:25.512]    __traceout=0x00000001      (SWO Trace)
[03:56:25.512]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:56:25.513]    __FlashAddr=0x00000000
[03:56:25.513]    __FlashLen=0x00000000
[03:56:25.513]    __FlashArg=0x00000000
[03:56:25.513]    __FlashOp=0x00000000
[03:56:25.513]    __Result=0x00000000
[03:56:25.513]    
[03:56:25.513]    // User-defined
[03:56:25.514]    DbgMCU_CR=0x00000007
[03:56:25.514]    DbgMCU_APB1_Fz=0x00000000
[03:56:25.514]    DbgMCU_APB2_Fz=0x00000000
[03:56:25.514]    TraceClk_Pin=0x00040002
[03:56:25.514]    TraceD0_Pin=0x00040003
[03:56:25.514]    TraceD1_Pin=0x00040004
[03:56:25.515]    TraceD2_Pin=0x00040005
[03:56:25.515]    TraceD3_Pin=0x00040006
[03:56:25.515]  </debugvars>
[03:56:25.515]  
[03:56:25.515]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:56:25.515]    <block atomic="false" info="">
[03:56:25.515]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:56:25.516]        // -> [traceSWO <= 0x00000001]
[03:56:25.516]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:56:25.516]        // -> [traceTPIU <= 0x00000000]
[03:56:25.516]    </block>
[03:56:25.516]    <control if="traceSWO" while="" timeout="0" info="">
[03:56:25.516]      // if-block "traceSWO"
[03:56:25.516]        // =>  TRUE
[03:56:25.516]      <block atomic="false" info="">
[03:56:25.517]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:56:25.517]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:56:25.517]            <block atomic="false" info="">
[03:56:25.517]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:56:25.517]                // -> [dbgmcu_val <= 0x00000000]
[03:56:25.517]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:56:25.517]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:56:25.517]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:56:25.518]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.518]                // -> [dbgmcu_val <= 0x00000007]
[03:56:25.518]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:56:25.518]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:56:25.518]              Sequence("ConfigureTraceSWOPin");
[03:56:25.519]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:56:25.519]                  <block atomic="false" info="">
[03:56:25.519]                    __var pin     = 0;
[03:56:25.519]                      // -> [pin <= 0x00000000]
[03:56:25.519]                    __var port    = 0;
[03:56:25.519]                      // -> [port <= 0x00000000]
[03:56:25.519]                    __var portAdr = 0;
[03:56:25.519]                      // -> [portAdr <= 0x00000000]
[03:56:25.519]                    __var pos     = 0;
[03:56:25.520]                      // -> [pos <= 0x00000000]
[03:56:25.520]                    __var SWO_Pin = 0x00010003;          // PB3
[03:56:25.520]                      // -> [SWO_Pin <= 0x00010003]
[03:56:25.520]                  </block>
[03:56:25.520]                  <block atomic="false" info="configure SWO">
[03:56:25.520]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:56:25.520]                      // -> [pin <= 0x00000003]
[03:56:25.521]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:56:25.521]                      // -> [port <= 0x00000001]
[03:56:25.521]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:56:25.521]                      // -> [portAdr <= 0x40020400]
[03:56:25.521]                    pos = pin * 2;
[03:56:25.521]                      // -> [pos <= 0x00000006]
[03:56:25.521]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:56:25.522]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.522]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.522]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:56:25.523]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.523]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.523]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:56:25.524]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.524]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.524]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:56:25.525]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.525]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.525]                  </block>
[03:56:25.525]                  <control if="pin <  8" while="" timeout="0" info="">
[03:56:25.525]                    // if-block "pin <  8"
[03:56:25.526]                      // =>  TRUE
[03:56:25.526]                    <block atomic="false" info="">
[03:56:25.526]                      pos = ((pin    ) & 7) * 4;
[03:56:25.526]                        // -> [pos <= 0x0000000C]
[03:56:25.526]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:56:25.526]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.527]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.527]                    </block>
[03:56:25.527]                    // end if-block "pin <  8"
[03:56:25.527]                  </control>
[03:56:25.527]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:56:25.527]                    // if-block "pin >= 8"
[03:56:25.528]                      // =>  FALSE
[03:56:25.528]                    // skip if-block "pin >= 8"
[03:56:25.528]                  </control>
[03:56:25.528]                </sequence>
[03:56:25.528]            </block>
[03:56:25.528]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:56:25.528]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:56:25.529]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.529]            </block>
[03:56:25.529]          </sequence>
[03:56:25.529]      </block>
[03:56:25.529]      // end if-block "traceSWO"
[03:56:25.529]    </control>
[03:56:25.529]    <control if="traceTPIU" while="" timeout="0" info="">
[03:56:25.530]      // if-block "traceTPIU"
[03:56:25.530]        // =>  FALSE
[03:56:25.530]      // skip if-block "traceTPIU"
[03:56:25.530]    </control>
[03:56:25.530]  </sequence>
[03:56:25.530]  
[03:56:25.534]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:56:25.534]  
[03:56:25.534]  <debugvars>
[03:56:25.534]    // Pre-defined
[03:56:25.534]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:56:25.534]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:56:25.534]    __dp=0x00000000
[03:56:25.535]    __ap=0x00000000
[03:56:25.535]    __traceout=0x00000001      (SWO Trace)
[03:56:25.535]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:56:25.535]    __FlashAddr=0x00000000
[03:56:25.535]    __FlashLen=0x00000000
[03:56:25.535]    __FlashArg=0x00000000
[03:56:25.535]    __FlashOp=0x00000000
[03:56:25.535]    __Result=0x00000000
[03:56:25.536]    
[03:56:25.536]    // User-defined
[03:56:25.536]    DbgMCU_CR=0x00000007
[03:56:25.536]    DbgMCU_APB1_Fz=0x00000000
[03:56:25.536]    DbgMCU_APB2_Fz=0x00000000
[03:56:25.536]    TraceClk_Pin=0x00040002
[03:56:25.536]    TraceD0_Pin=0x00040003
[03:56:25.536]    TraceD1_Pin=0x00040004
[03:56:25.536]    TraceD2_Pin=0x00040005
[03:56:25.537]    TraceD3_Pin=0x00040006
[03:56:25.537]  </debugvars>
[03:56:25.537]  
[03:56:25.537]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:56:25.537]    <block atomic="false" info="">
[03:56:25.537]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:56:25.537]        // -> [traceSWO <= 0x00000001]
[03:56:25.537]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:56:25.538]        // -> [traceTPIU <= 0x00000000]
[03:56:25.538]    </block>
[03:56:25.538]    <control if="traceSWO" while="" timeout="0" info="">
[03:56:25.538]      // if-block "traceSWO"
[03:56:25.538]        // =>  TRUE
[03:56:25.538]      <block atomic="false" info="">
[03:56:25.538]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:56:25.538]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:56:25.538]            <block atomic="false" info="">
[03:56:25.539]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:56:25.539]                // -> [dbgmcu_val <= 0x00000000]
[03:56:25.539]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:56:25.539]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:56:25.539]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:56:25.539]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.540]                // -> [dbgmcu_val <= 0x00000007]
[03:56:25.540]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:56:25.540]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:56:25.540]              Sequence("ConfigureTraceSWOPin");
[03:56:25.540]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:56:25.540]                  <block atomic="false" info="">
[03:56:25.540]                    __var pin     = 0;
[03:56:25.540]                      // -> [pin <= 0x00000000]
[03:56:25.540]                    __var port    = 0;
[03:56:25.541]                      // -> [port <= 0x00000000]
[03:56:25.541]                    __var portAdr = 0;
[03:56:25.541]                      // -> [portAdr <= 0x00000000]
[03:56:25.541]                    __var pos     = 0;
[03:56:25.541]                      // -> [pos <= 0x00000000]
[03:56:25.541]                    __var SWO_Pin = 0x00010003;          // PB3
[03:56:25.541]                      // -> [SWO_Pin <= 0x00010003]
[03:56:25.541]                  </block>
[03:56:25.541]                  <block atomic="false" info="configure SWO">
[03:56:25.542]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:56:25.542]                      // -> [pin <= 0x00000003]
[03:56:25.542]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:56:25.542]                      // -> [port <= 0x00000001]
[03:56:25.542]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:56:25.542]                      // -> [portAdr <= 0x40020400]
[03:56:25.542]                    pos = pin * 2;
[03:56:25.542]                      // -> [pos <= 0x00000006]
[03:56:25.543]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:56:25.543]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.543]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.543]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:56:25.544]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.544]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.544]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:56:25.545]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.545]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.545]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:56:25.546]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.546]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.546]                  </block>
[03:56:25.546]                  <control if="pin <  8" while="" timeout="0" info="">
[03:56:25.547]                    // if-block "pin <  8"
[03:56:25.547]                      // =>  TRUE
[03:56:25.547]                    <block atomic="false" info="">
[03:56:25.547]                      pos = ((pin    ) & 7) * 4;
[03:56:25.547]                        // -> [pos <= 0x0000000C]
[03:56:25.547]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:56:25.548]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.548]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.548]                    </block>
[03:56:25.548]                    // end if-block "pin <  8"
[03:56:25.548]                  </control>
[03:56:25.548]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:56:25.548]                    // if-block "pin >= 8"
[03:56:25.549]                      // =>  FALSE
[03:56:25.549]                    // skip if-block "pin >= 8"
[03:56:25.549]                  </control>
[03:56:25.549]                </sequence>
[03:56:25.549]            </block>
[03:56:25.549]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:56:25.549]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:56:25.550]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.550]            </block>
[03:56:25.550]          </sequence>
[03:56:25.550]      </block>
[03:56:25.550]      // end if-block "traceSWO"
[03:56:25.550]    </control>
[03:56:25.550]    <control if="traceTPIU" while="" timeout="0" info="">
[03:56:25.550]      // if-block "traceTPIU"
[03:56:25.551]        // =>  FALSE
[03:56:25.551]      // skip if-block "traceTPIU"
[03:56:25.551]    </control>
[03:56:25.551]  </sequence>
[03:56:25.551]  
[03:56:25.766]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[03:56:25.766]  
[03:56:25.766]  <debugvars>
[03:56:25.766]    // Pre-defined
[03:56:25.766]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:56:25.766]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:56:25.767]    __dp=0x00000000
[03:56:25.767]    __ap=0x00000000
[03:56:25.767]    __traceout=0x00000001      (SWO Trace)
[03:56:25.767]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:56:25.767]    __FlashAddr=0x00000000
[03:56:25.767]    __FlashLen=0x00000000
[03:56:25.768]    __FlashArg=0x00000000
[03:56:25.768]    __FlashOp=0x00000000
[03:56:25.768]    __Result=0x00000000
[03:56:25.768]    
[03:56:25.768]    // User-defined
[03:56:25.768]    DbgMCU_CR=0x00000007
[03:56:25.769]    DbgMCU_APB1_Fz=0x00000000
[03:56:25.769]    DbgMCU_APB2_Fz=0x00000000
[03:56:25.769]    TraceClk_Pin=0x00040002
[03:56:25.769]    TraceD0_Pin=0x00040003
[03:56:25.769]    TraceD1_Pin=0x00040004
[03:56:25.769]    TraceD2_Pin=0x00040005
[03:56:25.770]    TraceD3_Pin=0x00040006
[03:56:25.770]  </debugvars>
[03:56:25.770]  
[03:56:25.770]  <sequence name="TraceStart" Pname="" disable="false" info="">
[03:56:25.770]    <block atomic="false" info="">
[03:56:25.770]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[03:56:25.771]        // -> [traceSWO <= 0x00000001]
[03:56:25.771]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[03:56:25.771]        // -> [traceTPIU <= 0x00000000]
[03:56:25.771]    </block>
[03:56:25.771]    <control if="traceSWO" while="" timeout="0" info="">
[03:56:25.771]      // if-block "traceSWO"
[03:56:25.772]        // =>  TRUE
[03:56:25.772]      <block atomic="false" info="">
[03:56:25.772]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[03:56:25.772]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[03:56:25.772]            <block atomic="false" info="">
[03:56:25.772]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:56:25.773]                // -> [dbgmcu_val <= 0x00000000]
[03:56:25.773]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[03:56:25.773]                // -> [dbgmcu_trace_val <= 0x00000000]
[03:56:25.773]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[03:56:25.774]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.774]                // -> [dbgmcu_val <= 0x00000007]
[03:56:25.774]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[03:56:25.774]                // -> [dbgmcu_trace_val <= 0x00000020]
[03:56:25.774]              Sequence("ConfigureTraceSWOPin");
[03:56:25.774]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[03:56:25.774]                  <block atomic="false" info="">
[03:56:25.775]                    __var pin     = 0;
[03:56:25.775]                      // -> [pin <= 0x00000000]
[03:56:25.775]                    __var port    = 0;
[03:56:25.775]                      // -> [port <= 0x00000000]
[03:56:25.775]                    __var portAdr = 0;
[03:56:25.775]                      // -> [portAdr <= 0x00000000]
[03:56:25.775]                    __var pos     = 0;
[03:56:25.775]                      // -> [pos <= 0x00000000]
[03:56:25.776]                    __var SWO_Pin = 0x00010003;          // PB3
[03:56:25.776]                      // -> [SWO_Pin <= 0x00010003]
[03:56:25.776]                  </block>
[03:56:25.776]                  <block atomic="false" info="configure SWO">
[03:56:25.776]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[03:56:25.776]                      // -> [pin <= 0x00000003]
[03:56:25.776]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[03:56:25.776]                      // -> [port <= 0x00000001]
[03:56:25.776]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[03:56:25.777]                      // -> [portAdr <= 0x40020400]
[03:56:25.777]                    pos = pin * 2;
[03:56:25.777]                      // -> [pos <= 0x00000006]
[03:56:25.777]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[03:56:25.777]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.778]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.778]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[03:56:25.778]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.779]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.779]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[03:56:25.779]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.780]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.780]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[03:56:25.780]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.781]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.781]                  </block>
[03:56:25.781]                  <control if="pin <  8" while="" timeout="0" info="">
[03:56:25.781]                    // if-block "pin <  8"
[03:56:25.781]                      // =>  TRUE
[03:56:25.781]                    <block atomic="false" info="">
[03:56:25.782]                      pos = ((pin    ) & 7) * 4;
[03:56:25.782]                        // -> [pos <= 0x0000000C]
[03:56:25.782]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[03:56:25.782]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.783]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.783]                    </block>
[03:56:25.783]                    // end if-block "pin <  8"
[03:56:25.783]                  </control>
[03:56:25.783]                  <control if="pin >= 8" while="" timeout="0" info="">
[03:56:25.783]                    // if-block "pin >= 8"
[03:56:25.784]                      // =>  FALSE
[03:56:25.784]                    // skip if-block "pin >= 8"
[03:56:25.784]                  </control>
[03:56:25.784]                </sequence>
[03:56:25.784]            </block>
[03:56:25.784]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[03:56:25.784]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[03:56:25.785]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[03:56:25.785]            </block>
[03:56:25.785]          </sequence>
[03:56:25.785]      </block>
[03:56:25.785]      // end if-block "traceSWO"
[03:56:25.785]    </control>
[03:56:25.785]    <control if="traceTPIU" while="" timeout="0" info="">
[03:56:25.785]      // if-block "traceTPIU"
[03:56:25.786]        // =>  FALSE
[03:56:25.786]      // skip if-block "traceTPIU"
[03:56:25.786]    </control>
[03:56:25.786]  </sequence>
[03:56:25.786]  
[03:59:48.148]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[03:59:48.148]  
[03:59:48.148]  <debugvars>
[03:59:48.148]    // Pre-defined
[03:59:48.149]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:59:48.149]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[03:59:48.149]    __dp=0x00000000
[03:59:48.149]    __ap=0x00000000
[03:59:48.149]    __traceout=0x00000001      (SWO Trace)
[03:59:48.149]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:59:48.150]    __FlashAddr=0x00000000
[03:59:48.150]    __FlashLen=0x00000000
[03:59:48.150]    __FlashArg=0x00000000
[03:59:48.150]    __FlashOp=0x00000000
[03:59:48.150]    __Result=0x00000000
[03:59:48.151]    
[03:59:48.151]    // User-defined
[03:59:48.151]    DbgMCU_CR=0x00000007
[03:59:48.151]    DbgMCU_APB1_Fz=0x00000000
[03:59:48.151]    DbgMCU_APB2_Fz=0x00000000
[03:59:48.151]    TraceClk_Pin=0x00040002
[03:59:48.152]    TraceD0_Pin=0x00040003
[03:59:48.152]    TraceD1_Pin=0x00040004
[03:59:48.152]    TraceD2_Pin=0x00040005
[03:59:48.152]    TraceD3_Pin=0x00040006
[03:59:48.152]  </debugvars>
[03:59:48.152]  
[03:59:48.153]  <sequence name="TraceStop" Pname="" disable="false" info="">
[03:59:48.153]    <block atomic="false" info="">
[03:59:48.153]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[03:59:48.153]        // -> [traceSWO <= 0x00000001]
[03:59:48.153]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[03:59:48.153]        // -> [traceTPIU <= 0x00000000]
[03:59:48.154]    </block>
[03:59:48.154]    <control if="traceSWO" while="" timeout="0" info="">
[03:59:48.154]      // if-block "traceSWO"
[03:59:48.154]        // =>  TRUE
[03:59:48.154]      <block atomic="false" info="">
[03:59:48.154]        Sequence("DisableTraceSWO");
[03:59:48.154]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[03:59:48.155]            <block atomic="false" info="">
[03:59:48.155]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[03:59:48.155]                // -> [dbgmcu_val <= 0x00000000]
[03:59:48.155]            </block>
[03:59:48.155]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[03:59:48.155]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[03:59:48.156]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[03:59:48.156]                // -> [dbgmcu_val <= 0x00000007]
[03:59:48.156]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[03:59:48.157]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[03:59:48.157]            </block>
[03:59:48.157]          </sequence>
[03:59:48.157]      </block>
[03:59:48.157]      // end if-block "traceSWO"
[03:59:48.157]    </control>
[03:59:48.157]    <control if="traceTPIU" while="" timeout="0" info="">
[03:59:48.157]      // if-block "traceTPIU"
[03:59:48.157]        // =>  FALSE
[03:59:48.158]      // skip if-block "traceTPIU"
[03:59:48.158]    </control>
[03:59:48.158]  </sequence>
[03:59:48.158]  
[04:05:51.026]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:05:51.026]  
[04:05:51.026]  <debugvars>
[04:05:51.026]    // Pre-defined
[04:05:51.026]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:05:51.026]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[04:05:51.027]    __dp=0x00000000
[04:05:51.027]    __ap=0x00000000
[04:05:51.027]    __traceout=0x00000001      (SWO Trace)
[04:05:51.027]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:05:51.027]    __FlashAddr=0x00000000
[04:05:51.027]    __FlashLen=0x00000000
[04:05:51.028]    __FlashArg=0x00000000
[04:05:51.028]    __FlashOp=0x00000000
[04:05:51.028]    __Result=0x00000000
[04:05:51.028]    
[04:05:51.028]    // User-defined
[04:05:51.028]    DbgMCU_CR=0x00000007
[04:05:51.028]    DbgMCU_APB1_Fz=0x00000000
[04:05:51.029]    DbgMCU_APB2_Fz=0x00000000
[04:05:51.029]    TraceClk_Pin=0x00040002
[04:05:51.029]    TraceD0_Pin=0x00040003
[04:05:51.029]    TraceD1_Pin=0x00040004
[04:05:51.029]    TraceD2_Pin=0x00040005
[04:05:51.030]    TraceD3_Pin=0x00040006
[04:05:51.030]  </debugvars>
[04:05:51.030]  
[04:05:51.030]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:05:51.030]    <block atomic="false" info="">
[04:05:51.030]      Sequence("CheckID");
[04:05:51.030]        <sequence name="CheckID" Pname="" disable="false" info="">
[04:05:51.031]          <block atomic="false" info="">
[04:05:51.031]            __var pidr1 = 0;
[04:05:51.031]              // -> [pidr1 <= 0x00000000]
[04:05:51.031]            __var pidr2 = 0;
[04:05:51.031]              // -> [pidr2 <= 0x00000000]
[04:05:51.031]            __var jep106id = 0;
[04:05:51.032]              // -> [jep106id <= 0x00000000]
[04:05:51.032]            __var ROMTableBase = 0;
[04:05:51.032]              // -> [ROMTableBase <= 0x00000000]
[04:05:51.032]            __ap = 0;      // AHB-AP
[04:05:51.032]              // -> [__ap <= 0x00000000]
[04:05:51.032]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[04:05:51.033]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[04:05:51.033]              // -> [ROMTableBase <= 0xE00FD000]
[04:05:51.033]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[04:05:51.033]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[04:05:51.033]              // -> [pidr1 <= 0x00000004]
[04:05:51.034]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[04:05:51.034]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[04:05:51.034]              // -> [pidr2 <= 0x0000001A]
[04:05:51.034]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[04:05:51.034]              // -> [jep106id <= 0x00000020]
[04:05:51.034]          </block>
[04:05:51.035]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[04:05:51.035]            // if-block "jep106id != 0x20"
[04:05:51.035]              // =>  FALSE
[04:05:51.035]            // skip if-block "jep106id != 0x20"
[04:05:51.035]          </control>
[04:05:51.035]        </sequence>
[04:05:51.035]    </block>
[04:05:51.035]  </sequence>
[04:05:51.035]  
[04:05:51.050]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[04:05:51.050]  
[04:05:51.050]  <debugvars>
[04:05:51.050]    // Pre-defined
[04:05:51.050]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:05:51.050]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[04:05:51.050]    __dp=0x00000000
[04:05:51.051]    __ap=0x00000000
[04:05:51.051]    __traceout=0x00000001      (SWO Trace)
[04:05:51.051]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:05:51.051]    __FlashAddr=0x00000000
[04:05:51.051]    __FlashLen=0x00000000
[04:05:51.052]    __FlashArg=0x00000000
[04:05:51.052]    __FlashOp=0x00000000
[04:05:51.052]    __Result=0x00000000
[04:05:51.052]    
[04:05:51.052]    // User-defined
[04:05:51.052]    DbgMCU_CR=0x00000007
[04:05:51.052]    DbgMCU_APB1_Fz=0x00000000
[04:05:51.053]    DbgMCU_APB2_Fz=0x00000000
[04:05:51.053]    TraceClk_Pin=0x00040002
[04:05:51.053]    TraceD0_Pin=0x00040003
[04:05:51.053]    TraceD1_Pin=0x00040004
[04:05:51.053]    TraceD2_Pin=0x00040005
[04:05:51.053]    TraceD3_Pin=0x00040006
[04:05:51.054]  </debugvars>
[04:05:51.054]  
[04:05:51.054]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[04:05:51.054]    <block atomic="false" info="">
[04:05:51.054]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[04:05:51.055]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[04:05:51.055]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[04:05:51.056]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[04:05:51.056]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[04:05:51.056]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[04:05:51.056]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[04:05:51.057]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[04:05:51.057]    </block>
[04:05:51.057]  </sequence>
[04:05:51.057]  
[04:06:22.288]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:06:22.288]  
[04:06:22.288]  <debugvars>
[04:06:22.288]    // Pre-defined
[04:06:22.289]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:06:22.289]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[04:06:22.289]    __dp=0x00000000
[04:06:22.289]    __ap=0x00000000
[04:06:22.289]    __traceout=0x00000001      (SWO Trace)
[04:06:22.289]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:06:22.289]    __FlashAddr=0x00000000
[04:06:22.289]    __FlashLen=0x00000000
[04:06:22.290]    __FlashArg=0x00000000
[04:06:22.290]    __FlashOp=0x00000000
[04:06:22.290]    __Result=0x00000000
[04:06:22.290]    
[04:06:22.290]    // User-defined
[04:06:22.290]    DbgMCU_CR=0x00000007
[04:06:22.290]    DbgMCU_APB1_Fz=0x00000000
[04:06:22.290]    DbgMCU_APB2_Fz=0x00000000
[04:06:22.290]    TraceClk_Pin=0x00040002
[04:06:22.290]    TraceD0_Pin=0x00040003
[04:06:22.291]    TraceD1_Pin=0x00040004
[04:06:22.291]    TraceD2_Pin=0x00040005
[04:06:22.291]    TraceD3_Pin=0x00040006
[04:06:22.291]  </debugvars>
[04:06:22.291]  
[04:06:22.291]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:06:22.291]    <block atomic="false" info="">
[04:06:22.291]      Sequence("CheckID");
[04:06:22.291]        <sequence name="CheckID" Pname="" disable="false" info="">
[04:06:22.292]          <block atomic="false" info="">
[04:06:22.292]            __var pidr1 = 0;
[04:06:22.292]              // -> [pidr1 <= 0x00000000]
[04:06:22.292]            __var pidr2 = 0;
[04:06:22.292]              // -> [pidr2 <= 0x00000000]
[04:06:22.292]            __var jep106id = 0;
[04:06:22.292]              // -> [jep106id <= 0x00000000]
[04:06:22.292]            __var ROMTableBase = 0;
[04:06:22.293]              // -> [ROMTableBase <= 0x00000000]
[04:06:22.293]            __ap = 0;      // AHB-AP
[04:06:22.293]              // -> [__ap <= 0x00000000]
[04:06:22.293]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[04:06:22.293]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.293]              // -> [ROMTableBase <= 0xE00FD000]
[04:06:22.293]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[04:06:22.294]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.294]              // -> [pidr1 <= 0x00000004]
[04:06:22.294]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[04:06:22.295]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.295]              // -> [pidr2 <= 0x0000001A]
[04:06:22.295]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[04:06:22.295]              // -> [jep106id <= 0x00000020]
[04:06:22.295]          </block>
[04:06:22.295]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[04:06:22.295]            // if-block "jep106id != 0x20"
[04:06:22.295]              // =>  FALSE
[04:06:22.296]            // skip if-block "jep106id != 0x20"
[04:06:22.296]          </control>
[04:06:22.296]        </sequence>
[04:06:22.296]    </block>
[04:06:22.296]  </sequence>
[04:06:22.296]  
[04:06:22.309]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[04:06:22.309]  
[04:06:22.309]  <debugvars>
[04:06:22.309]    // Pre-defined
[04:06:22.309]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:06:22.310]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[04:06:22.310]    __dp=0x00000000
[04:06:22.310]    __ap=0x00000000
[04:06:22.310]    __traceout=0x00000001      (SWO Trace)
[04:06:22.310]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:06:22.310]    __FlashAddr=0x00000000
[04:06:22.310]    __FlashLen=0x00000000
[04:06:22.310]    __FlashArg=0x00000000
[04:06:22.311]    __FlashOp=0x00000000
[04:06:22.311]    __Result=0x00000000
[04:06:22.311]    
[04:06:22.311]    // User-defined
[04:06:22.311]    DbgMCU_CR=0x00000007
[04:06:22.311]    DbgMCU_APB1_Fz=0x00000000
[04:06:22.311]    DbgMCU_APB2_Fz=0x00000000
[04:06:22.311]    TraceClk_Pin=0x00040002
[04:06:22.312]    TraceD0_Pin=0x00040003
[04:06:22.312]    TraceD1_Pin=0x00040004
[04:06:22.312]    TraceD2_Pin=0x00040005
[04:06:22.312]    TraceD3_Pin=0x00040006
[04:06:22.312]  </debugvars>
[04:06:22.312]  
[04:06:22.312]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[04:06:22.312]    <block atomic="false" info="">
[04:06:22.313]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[04:06:22.313]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.313]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[04:06:22.314]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.314]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[04:06:22.314]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.314]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[04:06:22.315]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.315]    </block>
[04:06:22.315]  </sequence>
[04:06:22.315]  
[04:06:22.330]  **********  Sequence "TraceStart"  (Context="Connect", Pname="", info="")
[04:06:22.330]  
[04:06:22.331]  <debugvars>
[04:06:22.331]    // Pre-defined
[04:06:22.331]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:06:22.331]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[04:06:22.331]    __dp=0x00000000
[04:06:22.331]    __ap=0x00000000
[04:06:22.331]    __traceout=0x00000001      (SWO Trace)
[04:06:22.332]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:06:22.332]    __FlashAddr=0x00000000
[04:06:22.332]    __FlashLen=0x00000000
[04:06:22.332]    __FlashArg=0x00000000
[04:06:22.332]    __FlashOp=0x00000000
[04:06:22.332]    __Result=0x00000000
[04:06:22.332]    
[04:06:22.332]    // User-defined
[04:06:22.332]    DbgMCU_CR=0x00000007
[04:06:22.333]    DbgMCU_APB1_Fz=0x00000000
[04:06:22.333]    DbgMCU_APB2_Fz=0x00000000
[04:06:22.333]    TraceClk_Pin=0x00040002
[04:06:22.333]    TraceD0_Pin=0x00040003
[04:06:22.333]    TraceD1_Pin=0x00040004
[04:06:22.333]    TraceD2_Pin=0x00040005
[04:06:22.333]    TraceD3_Pin=0x00040006
[04:06:22.333]  </debugvars>
[04:06:22.334]  
[04:06:22.334]  <sequence name="TraceStart" Pname="" disable="false" info="">
[04:06:22.334]    <block atomic="false" info="">
[04:06:22.334]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[04:06:22.334]        // -> [traceSWO <= 0x00000001]
[04:06:22.334]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[04:06:22.334]        // -> [traceTPIU <= 0x00000000]
[04:06:22.334]    </block>
[04:06:22.335]    <control if="traceSWO" while="" timeout="0" info="">
[04:06:22.335]      // if-block "traceSWO"
[04:06:22.335]        // =>  TRUE
[04:06:22.335]      <block atomic="false" info="">
[04:06:22.335]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[04:06:22.335]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[04:06:22.335]            <block atomic="false" info="">
[04:06:22.336]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[04:06:22.336]                // -> [dbgmcu_val <= 0x00000000]
[04:06:22.336]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[04:06:22.336]                // -> [dbgmcu_trace_val <= 0x00000000]
[04:06:22.336]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[04:06:22.337]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.337]                // -> [dbgmcu_val <= 0x00000007]
[04:06:22.337]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[04:06:22.337]                // -> [dbgmcu_trace_val <= 0x00000020]
[04:06:22.337]              Sequence("ConfigureTraceSWOPin");
[04:06:22.337]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[04:06:22.337]                  <block atomic="false" info="">
[04:06:22.337]                    __var pin     = 0;
[04:06:22.338]                      // -> [pin <= 0x00000000]
[04:06:22.338]                    __var port    = 0;
[04:06:22.338]                      // -> [port <= 0x00000000]
[04:06:22.338]                    __var portAdr = 0;
[04:06:22.338]                      // -> [portAdr <= 0x00000000]
[04:06:22.338]                    __var pos     = 0;
[04:06:22.338]                      // -> [pos <= 0x00000000]
[04:06:22.338]                    __var SWO_Pin = 0x00010003;          // PB3
[04:06:22.339]                      // -> [SWO_Pin <= 0x00010003]
[04:06:22.339]                  </block>
[04:06:22.339]                  <block atomic="false" info="configure SWO">
[04:06:22.339]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[04:06:22.339]                      // -> [pin <= 0x00000003]
[04:06:22.339]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[04:06:22.339]                      // -> [port <= 0x00000001]
[04:06:22.339]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[04:06:22.339]                      // -> [portAdr <= 0x40020400]
[04:06:22.340]                    pos = pin * 2;
[04:06:22.340]                      // -> [pos <= 0x00000006]
[04:06:22.340]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[04:06:22.340]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.341]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.341]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[04:06:22.341]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.342]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.342]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[04:06:22.342]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.343]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.343]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[04:06:22.343]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.343]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.344]                  </block>
[04:06:22.344]                  <control if="pin <  8" while="" timeout="0" info="">
[04:06:22.344]                    // if-block "pin <  8"
[04:06:22.344]                      // =>  TRUE
[04:06:22.344]                    <block atomic="false" info="">
[04:06:22.344]                      pos = ((pin    ) & 7) * 4;
[04:06:22.344]                        // -> [pos <= 0x0000000C]
[04:06:22.344]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[04:06:22.345]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.345]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.345]                    </block>
[04:06:22.345]                    // end if-block "pin <  8"
[04:06:22.345]                  </control>
[04:06:22.346]                  <control if="pin >= 8" while="" timeout="0" info="">
[04:06:22.346]                    // if-block "pin >= 8"
[04:06:22.346]                      // =>  FALSE
[04:06:22.346]                    // skip if-block "pin >= 8"
[04:06:22.346]                  </control>
[04:06:22.346]                </sequence>
[04:06:22.346]            </block>
[04:06:22.346]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[04:06:22.346]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[04:06:22.347]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.347]            </block>
[04:06:22.347]          </sequence>
[04:06:22.347]      </block>
[04:06:22.347]      // end if-block "traceSWO"
[04:06:22.347]    </control>
[04:06:22.348]    <control if="traceTPIU" while="" timeout="0" info="">
[04:06:22.348]      // if-block "traceTPIU"
[04:06:22.348]        // =>  FALSE
[04:06:22.348]      // skip if-block "traceTPIU"
[04:06:22.348]    </control>
[04:06:22.348]  </sequence>
[04:06:22.348]  
[04:06:22.352]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[04:06:22.352]  
[04:06:22.352]  <debugvars>
[04:06:22.352]    // Pre-defined
[04:06:22.352]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:06:22.353]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[04:06:22.353]    __dp=0x00000000
[04:06:22.353]    __ap=0x00000000
[04:06:22.353]    __traceout=0x00000001      (SWO Trace)
[04:06:22.353]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:06:22.353]    __FlashAddr=0x00000000
[04:06:22.353]    __FlashLen=0x00000000
[04:06:22.353]    __FlashArg=0x00000000
[04:06:22.353]    __FlashOp=0x00000000
[04:06:22.354]    __Result=0x00000000
[04:06:22.354]    
[04:06:22.354]    // User-defined
[04:06:22.354]    DbgMCU_CR=0x00000007
[04:06:22.354]    DbgMCU_APB1_Fz=0x00000000
[04:06:22.354]    DbgMCU_APB2_Fz=0x00000000
[04:06:22.354]    TraceClk_Pin=0x00040002
[04:06:22.354]    TraceD0_Pin=0x00040003
[04:06:22.354]    TraceD1_Pin=0x00040004
[04:06:22.354]    TraceD2_Pin=0x00040005
[04:06:22.355]    TraceD3_Pin=0x00040006
[04:06:22.355]  </debugvars>
[04:06:22.355]  
[04:06:22.355]  <sequence name="TraceStart" Pname="" disable="false" info="">
[04:06:22.355]    <block atomic="false" info="">
[04:06:22.355]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[04:06:22.355]        // -> [traceSWO <= 0x00000001]
[04:06:22.356]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[04:06:22.356]        // -> [traceTPIU <= 0x00000000]
[04:06:22.356]    </block>
[04:06:22.356]    <control if="traceSWO" while="" timeout="0" info="">
[04:06:22.356]      // if-block "traceSWO"
[04:06:22.356]        // =>  TRUE
[04:06:22.356]      <block atomic="false" info="">
[04:06:22.356]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[04:06:22.356]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[04:06:22.357]            <block atomic="false" info="">
[04:06:22.357]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[04:06:22.357]                // -> [dbgmcu_val <= 0x00000000]
[04:06:22.357]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[04:06:22.357]                // -> [dbgmcu_trace_val <= 0x00000000]
[04:06:22.357]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[04:06:22.358]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.358]                // -> [dbgmcu_val <= 0x00000007]
[04:06:22.358]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[04:06:22.358]                // -> [dbgmcu_trace_val <= 0x00000020]
[04:06:22.358]              Sequence("ConfigureTraceSWOPin");
[04:06:22.358]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[04:06:22.358]                  <block atomic="false" info="">
[04:06:22.359]                    __var pin     = 0;
[04:06:22.359]                      // -> [pin <= 0x00000000]
[04:06:22.359]                    __var port    = 0;
[04:06:22.359]                      // -> [port <= 0x00000000]
[04:06:22.359]                    __var portAdr = 0;
[04:06:22.359]                      // -> [portAdr <= 0x00000000]
[04:06:22.359]                    __var pos     = 0;
[04:06:22.359]                      // -> [pos <= 0x00000000]
[04:06:22.360]                    __var SWO_Pin = 0x00010003;          // PB3
[04:06:22.360]                      // -> [SWO_Pin <= 0x00010003]
[04:06:22.360]                  </block>
[04:06:22.360]                  <block atomic="false" info="configure SWO">
[04:06:22.360]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[04:06:22.360]                      // -> [pin <= 0x00000003]
[04:06:22.360]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[04:06:22.360]                      // -> [port <= 0x00000001]
[04:06:22.361]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[04:06:22.361]                      // -> [portAdr <= 0x40020400]
[04:06:22.361]                    pos = pin * 2;
[04:06:22.361]                      // -> [pos <= 0x00000006]
[04:06:22.361]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[04:06:22.361]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.362]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.362]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[04:06:22.362]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.363]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.363]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[04:06:22.363]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.364]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.364]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[04:06:22.364]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.365]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.365]                  </block>
[04:06:22.365]                  <control if="pin <  8" while="" timeout="0" info="">
[04:06:22.365]                    // if-block "pin <  8"
[04:06:22.365]                      // =>  TRUE
[04:06:22.365]                    <block atomic="false" info="">
[04:06:22.365]                      pos = ((pin    ) & 7) * 4;
[04:06:22.365]                        // -> [pos <= 0x0000000C]
[04:06:22.366]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[04:06:22.366]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.366]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.367]                    </block>
[04:06:22.367]                    // end if-block "pin <  8"
[04:06:22.367]                  </control>
[04:06:22.367]                  <control if="pin >= 8" while="" timeout="0" info="">
[04:06:22.367]                    // if-block "pin >= 8"
[04:06:22.367]                      // =>  FALSE
[04:06:22.367]                    // skip if-block "pin >= 8"
[04:06:22.367]                  </control>
[04:06:22.368]                </sequence>
[04:06:22.368]            </block>
[04:06:22.368]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[04:06:22.368]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[04:06:22.368]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.368]            </block>
[04:06:22.369]          </sequence>
[04:06:22.369]      </block>
[04:06:22.369]      // end if-block "traceSWO"
[04:06:22.369]    </control>
[04:06:22.369]    <control if="traceTPIU" while="" timeout="0" info="">
[04:06:22.369]      // if-block "traceTPIU"
[04:06:22.369]        // =>  FALSE
[04:06:22.370]      // skip if-block "traceTPIU"
[04:06:22.370]    </control>
[04:06:22.370]  </sequence>
[04:06:22.370]  
[04:06:22.583]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[04:06:22.583]  
[04:06:22.583]  <debugvars>
[04:06:22.583]    // Pre-defined
[04:06:22.584]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:06:22.584]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[04:06:22.584]    __dp=0x00000000
[04:06:22.584]    __ap=0x00000000
[04:06:22.584]    __traceout=0x00000001      (SWO Trace)
[04:06:22.584]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:06:22.584]    __FlashAddr=0x00000000
[04:06:22.584]    __FlashLen=0x00000000
[04:06:22.585]    __FlashArg=0x00000000
[04:06:22.585]    __FlashOp=0x00000000
[04:06:22.585]    __Result=0x00000000
[04:06:22.585]    
[04:06:22.585]    // User-defined
[04:06:22.585]    DbgMCU_CR=0x00000007
[04:06:22.585]    DbgMCU_APB1_Fz=0x00000000
[04:06:22.585]    DbgMCU_APB2_Fz=0x00000000
[04:06:22.585]    TraceClk_Pin=0x00040002
[04:06:22.585]    TraceD0_Pin=0x00040003
[04:06:22.586]    TraceD1_Pin=0x00040004
[04:06:22.586]    TraceD2_Pin=0x00040005
[04:06:22.586]    TraceD3_Pin=0x00040006
[04:06:22.586]  </debugvars>
[04:06:22.586]  
[04:06:22.586]  <sequence name="TraceStart" Pname="" disable="false" info="">
[04:06:22.586]    <block atomic="false" info="">
[04:06:22.586]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[04:06:22.586]        // -> [traceSWO <= 0x00000001]
[04:06:22.587]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[04:06:22.587]        // -> [traceTPIU <= 0x00000000]
[04:06:22.587]    </block>
[04:06:22.587]    <control if="traceSWO" while="" timeout="0" info="">
[04:06:22.587]      // if-block "traceSWO"
[04:06:22.587]        // =>  TRUE
[04:06:22.587]      <block atomic="false" info="">
[04:06:22.587]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[04:06:22.588]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[04:06:22.588]            <block atomic="false" info="">
[04:06:22.588]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[04:06:22.588]                // -> [dbgmcu_val <= 0x00000000]
[04:06:22.588]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[04:06:22.588]                // -> [dbgmcu_trace_val <= 0x00000000]
[04:06:22.588]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[04:06:22.589]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.589]                // -> [dbgmcu_val <= 0x00000007]
[04:06:22.589]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[04:06:22.589]                // -> [dbgmcu_trace_val <= 0x00000020]
[04:06:22.589]              Sequence("ConfigureTraceSWOPin");
[04:06:22.589]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[04:06:22.589]                  <block atomic="false" info="">
[04:06:22.589]                    __var pin     = 0;
[04:06:22.590]                      // -> [pin <= 0x00000000]
[04:06:22.590]                    __var port    = 0;
[04:06:22.590]                      // -> [port <= 0x00000000]
[04:06:22.590]                    __var portAdr = 0;
[04:06:22.590]                      // -> [portAdr <= 0x00000000]
[04:06:22.590]                    __var pos     = 0;
[04:06:22.590]                      // -> [pos <= 0x00000000]
[04:06:22.590]                    __var SWO_Pin = 0x00010003;          // PB3
[04:06:22.591]                      // -> [SWO_Pin <= 0x00010003]
[04:06:22.591]                  </block>
[04:06:22.591]                  <block atomic="false" info="configure SWO">
[04:06:22.591]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[04:06:22.591]                      // -> [pin <= 0x00000003]
[04:06:22.591]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[04:06:22.591]                      // -> [port <= 0x00000001]
[04:06:22.592]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[04:06:22.592]                      // -> [portAdr <= 0x40020400]
[04:06:22.592]                    pos = pin * 2;
[04:06:22.592]                      // -> [pos <= 0x00000006]
[04:06:22.592]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[04:06:22.593]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.593]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.593]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[04:06:22.594]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.594]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.594]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[04:06:22.595]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.595]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.595]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[04:06:22.596]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.596]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.596]                  </block>
[04:06:22.597]                  <control if="pin <  8" while="" timeout="0" info="">
[04:06:22.597]                    // if-block "pin <  8"
[04:06:22.597]                      // =>  TRUE
[04:06:22.597]                    <block atomic="false" info="">
[04:06:22.597]                      pos = ((pin    ) & 7) * 4;
[04:06:22.598]                        // -> [pos <= 0x0000000C]
[04:06:22.598]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[04:06:22.598]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.599]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.599]                    </block>
[04:06:22.599]                    // end if-block "pin <  8"
[04:06:22.599]                  </control>
[04:06:22.599]                  <control if="pin >= 8" while="" timeout="0" info="">
[04:06:22.600]                    // if-block "pin >= 8"
[04:06:22.600]                      // =>  FALSE
[04:06:22.600]                    // skip if-block "pin >= 8"
[04:06:22.600]                  </control>
[04:06:22.600]                </sequence>
[04:06:22.601]            </block>
[04:06:22.601]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[04:06:22.601]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[04:06:22.601]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:22.601]            </block>
[04:06:22.602]          </sequence>
[04:06:22.602]      </block>
[04:06:22.602]      // end if-block "traceSWO"
[04:06:22.602]    </control>
[04:06:22.602]    <control if="traceTPIU" while="" timeout="0" info="">
[04:06:22.602]      // if-block "traceTPIU"
[04:06:22.603]        // =>  FALSE
[04:06:22.603]      // skip if-block "traceTPIU"
[04:06:22.603]    </control>
[04:06:22.603]  </sequence>
[04:06:22.603]  
[04:06:33.329]  **********  Sequence "TraceStart"  (Context="Reset", Pname="", info="")
[04:06:33.329]  
[04:06:33.330]  <debugvars>
[04:06:33.330]    // Pre-defined
[04:06:33.330]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:06:33.330]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[04:06:33.330]    __dp=0x00000000
[04:06:33.331]    __ap=0x00000000
[04:06:33.331]    __traceout=0x00000001      (SWO Trace)
[04:06:33.331]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:06:33.331]    __FlashAddr=0x00000000
[04:06:33.331]    __FlashLen=0x00000000
[04:06:33.332]    __FlashArg=0x00000000
[04:06:33.332]    __FlashOp=0x00000000
[04:06:33.332]    __Result=0x00000000
[04:06:33.332]    
[04:06:33.332]    // User-defined
[04:06:33.333]    DbgMCU_CR=0x00000007
[04:06:33.333]    DbgMCU_APB1_Fz=0x00000000
[04:06:33.333]    DbgMCU_APB2_Fz=0x00000000
[04:06:33.333]    TraceClk_Pin=0x00040002
[04:06:33.333]    TraceD0_Pin=0x00040003
[04:06:33.334]    TraceD1_Pin=0x00040004
[04:06:33.334]    TraceD2_Pin=0x00040005
[04:06:33.334]    TraceD3_Pin=0x00040006
[04:06:33.334]  </debugvars>
[04:06:33.334]  
[04:06:33.334]  <sequence name="TraceStart" Pname="" disable="false" info="">
[04:06:33.335]    <block atomic="false" info="">
[04:06:33.335]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO (asynchronous) Trace Selected?
[04:06:33.335]        // -> [traceSWO <= 0x00000001]
[04:06:33.335]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU (synchronous) Trace Selected?
[04:06:33.335]        // -> [traceTPIU <= 0x00000000]
[04:06:33.336]    </block>
[04:06:33.336]    <control if="traceSWO" while="" timeout="0" info="">
[04:06:33.336]      // if-block "traceSWO"
[04:06:33.336]        // =>  TRUE
[04:06:33.336]      <block atomic="false" info="">
[04:06:33.336]        Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
[04:06:33.337]          <sequence name="EnableTraceSWO" Pname="" disable="false" info="">
[04:06:33.337]            <block atomic="false" info="">
[04:06:33.337]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[04:06:33.337]                // -> [dbgmcu_val <= 0x00000000]
[04:06:33.337]              __var dbgmcu_trace_val = 0;                                                   // DBGMCU_CR Value
[04:06:33.337]                // -> [dbgmcu_trace_val <= 0x00000000]
[04:06:33.338]              dbgmcu_val        = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
[04:06:33.338]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[04:06:33.338]                // -> [dbgmcu_val <= 0x00000007]
[04:06:33.339]              dbgmcu_trace_val  = (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous
[04:06:33.339]                // -> [dbgmcu_trace_val <= 0x00000020]
[04:06:33.339]              Sequence("ConfigureTraceSWOPin");
[04:06:33.339]                <sequence name="ConfigureTraceSWOPin" Pname="" disable="false" info="">
[04:06:33.339]                  <block atomic="false" info="">
[04:06:33.339]                    __var pin     = 0;
[04:06:33.340]                      // -> [pin <= 0x00000000]
[04:06:33.340]                    __var port    = 0;
[04:06:33.340]                      // -> [port <= 0x00000000]
[04:06:33.340]                    __var portAdr = 0;
[04:06:33.340]                      // -> [portAdr <= 0x00000000]
[04:06:33.340]                    __var pos     = 0;
[04:06:33.340]                      // -> [pos <= 0x00000000]
[04:06:33.341]                    __var SWO_Pin = 0x00010003;          // PB3
[04:06:33.341]                      // -> [SWO_Pin <= 0x00010003]
[04:06:33.341]                  </block>
[04:06:33.341]                  <block atomic="false" info="configure SWO">
[04:06:33.341]                    pin     =               ((SWO_Pin            ) & 0x0000FFFF);
[04:06:33.341]                      // -> [pin <= 0x00000003]
[04:06:33.341]                    port    =               ((SWO_Pin >> 16) & 0x0000FFFF);
[04:06:33.342]                      // -> [port <= 0x00000001]
[04:06:33.342]                    portAdr = 0x40020000 + (((SWO_Pin >> 16) & 0x0000FFFF) * 0x400);
[04:06:33.342]                      // -> [portAdr <= 0x40020400]
[04:06:33.342]                    pos = pin * 2;
[04:06:33.342]                      // -> [pos <= 0x00000006]
[04:06:33.342]                    Write32(0x40023830,     ((Read32(0x40023830    )                         ) | (1 << port)) );  // RCC_AHB1ENR:   IO port clock enable
[04:06:33.343]                      // -> [Read32(0x40023830) => 0x00100000]   (__dp=0x00000000, __ap=0x00000000)
[04:06:33.343]                      // -> [Write32(0x40023830, 0x00100002)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:33.343]                    Write32(portAdr + 0x00, ((Read32(portAdr + 0x00) & ~( 3 << pos)) | (2 << pos )) );  // GPIOx_MODER:   Set Mode (Alternate Function)
[04:06:33.344]                      // -> [Read32(0x40020400) => 0x00000280]   (__dp=0x00000000, __ap=0x00000000)
[04:06:33.344]                      // -> [Write32(0x40020400, 0x00000280)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:33.344]                    Write32(portAdr + 0x08, ((Read32(portAdr + 0x08)                         ) | (3 << pos )) );  // GPIOx_OSPEEDR: Set Speed (Very High Speed)
[04:06:33.345]                      // -> [Read32(0x40020408) => 0x000000C0]   (__dp=0x00000000, __ap=0x00000000)
[04:06:33.345]                      // -> [Write32(0x40020408, 0x000000C0)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:33.345]                    Write32(portAdr + 0x0C, ((Read32(portAdr + 0x0C) & ~( 3 << pos))                    ) );  // GPIOx_PUPDR:   Set I/O to no pull-up/pull-down
[04:06:33.346]                      // -> [Read32(0x4002040C) => 0x00000100]   (__dp=0x00000000, __ap=0x00000000)
[04:06:33.346]                      // -> [Write32(0x4002040C, 0x00000100)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:33.346]                  </block>
[04:06:33.346]                  <control if="pin <  8" while="" timeout="0" info="">
[04:06:33.346]                    // if-block "pin <  8"
[04:06:33.347]                      // =>  TRUE
[04:06:33.347]                    <block atomic="false" info="">
[04:06:33.347]                      pos = ((pin    ) & 7) * 4;
[04:06:33.347]                        // -> [pos <= 0x0000000C]
[04:06:33.347]                      Write32(portAdr + 0x20, ((Read32(portAdr + 0x20) & ~(15 << pos))                    ) );  // GPIOx_AFRL:    Alternate Function to AF0
[04:06:33.347]                        // -> [Read32(0x40020420) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[04:06:33.348]                        // -> [Write32(0x40020420, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:33.348]                    </block>
[04:06:33.348]                    // end if-block "pin <  8"
[04:06:33.348]                  </control>
[04:06:33.348]                  <control if="pin >= 8" while="" timeout="0" info="">
[04:06:33.348]                    // if-block "pin >= 8"
[04:06:33.348]                      // =>  FALSE
[04:06:33.349]                    // skip if-block "pin >= 8"
[04:06:33.349]                  </control>
[04:06:33.349]                </sequence>
[04:06:33.349]            </block>
[04:06:33.349]            <block atomic="false" info="configure Trace I/O Enable + Trace Mode Asynchronous">
[04:06:33.349]              Write32(0xE0042004, dbgmcu_val | dbgmcu_trace_val);                           // Write DBGMCU_CR: Trace Settings
[04:06:33.350]                // -> [Write32(0xE0042004, 0x00000027)]   (__dp=0x00000000, __ap=0x00000000)
[04:06:33.350]            </block>
[04:06:33.350]          </sequence>
[04:06:33.350]      </block>
[04:06:33.350]      // end if-block "traceSWO"
[04:06:33.350]    </control>
[04:06:33.350]    <control if="traceTPIU" while="" timeout="0" info="">
[04:06:33.350]      // if-block "traceTPIU"
[04:06:33.350]        // =>  FALSE
[04:06:33.351]      // skip if-block "traceTPIU"
[04:06:33.351]    </control>
[04:06:33.351]  </sequence>
[04:06:33.351]  
[04:07:11.514]  **********  Sequence "TraceStop"  (Context="Disconnect", Pname="", info="")
[04:07:11.514]  
[04:07:11.515]  <debugvars>
[04:07:11.515]    // Pre-defined
[04:07:11.515]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:07:11.515]    __connection=0x00010201    (Connection Type="Debug", Reset Type="System Reset", Connection Under HW Reset)
[04:07:11.516]    __dp=0x00000000
[04:07:11.516]    __ap=0x00000000
[04:07:11.516]    __traceout=0x00000001      (SWO Trace)
[04:07:11.516]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:07:11.516]    __FlashAddr=0x00000000
[04:07:11.516]    __FlashLen=0x00000000
[04:07:11.516]    __FlashArg=0x00000000
[04:07:11.516]    __FlashOp=0x00000000
[04:07:11.517]    __Result=0x00000000
[04:07:11.517]    
[04:07:11.517]    // User-defined
[04:07:11.517]    DbgMCU_CR=0x00000007
[04:07:11.517]    DbgMCU_APB1_Fz=0x00000000
[04:07:11.517]    DbgMCU_APB2_Fz=0x00000000
[04:07:11.518]    TraceClk_Pin=0x00040002
[04:07:11.518]    TraceD0_Pin=0x00040003
[04:07:11.518]    TraceD1_Pin=0x00040004
[04:07:11.518]    TraceD2_Pin=0x00040005
[04:07:11.518]    TraceD3_Pin=0x00040006
[04:07:11.518]  </debugvars>
[04:07:11.519]  
[04:07:11.519]  <sequence name="TraceStop" Pname="" disable="false" info="">
[04:07:11.519]    <block atomic="false" info="">
[04:07:11.519]      __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO enabled?
[04:07:11.519]        // -> [traceSWO <= 0x00000001]
[04:07:11.519]      __var traceTPIU   = (__traceout & 0x2) != 0;                        // Synchronous trace port enabled?
[04:07:11.519]        // -> [traceTPIU <= 0x00000000]
[04:07:11.520]    </block>
[04:07:11.520]    <control if="traceSWO" while="" timeout="0" info="">
[04:07:11.520]      // if-block "traceSWO"
[04:07:11.520]        // =>  TRUE
[04:07:11.520]      <block atomic="false" info="">
[04:07:11.520]        Sequence("DisableTraceSWO");
[04:07:11.520]          <sequence name="DisableTraceSWO" Pname="" disable="false" info="">
[04:07:11.521]            <block atomic="false" info="">
[04:07:11.521]              __var dbgmcu_val       = 0;                                                   // DBGMCU_CR Value
[04:07:11.521]                // -> [dbgmcu_val <= 0x00000000]
[04:07:11.521]            </block>
[04:07:11.521]            <block atomic="false" info="unconfigure Trace I/O Enable + Trace Mode Asynchronous">
[04:07:11.521]              dbgmcu_val = Read32(0xE0042004) & (~0xE0);                                // Read DBGMCU_CR and clear trace setup
[04:07:11.522]                // -> [Read32(0xE0042004) => 0x00000027]   (__dp=0x00000000, __ap=0x00000000)
[04:07:11.522]                // -> [dbgmcu_val <= 0x00000007]
[04:07:11.522]              Write32(0xE0042004, dbgmcu_val);                                              // Write DBGMCU_CR: Trace Settings
[04:07:11.522]                // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[04:07:11.523]            </block>
[04:07:11.523]          </sequence>
[04:07:11.523]      </block>
[04:07:11.523]      // end if-block "traceSWO"
[04:07:11.523]    </control>
[04:07:11.523]    <control if="traceTPIU" while="" timeout="0" info="">
[04:07:11.523]      // if-block "traceTPIU"
[04:07:11.523]        // =>  FALSE
[04:07:11.524]      // skip if-block "traceTPIU"
[04:07:11.524]    </control>
[04:07:11.524]  </sequence>
[04:07:11.524]  
[04:09:59.348]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:09:59.348]  
[04:09:59.348]  <debugvars>
[04:09:59.349]    // Pre-defined
[04:09:59.349]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:09:59.349]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[04:09:59.349]    __dp=0x00000000
[04:09:59.349]    __ap=0x00000000
[04:09:59.350]    __traceout=0x00000001      (SWO Trace)
[04:09:59.350]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:09:59.350]    __FlashAddr=0x00000000
[04:09:59.350]    __FlashLen=0x00000000
[04:09:59.350]    __FlashArg=0x00000000
[04:09:59.351]    __FlashOp=0x00000000
[04:09:59.351]    __Result=0x00000000
[04:09:59.351]    
[04:09:59.351]    // User-defined
[04:09:59.351]    DbgMCU_CR=0x00000007
[04:09:59.351]    DbgMCU_APB1_Fz=0x00000000
[04:09:59.352]    DbgMCU_APB2_Fz=0x00000000
[04:09:59.352]    TraceClk_Pin=0x00040002
[04:09:59.352]    TraceD0_Pin=0x00040003
[04:09:59.352]    TraceD1_Pin=0x00040004
[04:09:59.352]    TraceD2_Pin=0x00040005
[04:09:59.352]    TraceD3_Pin=0x00040006
[04:09:59.353]  </debugvars>
[04:09:59.353]  
[04:09:59.353]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:09:59.353]    <block atomic="false" info="">
[04:09:59.353]      Sequence("CheckID");
[04:09:59.353]        <sequence name="CheckID" Pname="" disable="false" info="">
[04:09:59.353]          <block atomic="false" info="">
[04:09:59.353]            __var pidr1 = 0;
[04:09:59.354]              // -> [pidr1 <= 0x00000000]
[04:09:59.354]            __var pidr2 = 0;
[04:09:59.354]              // -> [pidr2 <= 0x00000000]
[04:09:59.354]            __var jep106id = 0;
[04:09:59.354]              // -> [jep106id <= 0x00000000]
[04:09:59.354]            __var ROMTableBase = 0;
[04:09:59.354]              // -> [ROMTableBase <= 0x00000000]
[04:09:59.354]            __ap = 0;      // AHB-AP
[04:09:59.355]              // -> [__ap <= 0x00000000]
[04:09:59.355]            ROMTableBase = ReadAP(0xF8) & ~0x3;
[04:09:59.355]              // -> [ReadAP(0x000000F8) => 0xE00FD003]   (__dp=0x00000000, __ap=0x00000000)
[04:09:59.355]              // -> [ROMTableBase <= 0xE00FD000]
[04:09:59.355]            pidr1 = Read32(ROMTableBase + 0x0FE4);
[04:09:59.356]              // -> [Read32(0xE00FDFE4) => 0x00000004]   (__dp=0x00000000, __ap=0x00000000)
[04:09:59.356]              // -> [pidr1 <= 0x00000004]
[04:09:59.356]            pidr2 = Read32(ROMTableBase + 0x0FE8);
[04:09:59.357]              // -> [Read32(0xE00FDFE8) => 0x0000001A]   (__dp=0x00000000, __ap=0x00000000)
[04:09:59.357]              // -> [pidr2 <= 0x0000001A]
[04:09:59.357]            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
[04:09:59.357]              // -> [jep106id <= 0x00000020]
[04:09:59.357]          </block>
[04:09:59.357]          <control if="jep106id != 0x20" while="" timeout="0" info="">
[04:09:59.357]            // if-block "jep106id != 0x20"
[04:09:59.357]              // =>  FALSE
[04:09:59.357]            // skip if-block "jep106id != 0x20"
[04:09:59.358]          </control>
[04:09:59.358]        </sequence>
[04:09:59.358]    </block>
[04:09:59.358]  </sequence>
[04:09:59.358]  
[04:09:59.372]  **********  Sequence "DebugCoreStart"  (Context="Connect", Pname="", info="")
[04:09:59.372]  
[04:09:59.372]  <debugvars>
[04:09:59.373]    // Pre-defined
[04:09:59.373]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:09:59.373]    __connection=0x00010202    (Connection Type="Flash", Reset Type="System Reset", Connection Under HW Reset)
[04:09:59.373]    __dp=0x00000000
[04:09:59.373]    __ap=0x00000000
[04:09:59.374]    __traceout=0x00000001      (SWO Trace)
[04:09:59.374]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:09:59.374]    __FlashAddr=0x00000000
[04:09:59.374]    __FlashLen=0x00000000
[04:09:59.374]    __FlashArg=0x00000000
[04:09:59.375]    __FlashOp=0x00000000
[04:09:59.375]    __Result=0x00000000
[04:09:59.375]    
[04:09:59.375]    // User-defined
[04:09:59.375]    DbgMCU_CR=0x00000007
[04:09:59.375]    DbgMCU_APB1_Fz=0x00000000
[04:09:59.376]    DbgMCU_APB2_Fz=0x00000000
[04:09:59.376]    TraceClk_Pin=0x00040002
[04:09:59.376]    TraceD0_Pin=0x00040003
[04:09:59.376]    TraceD1_Pin=0x00040004
[04:09:59.376]    TraceD2_Pin=0x00040005
[04:09:59.376]    TraceD3_Pin=0x00040006
[04:09:59.377]  </debugvars>
[04:09:59.377]  
[04:09:59.377]  <sequence name="DebugCoreStart" Pname="" disable="false" info="">
[04:09:59.377]    <block atomic="false" info="">
[04:09:59.377]      Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR
[04:09:59.378]        // -> [Write32(0xE000EDF0, 0xA05F0001)]   (__dp=0x00000000, __ap=0x00000000)
[04:09:59.378]      Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
[04:09:59.379]        // -> [Write32(0xE0042004, 0x00000007)]   (__dp=0x00000000, __ap=0x00000000)
[04:09:59.379]      Write32(0xE0042008, DbgMCU_APB1_Fz);                                    // DBGMCU_APB1_FZ: Configure APB1 Peripheral Freeze Behavior
[04:09:59.380]        // -> [Write32(0xE0042008, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[04:09:59.380]      Write32(0xE004200C, DbgMCU_APB2_Fz);                                    // DBGMCU_APB1_FZ: Configure APB2 Peripheral Freeze Behavior
[04:09:59.380]        // -> [Write32(0xE004200C, 0x00000000)]   (__dp=0x00000000, __ap=0x00000000)
[04:09:59.380]    </block>
[04:09:59.381]  </sequence>
[04:09:59.381]  
